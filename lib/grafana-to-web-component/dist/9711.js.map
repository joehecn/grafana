{"version":3,"file":"9711.js","mappings":"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","sources":["webpack://GrafanaToWebComponent/./.yarn/__virtual__/@grafana-experimental-virtual-4d6787efaa/0/cache/@grafana-experimental-npm-1.7.0-bca9c8fecc-f418072aab.zip/node_modules/@grafana/experimental/dist/esm/QueryEditor/EditorHeader.js","webpack://GrafanaToWebComponent/./.yarn/__virtual__/@grafana-experimental-virtual-4d6787efaa/0/cache/@grafana-experimental-npm-1.7.0-bca9c8fecc-f418072aab.zip/node_modules/@grafana/experimental/dist/esm/QueryEditor/FlexItem.js","webpack://GrafanaToWebComponent/./.yarn/__virtual__/@grafana-experimental-virtual-4d6787efaa/0/cache/@grafana-experimental-npm-1.7.0-bca9c8fecc-f418072aab.zip/node_modules/@grafana/experimental/dist/esm/QueryEditor/InlineSelect.js","webpack://GrafanaToWebComponent/./.yarn/__virtual__/@grafana-google-sdk-virtual-ad7df0fc72/0/cache/@grafana-google-sdk-npm-0.1.1-7f95046cde-a49e8b09ee.zip/node_modules/@grafana/google-sdk/dist/index.production.js","webpack://GrafanaToWebComponent/./.yarn/__virtual__/@grafana-google-sdk-virtual-ad7df0fc72/0/cache/@grafana-google-sdk-npm-0.1.1-7f95046cde-a49e8b09ee.zip/node_modules/@grafana/google-sdk/index.js","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/CloudMonitoringCheatSheet.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/ConfigEditor/ConfigEditor.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/dataquery.gen.ts","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/Project.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/PromQLEditor.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/constants.ts","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/QueryHeader.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/functions.ts","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/AliasBy.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/LookbackPeriodSelect.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/PeriodSelect.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/SLO.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/Selector.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/Service.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/SLOQueryEditor.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/Aggregation.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/GroupBy.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/AlignmentFunction.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/Alignment.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/LabelFilter.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/AnnotationsHelp.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/GraphPeriod.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/MQLQueryEditor.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/Preprocessor.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/VisualMetricQueryEditor.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/MetricQueryEditor.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/Fields.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/QueryEditor.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/VariableQueryEditor.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/components/AnnotationQueryEditor.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/annotationSupport.ts","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/CloudMonitoringMetricFindQuery.ts","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/variables.ts","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/datasource.ts","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/tracking.ts","webpack://GrafanaToWebComponent/./public/app/plugins/datasource/cloud-monitoring/module.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React__default from 'react';\nimport { useStyles2 } from '@grafana/ui';\n\nconst EditorHeader = ({ children }) => {\n  const styles = useStyles2(getStyles);\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: styles.root }, children);\n};\nconst getStyles = (theme) => ({\n  root: css({\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    gap: theme.spacing(3),\n    minHeight: theme.spacing(4)\n  })\n});\n\nexport { EditorHeader };\n//# sourceMappingURL=EditorHeader.js.map\n","import React__default from 'react';\n\nconst FlexItem = ({ grow, shrink }) => {\n  return /* @__PURE__ */ React__default.createElement(\"div\", { style: { display: \"block\", flexGrow: grow, flexShrink: shrink } });\n};\n\nexport { FlexItem };\n//# sourceMappingURL=FlexItem.js.map\n","import { css, cx } from '@emotion/css';\nimport React__default, { useState } from 'react';\nimport { useStyles2, Select, SelectContainer as SelectContainer$1 } from '@grafana/ui';\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nfunction InlineSelect(_a) {\n  var _b = _a, { label: labelProp } = _b, props = __objRest(_b, [\"label\"]);\n  const styles = useStyles2(getSelectStyles);\n  const [id] = useState(() => Math.random().toString(16).slice(2));\n  const components = {\n    SelectContainer,\n    ValueContainer,\n    SingleValue: ValueContainer\n  };\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: styles.root }, labelProp && /* @__PURE__ */ React__default.createElement(\"label\", { className: styles.label, htmlFor: id }, labelProp, \":\", \"\\xA0\"), /* @__PURE__ */ React__default.createElement(Select, __spreadProps(__spreadValues({ openMenuOnFocus: true, inputId: id }, props), { components })));\n}\nconst SelectContainer = (props) => {\n  const { children } = props;\n  const styles = useStyles2(getSelectStyles);\n  return /* @__PURE__ */ React__default.createElement(SelectContainer$1, __spreadProps(__spreadValues({}, props), { className: cx(props.className, styles.container) }), children);\n};\nconst ValueContainer = (props) => {\n  const { className, children } = props;\n  const styles = useStyles2(getSelectStyles);\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: cx(className, styles.valueContainer) }, children);\n};\nconst getSelectStyles = (theme) => ({\n  root: css({\n    display: \"flex\",\n    fontSize: 12,\n    alignItems: \"center\"\n  }),\n  label: css({\n    color: theme.colors.text.secondary,\n    whiteSpace: \"nowrap\"\n  }),\n  container: css({\n    background: \"none\",\n    borderColor: \"transparent\"\n  }),\n  valueContainer: css({\n    display: \"flex\",\n    alignItems: \"center\",\n    flex: \"initial\",\n    color: theme.colors.text.secondary,\n    fontSize: 12\n  })\n});\n\nexport { InlineSelect };\n//# sourceMappingURL=InlineSelect.js.map\n","Object.defineProperty(exports,\"__esModule\",{value:!0});var e=require(\"@grafana/data\"),t=require(\"@grafana/ui\"),a=require(\"react\"),n=require(\"lodash\");function l(e){return e&&\"object\"==typeof e&&\"default\"in e?e:{default:e}}var o=l(a);const i={JWT:\"jwt\",GCE:\"gce\"},r=\"Configuration help box\",s=\"Configuration drop zone\",c=\"Configuration text area\",u=\"Paste JWT button\",d=\"JWT form\",p=\"JWT button\",f=\"GCE button\",m=\"Private Key Path Input\",g=\"Private Key Input\",h=\"Fill JWT info manually\",y=\"Show private key path input\",E=\"Show private key input\",v=[\"private_key\",\"token_uri\",\"client_email\",\"project_id\"],T=({onChange:e,showConfigEditor:n})=>{const[l,i]=a.useState(),[r,d]=a.useState(null),p=t.useTheme2(),f=a.useCallback((e=>{i(null),d(!0)}),[d]),m=a.useCallback((e=>{d(null),i(null)}),[d]),g=a.useCallback((t=>{if(\"\"!==t.trim()){let a;try{a=JSON.parse(t)}catch(e){i(\"Invalid JWT token\")}const l=b(a);l.isValid?(n(),e({privateKey:a.private_key,tokenUri:a.token_uri,clientEmail:a.client_email,projectId:a.project_id})):i(l.error)}}),[i,e,n]);return o.default.createElement(o.default.Fragment,null,o.default.createElement(t.Field,{label:\"JWT token\",invalid:Boolean(l),description:r?\"Paste JWT token below\":\"Upload or paste Google JWT token\",error:l},o.default.createElement(o.default.Fragment,null,!0!==r&&o.default.createElement(\"div\",{\"data-testid\":s},t.FileDropzone&&o.default.createElement(t.FileDropzone,{options:{multiple:!1,accept:\".json\"},readAs:\"readAsText\",onLoad:e=>{g(e),d(!1)}},o.default.createElement(\"p\",{style:{margin:0,fontSize:`${p.typography.h4.fontSize}`,textAlign:\"center\"}},\"Drop the Google JWT file here\",o.default.createElement(\"br\",null),o.default.createElement(\"br\",null),o.default.createElement(t.Button,{fill:\"outline\"},\"Click to browse files\")))),r&&o.default.createElement(t.TextArea,{\"data-testid\":c,autoFocus:!0,invalid:Boolean(l),placeholder:\"Paste Google JWT token here\",onBlur:e=>g(e.currentTarget.value),rows:12}))),!r&&o.default.createElement(o.default.Fragment,null,o.default.createElement(t.Button,{\"data-testid\":u,type:\"button\",fill:\"outline\",style:{color:`${p.colors.primary.text}`},onClick:f},\"Paste JWT Token\"),o.default.createElement(\"span\",{style:{paddingRight:\"10px\",paddingLeft:\"10px\"}},\"or\"),o.default.createElement(t.Button,{\"data-testid\":h,type:\"button\",fill:\"outline\",style:{color:`${p.colors.primary.text}`},onClick:n},\"Fill In JWT Token manually\")),r&&l&&o.default.createElement(t.Field,null,o.default.createElement(t.Button,{type:\"button\",fill:\"outline\",style:{color:`${p.colors.primary.text}`},onClick:m},\"Upload JWT Token\")))},b=e=>{if(!n.isObject(e))return{isValid:!1,error:\"Invalid JWT token\"};const t=v.filter((t=>!e[t]));return t.length>0?{isValid:!1,error:`Missing keys: ${t.join(\", \")}`}:{isValid:!0}},{SecretFormField:j}=t.LegacyForms;var k;!function(e){e.PATH=\"path\",e.JWT=\"jwt\"}(k||(k={}));const J=({options:a,onReset:n,onOptionsChange:l})=>{var i;const[r,s]=o.default.useState((e=>\"privateKeyPath\"in e&&\"\"!==e.privateKeyPath?k.PATH:k.JWT)(a.jsonData)),c=t=>e.onUpdateDatasourceJsonDataOption({options:a,onOptionsChange:l},t),u=()=>{r===k.JWT?s(k.PATH):s(k.JWT)},p=o.default.createElement(\"span\",null,r===k.PATH?o.default.createElement(\"a\",{className:\"external-link\",onClick:u,\"data-testid\":E},\"Paste private key\"):\"Paste private key\",\" \",\"or  \",r===k.JWT?o.default.createElement(\"a\",{className:\"external-link\",onClick:u,\"data-testid\":y},\"provide path to private file\"):\"provide path to private key file\"),f={isConfigured:Boolean(a.secureJsonFields.privateKey),value:(null===(i=a.secureJsonData)||void 0===i?void 0:i.privateKey)||\"\",placeholder:\"Enter Private key\",onReset:()=>n(),onChange:e.onUpdateDatasourceSecureJsonDataOption({options:a,onOptionsChange:l},\"privateKey\"),\"data-testid\":g};return o.default.createElement(\"div\",{\"data-testid\":d},o.default.createElement(t.Field,{label:\"Project ID\"},o.default.createElement(t.Input,{id:\"defaultProject\",width:60,value:a.jsonData.defaultProject||\"\",onChange:c(\"defaultProject\")})),o.default.createElement(t.Field,{label:\"Client email\"},o.default.createElement(t.Input,{width:60,id:\"clientEmail\",value:a.jsonData.clientEmail||\"\",onChange:c(\"clientEmail\")})),o.default.createElement(t.Field,{label:\"Token URI\"},o.default.createElement(t.Input,{width:60,id:\"tokenUri\",value:a.jsonData.tokenUri||\"\",onChange:c(\"tokenUri\")})),r===k.PATH&&o.default.createElement(t.Field,{label:\"Private key path\",description:p},o.default.createElement(t.Input,{width:60,id:\"privateKeyPath\",value:a.jsonData.privateKeyPath||\"\",placeholder:\"File location of your private key (e.g. /etc/secrets/gce.pem)\",onChange:c(\"privateKeyPath\"),\"data-testid\":m})),r===k.JWT&&o.default.createElement(o.default.Fragment,null,t.SecretInput?o.default.createElement(t.Field,{label:\"Private key\",description:p},o.default.createElement(t.SecretInput,Object.assign({},f,{width:60}))):o.default.createElement(j,Object.assign({},f,{label:\"Private key\",labelWidth:10,inputWidth:20}))))};function C(n){const{options:l,onOptionsChange:r,authOptions:s}=n,{jsonData:c,secureJsonFields:u,secureJsonData:d}=l,p=()=>Boolean(c.clientEmail&&c.defaultProject&&c.tokenUri&&(u&&u.privateKey||c.privateKeyPath));c.authenticationType||(c.authenticationType=i.JWT);const[f,m]=a.useState(O(c.authenticationType)),[g,h]=a.useState(p());return o.default.createElement(o.default.Fragment,null,o.default.createElement(t.FieldSet,{label:\"Authentication\"},o.default.createElement(t.Field,{label:\"Authentication type\"},o.default.createElement(t.RadioButtonGroup,{options:s,value:c.authenticationType||i.JWT,onChange:e=>{h(p()),r(Object.assign(Object.assign({},l),{jsonData:Object.assign(Object.assign({},l.jsonData),{authenticationType:e})})),m(O(e))}}))),f&&o.default.createElement(t.FieldSet,{label:\"JWT Key Details\"},g?o.default.createElement(J,{options:l,onReset:()=>(e=>{const t=Object.assign({},d),a=e?Object.assign(Object.assign({},l.jsonData),e):Object.assign({},l.jsonData);delete a.clientEmail,delete a.defaultProject,delete a.tokenUri,delete a.privateKeyPath,delete t.privateKey,m(!0),h(!1),r(Object.assign(Object.assign({},l),{secureJsonFields:Object.assign(Object.assign({},l.secureJsonFields),{privateKey:!1}),secureJsonData:t,jsonData:a}))})(),onOptionsChange:r}):o.default.createElement(T,{showConfigEditor:()=>{h(!0)},onChange:e=>{r(Object.assign(Object.assign({},l),{secureJsonFields:Object.assign(Object.assign({},u),{privateKey:!0}),secureJsonData:Object.assign(Object.assign({},d),{privateKey:e.privateKey}),jsonData:Object.assign(Object.assign({},c),{clientEmail:e.clientEmail,defaultProject:e.projectId,tokenUri:e.tokenUri})}))}}),\" \"),c.authenticationType===i.GCE&&o.default.createElement(t.Field,{label:\"Default project\"},o.default.createElement(t.Input,{id:\"defaultProject\",width:60,value:l.jsonData.defaultProject||\"\",onChange:e.onUpdateDatasourceJsonDataOption(n,\"defaultProject\")})))}const O=e=>e===i.JWT||void 0===e,P=[{label:\"Google JWT File\",value:i.JWT,ariaLabel:p},{label:\"GCE Default Service Account\",value:i.GCE,ariaLabel:f}];exports.AuthConfig=C,exports.ConnectionConfig=e=>{const{options:{jsonData:a}}=e;a.authenticationType||(a.authenticationType=i.JWT);const n=a.authenticationType===i.JWT||void 0===a.authenticationType;return o.default.createElement(o.default.Fragment,null,o.default.createElement(C,Object.assign({authOptions:P},e)),o.default.createElement(\"div\",{className:\"grafana-info-box\",style:{marginTop:\"16px\"},\"data-testid\":r},o.default.createElement(\"p\",null,\"Don’t know how to get a service account key file or create a service account? Read more\",\" \",o.default.createElement(\"a\",{className:\"external-link\",target:\"_blank\",rel:\"noopener noreferrer\",href:\"https://grafana.com/docs/grafana/latest/datasources/google-cloud-monitoring/google-authentication/\"},\"in the documentation.\"))),!n&&o.default.createElement(t.Alert,{title:\"\",severity:\"info\"},\"Verify GCE default service account by clicking Save & Test\"))},exports.GOOGLE_AUTH_TYPE_OPTIONS=P,exports.GoogleAuthType=i,exports.JWTConfigEditor=T,exports.JWTForm=J;\n//# sourceMappingURL=index.production.js.map\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/index.production.js');\n} else {\n  module.exports = require('./dist/index.development.js');\n}\n","import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\n\nimport { CloudMonitoringQuery } from '../types/query';\n\nexport default class CloudMonitoringCheatSheet extends PureComponent<\n  QueryEditorHelpProps<CloudMonitoringQuery>,\n  { userExamples: string[] }\n> {\n  render() {\n    return (\n      <div>\n        <h2>Cloud Monitoring alias patterns</h2>\n        <div>\n          <p>\n            Format the legend keys any way you want by using alias patterns. Format the legend keys any way you want by\n            using alias patterns.\n          </p>\n          Example:\n          <code>{`${'{{metric.name}} - {{metric.label.instance_name}}'}`}</code>\n          <br />\n          Result: &nbsp;&nbsp;<code>cpu/usage_time - server1-europe-west-1</code>\n          <br />\n          <br />\n          <span>Patterns:</span>\n          <br />\n          <ul\n            className={css`\n              list-style: none;\n            `}\n          >\n            <li>\n              <code>{`${'{{metric.type}}'}`}</code> = metric type e.g. compute.googleapis.com/instance/cpu/usage_time\n            </li>\n            <li>\n              <code>{`${'{{metric.name}}'}`}</code> = name part of metric e.g. instance/cpu/usage_time\n            </li>\n            <li>\n              <code>{`${'{{metric.service}}'}`}</code> = service part of metric e.g. compute\n            </li>\n            <li>\n              <code>{`${'{{metric.label.label_name}}'}`}</code> = Metric label metadata e.g. metric.label.instance_name\n            </li>\n            <li>\n              <code>{`${'{{resource.label.label_name}}'}`}</code> = Resource label metadata e.g. resource.label.zone\n            </li>\n            <li>\n              <code>{`${'{{metadata.system_labels.name}}'}`}</code> = Meta data system labels e.g.\n              metadata.system_labels.name. For this to work, the needs to be included in the group by\n            </li>\n            <li>\n              <code>{`${'{{metadata.user_labels.name}}'}`}</code> = Meta data user labels e.g.\n              metadata.user_labels.name. For this to work, the needs to be included in the group by\n            </li>\n            <li>\n              <code>{`${'{{bucket}}'}`}</code> = bucket boundary for distribution metrics when using a heatmap in\n              Grafana\n            </li>\n            <li>\n              <code>{`${'{{project}}'}`}</code> = The project name that was specified in the query editor\n            </li>\n            <li>\n              <code>{`${'{{service}}'}`}</code> = The service id that was specified in the SLO query editor\n            </li>\n            <li>\n              <code>{`${'{{slo}}'}`}</code> = The SLO id that was specified in the SLO query editor\n            </li>\n            <li>\n              <code>{`${'{{selector}}'}`}</code> = The Selector function that was specified in the SLO query editor\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { ConfigSection, DataSourceDescription } from '@grafana/experimental';\nimport { ConnectionConfig } from '@grafana/google-sdk';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Divider, SecureSocksProxySettings } from '@grafana/ui';\nimport { config } from 'app/core/config';\n\nimport { CloudMonitoringOptions, CloudMonitoringSecureJsonData } from '../../types/types';\n\nexport type Props = DataSourcePluginOptionsEditorProps<CloudMonitoringOptions, CloudMonitoringSecureJsonData>;\n\nexport class ConfigEditor extends PureComponent<Props> {\n  handleOnOptionsChange = (options: Props['options']) => {\n    if (options.jsonData.privateKeyPath || options.secureJsonFields['privateKey']) {\n      reportInteraction('grafana_cloud_monitoring_config_changed', {\n        authenticationType: 'JWT',\n        privateKey: options.secureJsonFields['privateKey'],\n        privateKeyPath: !!options.jsonData.privateKeyPath,\n      });\n    }\n    this.props.onOptionsChange(options);\n  };\n\n  render() {\n    const { options, onOptionsChange } = this.props;\n    return (\n      <>\n        <DataSourceDescription\n          dataSourceName=\"Google Cloud Monitoring\"\n          docsLink=\"https://grafana.com/docs/grafana/latest/datasources/google-cloud-monitoring/\"\n          hasRequiredFields\n        />\n        <Divider />\n        <ConnectionConfig {...this.props} onOptionsChange={this.handleOnOptionsChange}></ConnectionConfig>\n        {config.secureSocksDSProxyEnabled && (\n          <>\n            <Divider />\n            <ConfigSection\n              title=\"Additional settings\"\n              description=\"Additional settings are optional settings that can be configured for more control over your data source. This includes Secure Socks Proxy.\"\n              isCollapsible={true}\n              isInitiallyOpen={options.jsonData.enableSecureSocksProxy !== undefined}\n            >\n              <SecureSocksProxySettings options={options} onOptionsChange={onOptionsChange} />\n            </ConfigSection>\n          </>\n        )}\n      </>\n    );\n  }\n}\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTSTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as common from '@grafana/schema';\n\nexport interface CloudMonitoringQuery extends common.DataQuery {\n  /**\n   * Aliases can be set to modify the legend labels. e.g. {{metric.label.xxx}}. See docs for more detail.\n   */\n  aliasBy?: string;\n  /**\n   * Time interval in milliseconds.\n   */\n  intervalMs?: number;\n  /**\n   * PromQL sub-query properties.\n   */\n  promQLQuery?: PromQLQuery;\n  /**\n   * SLO sub-query properties.\n   */\n  sloQuery?: SLOQuery;\n  /**\n   * GCM query type.\n   * queryType: #QueryType\n   * Time Series List sub-query properties.\n   */\n  timeSeriesList?: TimeSeriesList;\n  /**\n   * Time Series sub-query properties.\n   */\n  timeSeriesQuery?: TimeSeriesQuery;\n}\n\n/**\n * Defines the supported queryTypes.\n */\nexport enum QueryType {\n  ANNOTATION = 'annotation',\n  PROMQL = 'promQL',\n  SLO = 'slo',\n  TIME_SERIES_LIST = 'timeSeriesList',\n  TIME_SERIES_QUERY = 'timeSeriesQuery',\n}\n\n/**\n * Time Series List sub-query properties.\n */\nexport interface TimeSeriesList {\n  /**\n   * Alignment period to use when regularizing data. Defaults to cloud-monitoring-auto.\n   */\n  alignmentPeriod?: string;\n  /**\n   * Reducer applied across a set of time-series values. Defaults to REDUCE_NONE.\n   */\n  crossSeriesReducer: string;\n  /**\n   * Array of filters to query data by. Labels that can be filtered on are defined by the metric.\n   */\n  filters?: Array<string>;\n  /**\n   * Array of labels to group data by.\n   */\n  groupBys?: Array<string>;\n  /**\n   * Alignment function to be used. Defaults to ALIGN_MEAN.\n   */\n  perSeriesAligner?: string;\n  /**\n   * Preprocessor is not part of the API, but is used to store the preprocessor and not affect the UI for the rest of parameters\n   */\n  preprocessor?: PreprocessorType;\n  /**\n   * GCP project to execute the query against.\n   */\n  projectName: string;\n  /**\n   * Only present if a preprocessor is selected. Alignment period to use when regularizing data. Defaults to cloud-monitoring-auto.\n   */\n  secondaryAlignmentPeriod?: string;\n  /**\n   * Only present if a preprocessor is selected. Reducer applied across a set of time-series values. Defaults to REDUCE_NONE.\n   */\n  secondaryCrossSeriesReducer?: string;\n  /**\n   * Only present if a preprocessor is selected. Array of labels to group data by.\n   */\n  secondaryGroupBys?: Array<string>;\n  /**\n   * Only present if a preprocessor is selected. Alignment function to be used. Defaults to ALIGN_MEAN.\n   */\n  secondaryPerSeriesAligner?: string;\n  /**\n   * Annotation text.\n   */\n  text?: string;\n  /**\n   * Annotation title.\n   */\n  title?: string;\n  /**\n   * Data view, defaults to FULL.\n   */\n  view?: string;\n}\n\nexport const defaultTimeSeriesList: Partial<TimeSeriesList> = {\n  filters: [],\n  groupBys: [],\n  secondaryGroupBys: [],\n};\n\n/**\n * Types of pre-processor available. Defined by the metric.\n */\nexport enum PreprocessorType {\n  Delta = 'delta',\n  None = 'none',\n  Rate = 'rate',\n}\n\n/**\n * Time Series sub-query properties.\n */\nexport interface TimeSeriesQuery {\n  /**\n   * To disable the graphPeriod, it should explictly be set to 'disabled'.\n   */\n  graphPeriod?: ('disabled' | string);\n  /**\n   * GCP project to execute the query against.\n   */\n  projectName: string;\n  /**\n   * MQL query to be executed.\n   */\n  query: string;\n}\n\n/**\n * SLO sub-query properties.\n */\nexport interface SLOQuery {\n  /**\n   * Alignment period to use when regularizing data. Defaults to cloud-monitoring-auto.\n   */\n  alignmentPeriod?: string;\n  /**\n   * SLO goal value.\n   */\n  goal?: number;\n  /**\n   * Specific lookback period for the SLO.\n   */\n  lookbackPeriod?: string;\n  /**\n   * Alignment function to be used. Defaults to ALIGN_MEAN.\n   */\n  perSeriesAligner?: string;\n  /**\n   * GCP project to execute the query against.\n   */\n  projectName: string;\n  /**\n   * SLO selector.\n   */\n  selectorName: string;\n  /**\n   * ID for the service the SLO is in.\n   */\n  serviceId: string;\n  /**\n   * Name for the service the SLO is in.\n   */\n  serviceName: string;\n  /**\n   * ID for the SLO.\n   */\n  sloId: string;\n  /**\n   * Name of the SLO.\n   */\n  sloName: string;\n}\n\n/**\n * PromQL sub-query properties.\n */\nexport interface PromQLQuery {\n  /**\n   * PromQL expression/query to be executed.\n   */\n  expr: string;\n  /**\n   * GCP project to execute the query against.\n   */\n  projectName: string;\n  /**\n   * PromQL min step\n   */\n  step: string;\n}\n\n/**\n * @deprecated This type is for migration purposes only. Replaced by TimeSeriesList Metric sub-query properties.\n */\nexport interface MetricQuery {\n  /**\n   * Aliases can be set to modify the legend labels. e.g. {{metric.label.xxx}}. See docs for more detail.\n   */\n  aliasBy?: string;\n  /**\n   * Alignment period to use when regularizing data. Defaults to cloud-monitoring-auto.\n   */\n  alignmentPeriod?: string;\n  /**\n   * Reducer applied across a set of time-series values. Defaults to REDUCE_NONE.\n   */\n  crossSeriesReducer: string;\n  editorMode: string;\n  /**\n   * Array of filters to query data by. Labels that can be filtered on are defined by the metric.\n   */\n  filters?: Array<string>;\n  /**\n   * To disable the graphPeriod, it should explictly be set to 'disabled'.\n   */\n  graphPeriod?: ('disabled' | string);\n  /**\n   * Array of labels to group data by.\n   */\n  groupBys?: Array<string>;\n  metricKind?: MetricKind;\n  metricType: string;\n  /**\n   * Alignment function to be used. Defaults to ALIGN_MEAN.\n   */\n  perSeriesAligner?: string;\n  /**\n   * Preprocessor is not part of the API, but is used to store the preprocessor and not affect the UI for the rest of parameters\n   */\n  preprocessor?: PreprocessorType;\n  /**\n   * GCP project to execute the query against.\n   */\n  projectName: string;\n  /**\n   * MQL query to be executed.\n   */\n  query: string;\n  valueType?: string;\n  view?: string;\n}\n\nexport const defaultMetricQuery: Partial<MetricQuery> = {\n  filters: [],\n  groupBys: [],\n};\n\nexport enum MetricKind {\n  CUMULATIVE = 'CUMULATIVE',\n  DELTA = 'DELTA',\n  GAUGE = 'GAUGE',\n  METRIC_KIND_UNSPECIFIED = 'METRIC_KIND_UNSPECIFIED',\n}\n\nexport enum ValueTypes {\n  BOOL = 'BOOL',\n  DISTRIBUTION = 'DISTRIBUTION',\n  DOUBLE = 'DOUBLE',\n  INT64 = 'INT64',\n  MONEY = 'MONEY',\n  STRING = 'STRING',\n  VALUE_TYPE_UNSPECIFIED = 'VALUE_TYPE_UNSPECIFIED',\n}\n\nexport enum AlignmentTypes {\n  ALIGN_COUNT = 'ALIGN_COUNT',\n  ALIGN_COUNT_FALSE = 'ALIGN_COUNT_FALSE',\n  ALIGN_COUNT_TRUE = 'ALIGN_COUNT_TRUE',\n  ALIGN_DELTA = 'ALIGN_DELTA',\n  ALIGN_FRACTION_TRUE = 'ALIGN_FRACTION_TRUE',\n  ALIGN_INTERPOLATE = 'ALIGN_INTERPOLATE',\n  ALIGN_MAX = 'ALIGN_MAX',\n  ALIGN_MEAN = 'ALIGN_MEAN',\n  ALIGN_MIN = 'ALIGN_MIN',\n  ALIGN_NEXT_OLDER = 'ALIGN_NEXT_OLDER',\n  ALIGN_NONE = 'ALIGN_NONE',\n  ALIGN_PERCENTILE_05 = 'ALIGN_PERCENTILE_05',\n  ALIGN_PERCENTILE_50 = 'ALIGN_PERCENTILE_50',\n  ALIGN_PERCENTILE_95 = 'ALIGN_PERCENTILE_95',\n  ALIGN_PERCENTILE_99 = 'ALIGN_PERCENTILE_99',\n  ALIGN_PERCENT_CHANGE = 'ALIGN_PERCENT_CHANGE',\n  ALIGN_RATE = 'ALIGN_RATE',\n  ALIGN_STDDEV = 'ALIGN_STDDEV',\n  ALIGN_SUM = 'ALIGN_SUM',\n}\n\n/**\n * @deprecated Use TimeSeriesList instead. Legacy annotation query properties for migration purposes.\n */\nexport interface LegacyCloudMonitoringAnnotationQuery {\n  /**\n   * Array of filters to query data by. Labels that can be filtered on are defined by the metric.\n   */\n  filters: Array<string>;\n  metricKind: MetricKind;\n  metricType: string;\n  /**\n   * GCP project to execute the query against.\n   */\n  projectName: string;\n  /**\n   * Query refId.\n   */\n  refId: string;\n  /**\n   * Annotation text.\n   */\n  text: string;\n  /**\n   * Annotation title.\n   */\n  title: string;\n  valueType: string;\n}\n\nexport const defaultLegacyCloudMonitoringAnnotationQuery: Partial<LegacyCloudMonitoringAnnotationQuery> = {\n  filters: [],\n};\n\n/**\n * Query filter representation.\n */\nexport interface Filter {\n  /**\n   * Filter condition.\n   */\n  condition?: string;\n  /**\n   * Filter key.\n   */\n  key: string;\n  /**\n   * Filter operator.\n   */\n  operator: string;\n  /**\n   * Filter value.\n   */\n  value: string;\n}\n\nexport enum MetricFindQueryTypes {\n  Aggregations = 'aggregations',\n  Aligners = 'aligners',\n  AlignmentPeriods = 'alignmentPeriods',\n  DefaultProject = 'defaultProject',\n  LabelKeys = 'labelKeys',\n  LabelValues = 'labelValues',\n  MetricTypes = 'metricTypes',\n  Projects = 'projects',\n  ResourceTypes = 'resourceTypes',\n  SLO = 'slo',\n  SLOServices = 'sloServices',\n  Selectors = 'selectors',\n  Services = 'services',\n}\n\nexport interface GoogleCloudMonitoring {}\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\n\nexport interface Props {\n  refId: string;\n  datasource: CloudMonitoringDatasource;\n  onChange: (projectName: string) => void;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  projectName: string;\n}\n\nexport function Project({ refId, projectName, datasource, onChange, templateVariableOptions }: Props) {\n  const [projects, setProjects] = useState<Array<SelectableValue<string>>>([]);\n  useEffect(() => {\n    datasource.getProjects().then((projects) => setProjects(projects));\n  }, [datasource]);\n\n  const projectsWithTemplateVariables = useMemo(\n    () => [\n      {\n        label: 'Template Variables',\n        options: templateVariableOptions,\n      },\n      ...projects,\n    ],\n    [projects, templateVariableOptions]\n  );\n\n  return (\n    <EditorField label=\"Project\">\n      <Select\n        width=\"auto\"\n        allowCustomValue\n        formatCreateLabel={(v) => `Use project: ${v}`}\n        onChange={({ value }) => onChange(value!)}\n        options={projectsWithTemplateVariables}\n        value={{ value: projectName, label: projectName }}\n        placeholder=\"Select Project\"\n        inputId={`${refId}-project`}\n      />\n    </EditorField>\n  );\n}\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorRow } from '@grafana/experimental';\nimport { TextArea, Input } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { PromQLQuery } from '../types/query';\n\nimport { Project } from './Project';\n\nexport interface Props {\n  refId: string;\n  variableOptionGroup: SelectableValue<string>;\n  onChange: (query: PromQLQuery) => void;\n  onRunQuery: () => void;\n  query: PromQLQuery;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const defaultQuery: (dataSource: CloudMonitoringDatasource) => PromQLQuery = (dataSource) => ({\n  projectName: dataSource.getDefaultProject(),\n  expr: '',\n  step: '10s',\n});\n\nexport function PromQLQueryEditor({\n  refId,\n  query,\n  datasource,\n  onChange,\n  variableOptionGroup,\n  onRunQuery,\n}: React.PropsWithChildren<Props>) {\n  function onReturnKeyDown(e: React.KeyboardEvent) {\n    if (e.key === 'Enter' && e.shiftKey) {\n      onRunQuery();\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }\n\n  return (\n    <>\n      <EditorRow>\n        <Project\n          refId={refId}\n          templateVariableOptions={variableOptionGroup.options}\n          projectName={query.projectName}\n          datasource={datasource}\n          onChange={(projectName) => onChange({ ...query, projectName })}\n        />\n        <TextArea\n          name=\"Query\"\n          className=\"slate-query-field\"\n          value={query.expr}\n          rows={10}\n          placeholder=\"Enter a Cloud Monitoring Prometheus query (Run with Shift+Enter)\"\n          onBlur={onRunQuery}\n          onKeyDown={onReturnKeyDown}\n          onChange={(e) => onChange({ ...query, expr: e.currentTarget.value })}\n        />\n        <EditorField\n          label=\"Min step\"\n          tooltip={\n            'Time units and built-in variables can be used here, for example: $__interval, $__rate_interval, 5s, 1m, 3h, 1d, 1y (Default if no unit is specified: 10s)'\n          }\n        >\n          <Input\n            type={'string'}\n            placeholder={'auto'}\n            onChange={(e) => onChange({ ...query, step: e.currentTarget.value })}\n            onKeyDown={onReturnKeyDown}\n            value={query.step ?? ''}\n          />\n        </EditorField>\n      </EditorRow>\n    </>\n  );\n}\n","import { QueryType, MetricKind, ValueTypes } from './types/query';\n\n// not super excited about using uneven numbers, but this makes it align perfectly with rows that has two fields\nexport const INPUT_WIDTH = 71;\nexport const LABEL_WIDTH = 19;\nexport const INNER_LABEL_WIDTH = 14;\nexport const SELECT_WIDTH = 28;\n\nexport const ALIGNMENTS = [\n  {\n    text: 'none',\n    value: 'ALIGN_NONE',\n    valueTypes: [\n      ValueTypes.INT64,\n      ValueTypes.DOUBLE,\n      ValueTypes.MONEY,\n      ValueTypes.DISTRIBUTION,\n      ValueTypes.STRING,\n      ValueTypes.VALUE_TYPE_UNSPECIFIED,\n      ValueTypes.BOOL,\n    ],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'delta',\n    value: 'ALIGN_DELTA',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.CUMULATIVE, MetricKind.DELTA],\n  },\n  {\n    text: 'rate',\n    value: 'ALIGN_RATE',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.CUMULATIVE, MetricKind.DELTA],\n  },\n  {\n    text: 'interpolate',\n    value: 'ALIGN_INTERPOLATE',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'next older',\n    value: 'ALIGN_NEXT_OLDER',\n    valueTypes: [\n      ValueTypes.INT64,\n      ValueTypes.DOUBLE,\n      ValueTypes.MONEY,\n      ValueTypes.DISTRIBUTION,\n      ValueTypes.STRING,\n      ValueTypes.VALUE_TYPE_UNSPECIFIED,\n      ValueTypes.BOOL,\n    ],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'min',\n    value: 'ALIGN_MIN',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'max',\n    value: 'ALIGN_MAX',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'mean',\n    value: 'ALIGN_MEAN',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'count',\n    value: 'ALIGN_COUNT',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'sum',\n    value: 'ALIGN_SUM',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'stddev',\n    value: 'ALIGN_STDDEV',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'count true',\n    value: 'ALIGN_COUNT_TRUE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'count false',\n    value: 'ALIGN_COUNT_FALSE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'fraction true',\n    value: 'ALIGN_FRACTION_TRUE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'percentile 99',\n    value: 'ALIGN_PERCENTILE_99',\n    valueTypes: [ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'percentile 95',\n    value: 'ALIGN_PERCENTILE_95',\n    valueTypes: [ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'percentile 50',\n    value: 'ALIGN_PERCENTILE_50',\n    valueTypes: [ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'percentile 05',\n    value: 'ALIGN_PERCENTILE_05',\n    valueTypes: [ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'percent change',\n    value: 'ALIGN_PERCENT_CHANGE',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n];\n\nexport const AGGREGATIONS = [\n  {\n    text: 'none',\n    value: 'REDUCE_NONE',\n    valueTypes: [\n      ValueTypes.INT64,\n      ValueTypes.DOUBLE,\n      ValueTypes.MONEY,\n      ValueTypes.DISTRIBUTION,\n      ValueTypes.BOOL,\n      ValueTypes.STRING,\n    ],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],\n  },\n  {\n    text: 'mean',\n    value: 'REDUCE_MEAN',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n  {\n    text: 'min',\n    value: 'REDUCE_MIN',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],\n  },\n  {\n    text: 'max',\n    value: 'REDUCE_MAX',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],\n  },\n  {\n    text: 'sum',\n    value: 'REDUCE_SUM',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],\n  },\n  {\n    text: 'std. dev.',\n    value: 'REDUCE_STDDEV',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],\n  },\n  {\n    text: 'count',\n    value: 'REDUCE_COUNT',\n    valueTypes: [\n      ValueTypes.INT64,\n      ValueTypes.DOUBLE,\n      ValueTypes.MONEY,\n      ValueTypes.DISTRIBUTION,\n      ValueTypes.BOOL,\n      ValueTypes.STRING,\n    ],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n  {\n    text: 'count true',\n    value: 'REDUCE_COUNT_TRUE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'count false',\n    value: 'REDUCE_COUNT_FALSE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: '99th percentile',\n    value: 'REDUCE_PERCENTILE_99',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n  {\n    text: '95th percentile',\n    value: 'REDUCE_PERCENTILE_95',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n  {\n    text: '50th percentile',\n    value: 'REDUCE_PERCENTILE_50',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n  {\n    text: '5th percentile',\n    value: 'REDUCE_PERCENTILE_05',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n];\n\nexport type periodOption = {\n  text: string;\n  value: string;\n  hidden?: boolean;\n};\n\nexport const ALIGNMENT_PERIODS: periodOption[] = [\n  { text: 'grafana auto', value: 'grafana-auto' },\n  { text: 'stackdriver auto', value: 'stackdriver-auto', hidden: true },\n  { text: 'cloud monitoring auto', value: 'cloud-monitoring-auto' },\n  { text: '1m', value: '+60s' },\n  { text: '2m', value: '+120s' },\n  { text: '5m', value: '+300s' },\n  { text: '10m', value: '+600s' },\n  { text: '30m', value: '+1800s' },\n  { text: '1h', value: '+3600s' },\n  { text: '3h', value: '+7200s' },\n  { text: '6h', value: '+21600s' },\n  { text: '1d', value: '+86400s' },\n  { text: '3d', value: '+259200s' },\n  { text: '1w', value: '+604800s' },\n];\n\nexport const GRAPH_PERIODS: periodOption[] = [\n  { text: 'auto', value: 'auto' },\n  { text: '1m', value: '1m' },\n  { text: '2m', value: '2m' },\n  { text: '5m', value: '5m' },\n  { text: '10m', value: '10m' },\n  { text: '30m', value: '30m' },\n  { text: '1h', value: '1h' },\n  { text: '3h', value: '3h' },\n  { text: '6h', value: '6h' },\n  { text: '1d', value: '1d' },\n  { text: '3d', value: '3d' },\n  { text: '1w', value: '1w' },\n];\n\n// Usable units: ns, us, ms, s, m, h\n// ref. https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/timeseries-selectors#tss-names-args\nexport const LOOKBACK_PERIODS: periodOption[] = [\n  { text: '1m', value: '1m' },\n  { text: '2m', value: '2m' },\n  { text: '5m', value: '5m' },\n  { text: '10m', value: '10m' },\n  { text: '30m', value: '30m' },\n  { text: '1h', value: '1h' },\n  { text: '3h', value: '3h' },\n  { text: '6h', value: '6h' },\n  { text: '24h', value: '24h' },\n  { text: '72h', value: '72h' },\n];\n\nexport const SYSTEM_LABELS = [\n  'metadata.system_labels.cloud_account',\n  'metadata.system_labels.name',\n  'metadata.system_labels.region',\n  'metadata.system_labels.state',\n  'metadata.system_labels.instance_group',\n  'metadata.system_labels.node_name',\n  'metadata.system_labels.service_name',\n  'metadata.system_labels.top_level_controller_type',\n  'metadata.system_labels.top_level_controller_name',\n  'metadata.system_labels.container_image',\n];\n\nexport const SLO_BURN_RATE_SELECTOR_NAME = 'select_slo_burn_rate';\n\nexport const SELECTORS = [\n  { label: 'SLI Value', value: 'select_slo_health' },\n  { label: 'SLO Compliance', value: 'select_slo_compliance' },\n  { label: 'SLO Error Budget Remaining', value: 'select_slo_budget_fraction' },\n  { label: 'SLO Burn Rate', value: SLO_BURN_RATE_SELECTOR_NAME },\n];\n\nexport const QUERY_TYPES = [\n  { label: 'Builder', value: QueryType.TIME_SERIES_LIST },\n  { label: 'MQL', value: QueryType.TIME_SERIES_QUERY },\n  { label: 'Service Level Objectives (SLO)', value: QueryType.SLO },\n  { label: 'PromQL', value: QueryType.PROMQL },\n];\n","import React from 'react';\n\nimport { EditorHeader, FlexItem, InlineSelect } from '@grafana/experimental';\n\nimport { QUERY_TYPES } from '../constants';\nimport { CloudMonitoringQuery } from '../types/query';\n\nexport interface QueryEditorHeaderProps {\n  query: CloudMonitoringQuery;\n  onChange: (value: CloudMonitoringQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport const QueryHeader = (props: QueryEditorHeaderProps) => {\n  const { query, onChange, onRunQuery } = props;\n  const { queryType } = query;\n\n  return (\n    <EditorHeader>\n      <InlineSelect\n        label=\"Query type\"\n        options={QUERY_TYPES}\n        value={queryType}\n        onChange={({ value }) => {\n          onChange({ ...query, queryType: value! });\n          onRunQuery();\n        }}\n      />\n      <FlexItem grow={1} />\n    </EditorHeader>\n  );\n};\n","import { chunk, initial, startCase, uniqBy } from 'lodash';\n\nimport { rangeUtil } from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport { AGGREGATIONS, ALIGNMENTS, SYSTEM_LABELS } from './constants';\nimport CloudMonitoringDatasource from './datasource';\nimport { AlignmentTypes, PreprocessorType, TimeSeriesList, MetricKind, ValueTypes } from './types/query';\nimport { CustomMetaData, MetricDescriptor } from './types/types';\n\nexport const extractServicesFromMetricDescriptors = (metricDescriptors: MetricDescriptor[]) =>\n  uniqBy(metricDescriptors, 'service');\n\nexport const getMetricTypesByService = (metricDescriptors: MetricDescriptor[], service: string) =>\n  metricDescriptors.filter((m: MetricDescriptor) => m.service === service);\n\nexport const getMetricTypes = (\n  metricDescriptors: MetricDescriptor[],\n  metricType: string,\n  interpolatedMetricType: string,\n  selectedService: string\n) => {\n  const metricTypes = getMetricTypesByService(metricDescriptors, selectedService).map((m) => ({\n    value: m.type,\n    name: m.displayName,\n  }));\n  const metricTypeExistInArray = metricTypes.some(\n    (m: { value: string; name: string }) => m.value === interpolatedMetricType\n  );\n  const metricTypeByService = metricTypes.length ? metricTypes[0].value : '';\n  const selectedMetricType = metricTypeExistInArray ? metricType : metricTypeByService;\n  return {\n    metricTypes,\n    selectedMetricType,\n  };\n};\n\nexport const getAlignmentOptionsByMetric = (\n  metricValueType?: string,\n  metricKind?: string,\n  preprocessor?: PreprocessorType\n) => {\n  if (preprocessor && preprocessor === PreprocessorType.Rate) {\n    metricKind = MetricKind.GAUGE;\n  }\n\n  return !metricValueType\n    ? []\n    : ALIGNMENTS.filter((i) => {\n        return (\n          i.valueTypes.indexOf(metricValueType as ValueTypes) !== -1 &&\n          i.metricKinds.indexOf(metricKind as MetricKind) !== -1\n        );\n      });\n};\n\nexport const getAggregationOptionsByMetric = (valueType: ValueTypes, metricKind: MetricKind) => {\n  return !metricKind\n    ? []\n    : AGGREGATIONS.filter((i) => {\n        return i.valueTypes.indexOf(valueType) !== -1 && i.metricKinds.indexOf(metricKind) !== -1;\n      });\n};\n\nexport const getLabelKeys = async (\n  datasource: CloudMonitoringDatasource,\n  selectedMetricType: string,\n  projectName: string\n) => {\n  const refId = 'handleLabelKeysQuery';\n  const labels = await datasource.getLabels(selectedMetricType, refId, projectName);\n  return [...Object.keys(labels), ...SYSTEM_LABELS];\n};\n\nexport const getAlignmentPickerData = (\n  valueType: string | undefined = ValueTypes.DOUBLE,\n  metricKind: string | undefined = MetricKind.GAUGE,\n  perSeriesAligner: string | undefined = AlignmentTypes.ALIGN_MEAN,\n  preprocessor?: PreprocessorType\n) => {\n  const templateSrv: TemplateSrv = getTemplateSrv();\n  const alignOptions = getAlignmentOptionsByMetric(valueType, metricKind, preprocessor).map((option) => ({\n    ...option,\n    label: option.text,\n  }));\n  if (!alignOptions.some((o: { value: string }) => o.value === templateSrv.replace(perSeriesAligner))) {\n    perSeriesAligner = alignOptions.length > 0 ? alignOptions[0].value : AlignmentTypes.ALIGN_MEAN;\n  }\n  return { alignOptions, perSeriesAligner };\n};\n\nexport const labelsToGroupedOptions = (groupBys: string[]) => {\n  const groups = groupBys.reduce((acc: any, curr: string) => {\n    const arr = curr.split('.').map(startCase);\n    const group = (arr.length === 2 ? arr : initial(arr)).join(' ');\n    const option = {\n      value: curr,\n      label: curr,\n    };\n    if (acc[group]) {\n      acc[group] = [...acc[group], option];\n    } else {\n      acc[group] = [option];\n    }\n    return acc;\n  }, {});\n  return Object.entries(groups).map(([label, options]) => ({ label, options, expanded: true }), []);\n};\n\nexport const stringArrayToFilters = (filterArray: string[]) =>\n  chunk(filterArray, 4).map(([key, operator, value, condition = 'AND']) => ({\n    key,\n    operator,\n    value,\n    condition,\n  }));\n\nexport const alignmentPeriodLabel = (customMetaData: CustomMetaData, datasource: CloudMonitoringDatasource) => {\n  const { perSeriesAligner, alignmentPeriod } = customMetaData;\n  if (!alignmentPeriod || !perSeriesAligner) {\n    return '';\n  }\n\n  const alignment = ALIGNMENTS.find((ap) => ap.value === datasource.templateSrv.replace(perSeriesAligner));\n  const seconds = parseInt(alignmentPeriod, 10);\n  const hms = rangeUtil.secondsToHms(seconds);\n  return `${hms} interval (${alignment?.text ?? ''})`;\n};\n\nexport const getMetricType = (query?: TimeSeriesList) => {\n  const metricTypeKey = query?.filters?.findIndex((f) => f === 'metric.type')!;\n  // filters are in the format [key, operator, value] so we need to add 2 to get the value\n  const metricType = query?.filters?.[metricTypeKey + 2];\n  return metricType || '';\n};\n\nexport const setMetricType = (query: TimeSeriesList, metricType: string) => {\n  if (!query.filters) {\n    query.filters = ['metric.type', '=', metricType];\n    return query;\n  }\n  const metricTypeKey = query?.filters?.findIndex((f) => f === 'metric.type')!;\n  if (metricTypeKey === -1) {\n    query.filters.push('metric.type', '=', metricType);\n  } else {\n    // filters are in the format [key, operator, value] so we need to add 2 to get the value\n    query.filters![metricTypeKey + 2] = metricType;\n  }\n  return query;\n};\n","import { debounce } from 'lodash';\nimport React, { useState } from 'react';\n\nimport { EditorField } from '@grafana/experimental';\nimport { Input } from '@grafana/ui';\n\nexport interface Props {\n  refId: string;\n  onChange: (alias: any) => void;\n  value?: string;\n}\n\nexport const AliasBy = ({ refId, value = '', onChange }: Props) => {\n  const [alias, setAlias] = useState(value ?? '');\n\n  const propagateOnChange = debounce(onChange, 1000);\n\n  onChange = (e: any) => {\n    setAlias(e.target.value);\n    propagateOnChange(e.target.value);\n  };\n\n  return (\n    <EditorField label=\"Alias by\">\n      <Input id={`${refId}-alias-by`} value={alias} onChange={onChange} />\n    </EditorField>\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { LOOKBACK_PERIODS } from '../constants';\n\nexport interface Props {\n  refId: string;\n  onChange: (lookbackPeriod: string) => void;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  current?: string;\n}\n\nexport const LookbackPeriodSelect = ({ refId, current, templateVariableOptions, onChange }: Props) => {\n  const options = LOOKBACK_PERIODS.map((lp) => ({\n    ...lp,\n    label: lp.text,\n  }));\n  if (current && !options.find((op) => op.value === current)) {\n    options.push({ label: current, text: current, value: current, hidden: false });\n  }\n  const visibleOptions = options.filter((lp) => !lp.hidden);\n\n  return (\n    <EditorField label=\"Lookback period\" htmlFor={`${refId}-lookback-period`}>\n      <Select\n        inputId={`${refId}-lookback-period`}\n        width=\"auto\"\n        allowCustomValue\n        value={[...options, ...templateVariableOptions].find((s) => s.value === current)}\n        options={[\n          {\n            label: 'Template Variables',\n            options: templateVariableOptions,\n          },\n          {\n            label: 'Predefined periods',\n            expanded: true,\n            options: visibleOptions,\n          },\n        ]}\n        onChange={({ value }) => onChange(value!)}\n      />\n    </EditorField>\n  );\n};\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { periodOption } from '../constants';\n\nexport interface Props {\n  inputId: string;\n  onChange: (period: string) => void;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  aligmentPeriods: periodOption[];\n  selectWidth?: number;\n  category?: string;\n  disabled?: boolean;\n  current?: string;\n}\n\nexport function PeriodSelect({\n  inputId,\n  templateVariableOptions,\n  onChange,\n  current,\n  disabled,\n  aligmentPeriods,\n}: Props) {\n  const options = useMemo(\n    () =>\n      aligmentPeriods.map((ap) => ({\n        ...ap,\n        label: ap.text,\n      })),\n    [aligmentPeriods]\n  );\n  const visibleOptions = useMemo(() => options.filter((ap) => !ap.hidden), [options]);\n\n  return (\n    <Select\n      width=\"auto\"\n      onChange={({ value }) => onChange(value!)}\n      value={[...options, ...templateVariableOptions].find((s) => s.value === current)}\n      options={[\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        {\n          label: 'Aggregations',\n          expanded: true,\n          options: visibleOptions,\n        },\n      ]}\n      placeholder=\"Select Period\"\n      inputId={inputId}\n      disabled={disabled}\n      allowCustomValue\n      menuPlacement=\"top\"\n    />\n  );\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { SLOQuery } from '../types/query';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: SLOQuery) => void;\n  query: SLOQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const SLO = ({ refId, query, templateVariableOptions, onChange, datasource }: Props) => {\n  const [slos, setSLOs] = useState<Array<SelectableValue<string>>>([]);\n  const { projectName, serviceId } = query;\n\n  useEffect(() => {\n    if (!projectName || !serviceId) {\n      return;\n    }\n\n    datasource.getServiceLevelObjectives(projectName, serviceId).then((sloIds: Array<SelectableValue<string>>) => {\n      setSLOs([\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        ...sloIds,\n      ]);\n    });\n  }, [datasource, projectName, serviceId, templateVariableOptions]);\n\n  return (\n    <EditorField label=\"SLO\">\n      <Select\n        inputId={`${refId}-slo`}\n        width=\"auto\"\n        allowCustomValue\n        value={query?.sloId && { value: query?.sloId, label: query?.sloName || query?.sloId }}\n        placeholder=\"Select SLO\"\n        options={slos}\n        onChange={async ({ value: sloId = '', label: sloName = '' }) => {\n          const slos = await datasource.getServiceLevelObjectives(projectName, serviceId);\n          const slo = slos.find(({ value }) => value === datasource.templateSrv.replace(sloId));\n          onChange({ ...query, sloId, sloName, goal: slo?.goal });\n        }}\n      />\n    </EditorField>\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { SELECTORS } from '../constants';\nimport CloudMonitoringDatasource from '../datasource';\nimport { SLOQuery } from '../types/query';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: SLOQuery) => void;\n  query: SLOQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const Selector = ({ refId, query, templateVariableOptions, onChange, datasource }: Props) => {\n  return (\n    <EditorField label=\"Selector\" htmlFor={`${refId}-slo-selector`}>\n      <Select\n        inputId={`${refId}-slo-selector`}\n        width=\"auto\"\n        allowCustomValue\n        value={[...SELECTORS, ...templateVariableOptions].find((s) => s.value === query?.selectorName ?? '')}\n        options={[\n          {\n            label: 'Template Variables',\n            options: templateVariableOptions,\n          },\n          ...SELECTORS,\n        ]}\n        onChange={({ value: selectorName }) => onChange({ ...query, selectorName: selectorName ?? '' })}\n      />\n    </EditorField>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { SLOQuery } from '../types/query';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: SLOQuery) => void;\n  query: SLOQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const Service = ({ refId, query, templateVariableOptions, onChange, datasource }: Props) => {\n  const [services, setServices] = useState<Array<SelectableValue<string>>>([]);\n  const { projectName } = query;\n\n  useEffect(() => {\n    if (!projectName) {\n      return;\n    }\n\n    datasource.getSLOServices(projectName).then((services: Array<SelectableValue<string>>) => {\n      setServices([\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        ...services,\n      ]);\n    });\n  }, [datasource, projectName, templateVariableOptions]);\n\n  return (\n    <EditorField label=\"Service\">\n      <Select\n        inputId={`${refId}-slo-service`}\n        width=\"auto\"\n        allowCustomValue\n        value={query?.serviceId && { value: query?.serviceId, label: query?.serviceName || query?.serviceId }}\n        placeholder=\"Select service\"\n        options={services}\n        onChange={({ value: serviceId = '', label: serviceName = '' }) =>\n          onChange({ ...query, serviceId, serviceName, sloId: '' })\n        }\n      />\n    </EditorField>\n  );\n};\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorRow } from '@grafana/experimental';\n\nimport { ALIGNMENT_PERIODS, SLO_BURN_RATE_SELECTOR_NAME } from '../constants';\nimport CloudMonitoringDatasource from '../datasource';\nimport { alignmentPeriodLabel } from '../functions';\nimport { AlignmentTypes, SLOQuery } from '../types/query';\nimport { CustomMetaData } from '../types/types';\n\nimport { AliasBy } from './AliasBy';\nimport { LookbackPeriodSelect } from './LookbackPeriodSelect';\nimport { PeriodSelect } from './PeriodSelect';\nimport { Project } from './Project';\nimport { SLO } from './SLO';\nimport { Selector } from './Selector';\nimport { Service } from './Service';\n\nexport interface Props {\n  refId: string;\n  customMetaData: CustomMetaData;\n  variableOptionGroup: SelectableValue<string>;\n  onChange: (query: SLOQuery) => void;\n  onRunQuery: () => void;\n  query: SLOQuery;\n  datasource: CloudMonitoringDatasource;\n  aliasBy?: string;\n  onChangeAliasBy: (aliasBy: string) => void;\n}\n\nexport const defaultQuery: (dataSource: CloudMonitoringDatasource) => SLOQuery = (dataSource) => ({\n  projectName: dataSource.getDefaultProject(),\n  alignmentPeriod: 'cloud-monitoring-auto',\n  perSeriesAligner: AlignmentTypes.ALIGN_MEAN,\n  aliasBy: '',\n  selectorName: 'select_slo_health',\n  serviceId: '',\n  serviceName: '',\n  sloId: '',\n  sloName: '',\n  lookbackPeriod: '',\n});\n\nexport function SLOQueryEditor({\n  refId,\n  query,\n  datasource,\n  onChange,\n  variableOptionGroup,\n  customMetaData,\n  aliasBy,\n  onChangeAliasBy,\n}: React.PropsWithChildren<Props>) {\n  const alignmentLabel = useMemo(() => alignmentPeriodLabel(customMetaData, datasource), [customMetaData, datasource]);\n  return (\n    <>\n      <EditorRow>\n        <Project\n          refId={refId}\n          templateVariableOptions={variableOptionGroup.options}\n          projectName={query.projectName}\n          datasource={datasource}\n          onChange={(projectName) => onChange({ ...query, projectName })}\n        />\n        <Service\n          refId={refId}\n          datasource={datasource}\n          templateVariableOptions={variableOptionGroup.options}\n          query={query}\n          onChange={onChange}\n        />\n        <SLO\n          refId={refId}\n          datasource={datasource}\n          templateVariableOptions={variableOptionGroup.options}\n          query={query}\n          onChange={onChange}\n        />\n        <Selector\n          refId={refId}\n          datasource={datasource}\n          templateVariableOptions={variableOptionGroup.options}\n          query={query}\n          onChange={onChange}\n        />\n        {query.selectorName === SLO_BURN_RATE_SELECTOR_NAME && (\n          <LookbackPeriodSelect\n            refId={refId}\n            onChange={(lookbackPeriod) => onChange({ ...query, lookbackPeriod: lookbackPeriod })}\n            current={query.lookbackPeriod}\n            templateVariableOptions={variableOptionGroup.options}\n          />\n        )}\n\n        <EditorFieldGroup>\n          <EditorField label=\"Alignment period\" tooltip={alignmentLabel}>\n            <PeriodSelect\n              inputId={`${refId}-alignment-period`}\n              templateVariableOptions={variableOptionGroup.options}\n              current={query.alignmentPeriod}\n              onChange={(period) => onChange({ ...query, alignmentPeriod: period })}\n              aligmentPeriods={ALIGNMENT_PERIODS}\n            />\n          </EditorField>\n        </EditorFieldGroup>\n\n        <AliasBy refId={refId} value={aliasBy} onChange={onChangeAliasBy} />\n      </EditorRow>\n    </>\n  );\n}\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { getAggregationOptionsByMetric } from '../functions';\nimport { ValueTypes } from '../types/query';\nimport { MetricDescriptor } from '../types/types';\n\nexport interface Props {\n  refId: string;\n  onChange: (metricDescriptor: string) => void;\n  metricDescriptor?: MetricDescriptor;\n  crossSeriesReducer: string;\n  groupBys: string[];\n  templateVariableOptions: Array<SelectableValue<string>>;\n}\n\nexport const Aggregation = (props: Props) => {\n  const aggOptions = useAggregationOptionsByMetric(props);\n  const selected = useSelectedFromOptions(aggOptions, props);\n\n  return (\n    <EditorField label=\"Group by function\" data-testid=\"cloud-monitoring-aggregation\">\n      <Select\n        width=\"auto\"\n        onChange={({ value }) => props.onChange(value!)}\n        value={selected}\n        options={[\n          {\n            label: 'Template Variables',\n            options: props.templateVariableOptions,\n          },\n          {\n            label: 'Aggregations',\n            expanded: true,\n            options: aggOptions,\n          },\n        ]}\n        placeholder=\"Select Reducer\"\n        inputId={`${props.refId}-group-by-function`}\n        menuPlacement=\"top\"\n      />\n    </EditorField>\n  );\n};\n\nconst useAggregationOptionsByMetric = ({ metricDescriptor }: Props): Array<SelectableValue<string>> => {\n  const valueType = metricDescriptor?.valueType;\n  const metricKind = metricDescriptor?.metricKind;\n\n  return useMemo(() => {\n    if (!valueType || !metricKind) {\n      return [];\n    }\n\n    return getAggregationOptionsByMetric(valueType as ValueTypes, metricKind).map((a) => ({\n      ...a,\n      label: a.text,\n    }));\n  }, [valueType, metricKind]);\n};\n\nconst useSelectedFromOptions = (aggOptions: Array<SelectableValue<string>>, props: Props) => {\n  return useMemo(() => {\n    const allOptions = [...aggOptions, ...props.templateVariableOptions];\n    return allOptions.find((s) => s.value === props.crossSeriesReducer);\n  }, [aggOptions, props.crossSeriesReducer, props.templateVariableOptions]);\n};\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorFieldGroup } from '@grafana/experimental';\nimport { MultiSelect } from '@grafana/ui';\n\nimport { SYSTEM_LABELS } from '../constants';\nimport { labelsToGroupedOptions } from '../functions';\nimport { TimeSeriesList } from '../types/query';\nimport { MetricDescriptor } from '../types/types';\n\nimport { Aggregation } from './Aggregation';\n\nexport interface Props {\n  refId: string;\n  variableOptionGroup: SelectableValue<string>;\n  labels: string[];\n  metricDescriptor?: MetricDescriptor;\n  onChange: (query: TimeSeriesList) => void;\n  query: TimeSeriesList;\n}\n\nexport const GroupBy = ({\n  refId,\n  labels: groupBys = [],\n  query,\n  onChange,\n  variableOptionGroup,\n  metricDescriptor,\n}: Props) => {\n  const options = useMemo(\n    () => [variableOptionGroup, ...labelsToGroupedOptions([...groupBys, ...SYSTEM_LABELS])],\n    [groupBys, variableOptionGroup]\n  );\n\n  return (\n    <EditorFieldGroup>\n      <EditorField\n        label=\"Group by\"\n        tooltip=\"You can reduce the amount of data returned for a metric by combining different time series. To combine multiple time series, you can specify a grouping and a function. Grouping is done on the basis of labels. The grouping function is used to combine the time series in the group into a single time series.\"\n      >\n        <MultiSelect\n          inputId={`${refId}-group-by`}\n          width=\"auto\"\n          placeholder=\"Choose label\"\n          options={options}\n          value={query.groupBys ?? []}\n          onChange={(options) => {\n            onChange({ ...query, groupBys: options.map((o) => o.value!) });\n          }}\n          menuPlacement=\"top\"\n        />\n      </EditorField>\n      <Aggregation\n        metricDescriptor={metricDescriptor}\n        templateVariableOptions={variableOptionGroup.options}\n        crossSeriesReducer={query.crossSeriesReducer}\n        groupBys={query.groupBys ?? []}\n        onChange={(crossSeriesReducer) => onChange({ ...query, crossSeriesReducer })}\n        refId={refId}\n      />\n    </EditorFieldGroup>\n  );\n};\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { getAlignmentPickerData } from '../functions';\nimport { PreprocessorType, SLOQuery, TimeSeriesList } from '../types/query';\nimport { MetricDescriptor } from '../types/types';\n\nexport interface Props {\n  inputId: string;\n  onChange: (query: TimeSeriesList | SLOQuery) => void;\n  query: TimeSeriesList | SLOQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  metricDescriptor?: MetricDescriptor;\n  preprocessor?: PreprocessorType;\n}\n\nexport const AlignmentFunction = ({\n  inputId,\n  query,\n  templateVariableOptions,\n  onChange,\n  metricDescriptor,\n  preprocessor,\n}: Props) => {\n  const { perSeriesAligner: psa } = query;\n  let { valueType, metricKind } = metricDescriptor || {};\n\n  const { perSeriesAligner, alignOptions } = useMemo(\n    () => getAlignmentPickerData(valueType, metricKind, psa, preprocessor),\n    [valueType, metricKind, psa, preprocessor]\n  );\n\n  return (\n    <Select\n      onChange={({ value }) => onChange({ ...query, perSeriesAligner: value! })}\n      value={[...alignOptions, ...templateVariableOptions].find((s) => s.value === perSeriesAligner)}\n      options={[\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        {\n          label: 'Alignment options',\n          expanded: true,\n          options: alignOptions,\n        },\n      ]}\n      placeholder=\"Select Alignment\"\n      inputId={inputId}\n      menuPlacement=\"top\"\n    />\n  );\n};\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorFieldGroup } from '@grafana/experimental';\n\nimport { ALIGNMENT_PERIODS } from '../constants';\nimport CloudMonitoringDatasource from '../datasource';\nimport { alignmentPeriodLabel } from '../functions';\nimport { PreprocessorType, TimeSeriesList } from '../types/query';\nimport { CustomMetaData, MetricDescriptor } from '../types/types';\n\nimport { AlignmentFunction } from './AlignmentFunction';\nimport { PeriodSelect } from './PeriodSelect';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: TimeSeriesList) => void;\n  query: TimeSeriesList;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  customMetaData: CustomMetaData;\n  datasource: CloudMonitoringDatasource;\n  metricDescriptor?: MetricDescriptor;\n  preprocessor?: PreprocessorType;\n}\n\nexport const Alignment = ({\n  refId,\n  templateVariableOptions,\n  onChange,\n  query,\n  customMetaData,\n  datasource,\n  metricDescriptor,\n  preprocessor,\n}: Props) => {\n  const alignmentLabel = useMemo(() => alignmentPeriodLabel(customMetaData, datasource), [customMetaData, datasource]);\n  return (\n    <EditorFieldGroup>\n      <EditorField\n        label=\"Alignment function\"\n        tooltip=\"The process of alignment consists of collecting all data points received in a fixed length of time, applying a function to combine those data points, and assigning a timestamp to the result.\"\n      >\n        <AlignmentFunction\n          inputId={`${refId}-alignment-function`}\n          templateVariableOptions={templateVariableOptions}\n          query={query}\n          onChange={(q) => onChange({ ...query, ...q })}\n          metricDescriptor={metricDescriptor}\n          preprocessor={preprocessor}\n        />\n      </EditorField>\n      <EditorField label=\"Alignment period\" tooltip={alignmentLabel}>\n        <PeriodSelect\n          inputId={`${refId}-alignment-period`}\n          templateVariableOptions={templateVariableOptions}\n          current={query.alignmentPeriod}\n          onChange={(period) => onChange({ ...query, alignmentPeriod: period })}\n          aligmentPeriods={ALIGNMENT_PERIODS}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n};\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, EditorField, EditorList, EditorRow } from '@grafana/experimental';\nimport { HorizontalGroup, Select } from '@grafana/ui';\n\nimport { labelsToGroupedOptions, stringArrayToFilters } from '../functions';\n\nexport interface Props {\n  labels: { [key: string]: string[] };\n  filters: string[];\n  onChange: (filters: string[]) => void;\n  variableOptionGroup: SelectableValue<string>;\n}\n\ninterface Filter {\n  key: string;\n  operator: string;\n  value: string;\n  condition: string;\n}\n\nconst DEFAULT_OPERATOR = '=';\nconst DEFAULT_CONDITION = 'AND';\n\nconst filtersToStringArray = (filters: Filter[]) =>\n  filters.flatMap(({ key, operator, value, condition }) => [key, operator, value, condition]).slice(0, -1);\n\nconst operators = ['=', '!=', '=~', '!=~'].map(toOption);\n\n// These keys are not editable as labels but they have its own selector.\n// For example the 'metric.type' is set with the metric name selector.\nconst protectedFilterKeys = ['metric.type'];\n\nexport const LabelFilter = ({ labels = {}, filters: filterArray, onChange: _onChange, variableOptionGroup }: Props) => {\n  const rawFilters: Filter[] = stringArrayToFilters(filterArray);\n  const filters = rawFilters.filter(({ key }) => !protectedFilterKeys.includes(key));\n  const protectedFilters = rawFilters.filter(({ key }) => protectedFilterKeys.includes(key));\n\n  const options = useMemo(\n    () => [variableOptionGroup, ...labelsToGroupedOptions(Object.keys(labels))],\n    [labels, variableOptionGroup]\n  );\n\n  const getOptions = ({ key = '', value = '' }: Partial<Filter>) => {\n    // Add the current key and value as options if they are manually entered\n    const keyPresent = options.some((op) => {\n      if (op.options) {\n        return options.some((opp) => opp.label === key);\n      }\n      return op.label === key;\n    });\n    if (!keyPresent) {\n      options.push({ label: key, value: key });\n    }\n\n    const valueOptions = labels.hasOwnProperty(key)\n      ? [variableOptionGroup, ...labels[key].map(toOption)]\n      : [variableOptionGroup];\n    const valuePresent = valueOptions.some((op) => op.label === value);\n    if (!valuePresent) {\n      valueOptions.push({ label: value, value });\n    }\n\n    return { options, valueOptions };\n  };\n\n  const onChange = (items: Array<Partial<Filter>>) => {\n    const filters = items.concat(protectedFilters).map(({ key, operator, value, condition }) => ({\n      key: key || '',\n      operator: operator || DEFAULT_OPERATOR,\n      value: value || '',\n      condition: condition || DEFAULT_CONDITION,\n    }));\n    _onChange(filtersToStringArray(filters));\n  };\n\n  const renderItem = (item: Partial<Filter>, onChangeItem: (item: Filter) => void, onDeleteItem: () => void) => {\n    const { key = '', operator = DEFAULT_OPERATOR, value = '', condition = DEFAULT_CONDITION } = item;\n    const { options, valueOptions } = getOptions(item);\n\n    return (\n      <HorizontalGroup spacing=\"xs\" width=\"auto\">\n        <Select\n          aria-label=\"Filter label key\"\n          formatCreateLabel={(v) => `Use label key: ${v}`}\n          allowCustomValue\n          value={key}\n          options={options}\n          onChange={({ value: key = '' }) => onChangeItem({ key, operator, value, condition })}\n        />\n        <Select\n          value={operator}\n          options={operators}\n          onChange={({ value: operator = DEFAULT_OPERATOR }) => onChangeItem({ key, operator, value, condition })}\n        />\n        <Select\n          aria-label=\"Filter label value\"\n          placeholder=\"add filter value\"\n          formatCreateLabel={(v) => `Use label value: ${v}`}\n          allowCustomValue\n          value={value}\n          options={valueOptions}\n          onChange={({ value = '' }) => onChangeItem({ key, operator, value, condition })}\n        />\n        <AccessoryButton aria-label=\"Remove\" icon=\"times\" variant=\"secondary\" onClick={onDeleteItem} type=\"button\" />\n      </HorizontalGroup>\n    );\n  };\n\n  return (\n    <EditorRow>\n      <EditorField\n        label=\"Filter\"\n        tooltip=\"To reduce the amount of data charted, apply a filter. A filter has three components: a label, a comparison, and a value. The comparison can be an equality, inequality, or regular expression.\"\n      >\n        <EditorList items={filters} renderItem={renderItem} onChange={onChange} />\n      </EditorField>\n    </EditorRow>\n  );\n};\n","import React from 'react';\n\nexport const AnnotationsHelp = () => {\n  return (\n    <div className=\"gf-form grafana-info-box alert-info\">\n      <div>\n        <h5>Annotation Query Format</h5>\n        <p>\n          An annotation is an event that is overlaid on top of graphs. Annotation rendering is expensive so it is\n          important to limit the number of rows returned.{' '}\n        </p>\n        <p>\n          The Title and Text fields support templating and can use data returned from the query. For example, the Title\n          field could have the following text:\n        </p>\n        <code>\n          {`${'{{metric.type}}'}`} has value: {`${'{{metric.value}}'}`}\n        </code>\n        <p>\n          Example Result: <code>monitoring.googleapis.com/uptime_check/http_status has this value: 502</code>\n        </p>\n        <span>Patterns:</span>\n        <p>\n          <code>{`${'{{metric.value}}'}`}</code> = value of the metric/point\n        </p>\n        <p>\n          <code>{`${'{{metric.type}}'}`}</code> = metric type e.g. compute.googleapis.com/instance/cpu/usage_time\n        </p>\n        <p>\n          <code>{`${'{{metric.name}}'}`}</code> = name part of metric e.g. instance/cpu/usage_time\n        </p>\n        <p>\n          <code>{`${'{{metric.service}}'}`}</code> = service part of metric e.g. compute\n        </p>\n        <p>\n          <code>{`${'{{metric.label.label_name}}'}`}</code> = Metric label metadata e.g. metric.label.instance_name\n        </p>\n        <p>\n          <code>{`${'{{resource.label.label_name}}'}`}</code> = Resource label metadata e.g. resource.label.zone\n        </p>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorRow } from '@grafana/experimental';\nimport { HorizontalGroup, Switch } from '@grafana/ui';\n\nimport { GRAPH_PERIODS } from '../constants';\n\nimport { PeriodSelect } from './index';\n\nexport interface Props {\n  refId: string;\n  onChange: (period: string) => void;\n  variableOptionGroup: SelectableValue<string>;\n  graphPeriod?: string;\n}\n\nexport const GraphPeriod = ({ refId, onChange, graphPeriod, variableOptionGroup }: Props) => {\n  return (\n    <EditorRow>\n      <EditorField\n        label=\"Graph period\"\n        htmlFor={`${refId}-graph-period`}\n        tooltip={\n          <>\n            Set <code>graph_period</code> which forces a preferred period between points. Automatically set to the\n            current interval if left blank.\n          </>\n        }\n      >\n        <HorizontalGroup>\n          <Switch\n            data-testid={`${refId}-switch-graph-period`}\n            value={graphPeriod !== 'disabled'}\n            onChange={(e) => onChange(e.currentTarget.checked ? '' : 'disabled')}\n          />\n          <PeriodSelect\n            inputId={`${refId}-graph-period`}\n            templateVariableOptions={variableOptionGroup.options}\n            current={graphPeriod}\n            onChange={onChange}\n            disabled={graphPeriod === 'disabled'}\n            aligmentPeriods={GRAPH_PERIODS}\n          />\n        </HorizontalGroup>\n      </EditorField>\n    </EditorRow>\n  );\n};\n","import React from 'react';\n\nimport { TextArea } from '@grafana/ui';\n\nexport interface Props {\n  onChange: (query: string) => void;\n  onRunQuery: () => void;\n  query: string;\n}\n\nexport function MQLQueryEditor({ query, onChange, onRunQuery }: React.PropsWithChildren<Props>) {\n  const onKeyDown = (event: any) => {\n    if (event.key === 'Enter' && (event.shiftKey || event.ctrlKey)) {\n      event.preventDefault();\n      onRunQuery();\n    }\n  };\n\n  return (\n    <>\n      <TextArea\n        name=\"Query\"\n        className=\"slate-query-field\"\n        value={query}\n        rows={10}\n        placeholder=\"Enter a Cloud Monitoring MQL query (Run with Shift+Enter)\"\n        onBlur={onRunQuery}\n        onChange={(e) => onChange(e.currentTarget.value)}\n        onKeyDown={onKeyDown}\n      />\n    </>\n  );\n}\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { RadioButtonGroup } from '@grafana/ui';\n\nimport { getAlignmentPickerData } from '../functions';\nimport { PreprocessorType, TimeSeriesList, MetricKind, ValueTypes } from '../types/query';\nimport { MetricDescriptor } from '../types/types';\n\nconst NONE_OPTION = { label: 'None', value: PreprocessorType.None };\n\nexport interface Props {\n  metricDescriptor?: MetricDescriptor;\n  onChange: (query: TimeSeriesList) => void;\n  query: TimeSeriesList;\n}\n\nexport const Preprocessor = ({ query, metricDescriptor, onChange }: Props) => {\n  const options = useOptions(metricDescriptor);\n\n  return (\n    <EditorField\n      label=\"Pre-processing\"\n      tooltip=\"Preprocessing options are displayed when the selected metric has a metric kind of delta or cumulative. The specific options available are determined by the metric's value type. If you select 'Rate', data points are aligned and converted to a rate per time series. If you select 'Delta', data points are aligned by their delta (difference) per time series\"\n    >\n      <RadioButtonGroup\n        onChange={(value: PreprocessorType) => {\n          const { perSeriesAligner: psa } = query;\n          const { valueType, metricKind } = metricDescriptor ?? {};\n          const { perSeriesAligner } = getAlignmentPickerData(valueType, metricKind, psa, value);\n          onChange({ ...query, preprocessor: value, perSeriesAligner });\n        }}\n        value={query.preprocessor ?? PreprocessorType.None}\n        options={options}\n      />\n    </EditorField>\n  );\n};\n\nconst useOptions = (metricDescriptor?: MetricDescriptor): Array<SelectableValue<PreprocessorType>> => {\n  const metricKind = metricDescriptor?.metricKind;\n  const valueType = metricDescriptor?.valueType;\n\n  return useMemo(() => {\n    if (!metricKind || metricKind === MetricKind.GAUGE || valueType === ValueTypes.DISTRIBUTION) {\n      return [NONE_OPTION];\n    }\n\n    const options = [\n      NONE_OPTION,\n      {\n        label: 'Rate',\n        value: PreprocessorType.Rate,\n        description: 'Data points are aligned and converted to a rate per time series',\n      },\n    ];\n\n    return metricKind === MetricKind.CUMULATIVE\n      ? [\n          ...options,\n          {\n            label: 'Delta',\n            value: PreprocessorType.Delta,\n            description: 'Data points are aligned by their delta (difference) per time series',\n          },\n        ]\n      : options;\n  }, [metricKind, valueType]);\n};\n","import { css } from '@emotion/css';\nimport debounce from 'debounce-promise';\nimport { startCase, uniqBy } from 'lodash';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue, TimeRange } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorRow } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport { getSelectStyles, Select, AsyncSelect, useStyles2, useTheme2 } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { getAlignmentPickerData, getMetricType, setMetricType } from '../functions';\nimport { PreprocessorType, TimeSeriesList, MetricKind, ValueTypes } from '../types/query';\nimport { CustomMetaData, MetricDescriptor } from '../types/types';\n\nimport { AliasBy } from './AliasBy';\nimport { Alignment } from './Alignment';\nimport { GroupBy } from './GroupBy';\nimport { LabelFilter } from './LabelFilter';\nimport { defaultTimeSeriesList } from './MetricQueryEditor';\nimport { Preprocessor } from './Preprocessor';\nimport { Project } from './Project';\n\nexport interface Props {\n  refId: string;\n  customMetaData: CustomMetaData;\n  onChange: (query: TimeSeriesList) => void;\n  datasource: CloudMonitoringDatasource;\n  query: TimeSeriesList;\n  variableOptionGroup: SelectableValue<string>;\n  aliasBy?: string;\n  onChangeAliasBy: (aliasBy: string) => void;\n}\n\nexport function Editor({\n  refId,\n  onChange,\n  datasource,\n  query,\n  variableOptionGroup,\n  customMetaData,\n  aliasBy,\n  onChangeAliasBy,\n}: React.PropsWithChildren<Props>) {\n  const [labels, setLabels] = useState<{ [k: string]: any }>({});\n  const [metricDescriptors, setMetricDescriptors] = useState<MetricDescriptor[]>([]);\n  const [metricDescriptor, setMetricDescriptor] = useState<MetricDescriptor>();\n  const [metrics, setMetrics] = useState<Array<SelectableValue<string>>>([]);\n  const [services, setServices] = useState<Array<SelectableValue<string>>>([]);\n  const [service, setService] = useState<string>('');\n  const [timeRange, setTimeRange] = useState<TimeRange>({ ...datasource.timeSrv.timeRange() });\n\n  const useTime = (time: TimeRange) => {\n    if (\n      timeRange !== null &&\n      (timeRange.raw.from.toString() !== time.raw.from.toString() ||\n        timeRange.raw.to.toString() !== time.raw.to.toString())\n    ) {\n      setTimeRange({ ...time });\n    }\n  };\n\n  useTime(datasource.timeSrv.timeRange());\n\n  const theme = useTheme2();\n  const selectStyles = getSelectStyles(theme);\n\n  const customStyle = useStyles2(getStyles);\n\n  const { projectName, groupBys, crossSeriesReducer } = query;\n  const metricType = getMetricType(query);\n  const { templateSrv } = datasource;\n\n  const getSelectedMetricDescriptor = useCallback(\n    (metricDescriptors: MetricDescriptor[], metricType: string) => {\n      return metricDescriptors.find((md) => md.type === templateSrv.replace(metricType))!;\n    },\n    [templateSrv]\n  );\n\n  useEffect(() => {\n    if (projectName && metricType) {\n      datasource\n        .getLabels(metricType, refId, projectName, { groupBys, crossSeriesReducer }, timeRange)\n        .then((labels) => setLabels(labels));\n    }\n  }, [datasource, groupBys, metricType, projectName, refId, crossSeriesReducer, timeRange]);\n\n  useEffect(() => {\n    const loadMetricDescriptors = async () => {\n      if (projectName) {\n        const metricDescriptors = await datasource.getMetricTypes(projectName);\n        reportInteraction('cloud-monitoring-metric-descriptors-loaded', {\n          count: metricDescriptors.length,\n        });\n        const services = getServicesList(metricDescriptors);\n        setMetricDescriptors(metricDescriptors);\n        setServices(services);\n      }\n    };\n    loadMetricDescriptors();\n  }, [datasource, projectName, customStyle, selectStyles.optionDescription]);\n\n  useEffect(() => {\n    const getMetricsList = (metricDescriptors: MetricDescriptor[]) => {\n      const selectedMetricDescriptor = getSelectedMetricDescriptor(metricDescriptors, metricType);\n      if (!selectedMetricDescriptor) {\n        return [];\n      }\n\n      const metricsByService = metricDescriptors\n        .filter((m) => m.service === selectedMetricDescriptor.service)\n        .map((m) => ({\n          service: m.service,\n          value: m.type,\n          label: m.displayName,\n          component: function optionComponent() {\n            return (\n              <div>\n                <div className={customStyle}>{m.type}</div>\n                <div className={selectStyles.optionDescription}>{m.description}</div>\n              </div>\n            );\n          },\n        }));\n      return metricsByService;\n    };\n\n    const metrics = getMetricsList(metricDescriptors);\n    const service = metrics.length > 0 ? metrics[0].service : '';\n    const metricDescriptor = getSelectedMetricDescriptor(metricDescriptors, metricType);\n    setMetricDescriptor(metricDescriptor);\n    setMetrics(metrics);\n    setService(service);\n  }, [metricDescriptors, getSelectedMetricDescriptor, metricType, customStyle, selectStyles.optionDescription]);\n\n  const onServiceChange = ({ value: service }: SelectableValue<string>) => {\n    const metrics = metricDescriptors\n      .filter((m: MetricDescriptor) => m.service === templateSrv.replace(service))\n      .map((m: MetricDescriptor) => ({\n        service: m.service,\n        value: m.type,\n        label: m.displayName,\n        description: m.description,\n      }));\n    // On service change reset all query values except the project name\n    query.filters = [];\n\n    if (metrics.length > 0 && !metrics.some((m) => m.value === templateSrv.replace(metricType))) {\n      onMetricTypeChange(metrics[0]);\n      setService(service!);\n      setMetrics(metrics);\n    } else {\n      setService(service!);\n      setMetrics(metrics);\n    }\n  };\n\n  const getServicesList = (metricDescriptors: MetricDescriptor[]) => {\n    const services = metricDescriptors.map((m) => ({\n      value: m.service,\n      label: startCase(m.serviceShortName),\n    }));\n\n    return services.length > 0 ? uniqBy(services, (s) => s.value) : [];\n  };\n\n  const filterMetrics = async (filter: string) => {\n    const metrics = await datasource.filterMetricsByType(projectName, service);\n    const filtered = metrics\n      .filter((m) => m.type.includes(filter.toLowerCase()))\n      .map((m) => ({\n        value: m.type,\n        label: m.displayName,\n        component: function optionComponent() {\n          return (\n            <div>\n              <div className={customStyle}>{m.type}</div>\n              <div className={selectStyles.optionDescription}>{m.description}</div>\n            </div>\n          );\n        },\n      }));\n    return [\n      {\n        label: 'Template Variables',\n        options: variableOptionGroup.options,\n      },\n      ...filtered,\n    ];\n  };\n\n  const debounceFilter = debounce(filterMetrics, 400);\n\n  const onMetricTypeChange = ({ value }: SelectableValue<string>) => {\n    const metricDescriptor = getSelectedMetricDescriptor(metricDescriptors, value!);\n    setMetricDescriptor(metricDescriptor);\n    const { metricKind, valueType } = metricDescriptor;\n    const preprocessor =\n      metricKind === MetricKind.GAUGE || valueType === ValueTypes.DISTRIBUTION\n        ? PreprocessorType.None\n        : PreprocessorType.Rate;\n    const { perSeriesAligner } = getAlignmentPickerData(valueType, metricKind, query.perSeriesAligner, preprocessor);\n\n    // On metric name change reset query to defaults except project name and filters\n    Object.assign(query, {\n      ...defaultTimeSeriesList(datasource),\n      projectName: query.projectName,\n      filters: query.filters,\n    });\n    onChange({\n      ...setMetricType(\n        {\n          ...query,\n          perSeriesAligner,\n        },\n        value!\n      ),\n      preprocessor,\n    });\n  };\n\n  return (\n    <>\n      <EditorRow>\n        <EditorFieldGroup>\n          <Project\n            refId={refId}\n            templateVariableOptions={variableOptionGroup.options}\n            projectName={projectName}\n            datasource={datasource}\n            onChange={(projectName) => {\n              onChange({ ...query, projectName });\n            }}\n          />\n\n          <EditorField label=\"Service\" width=\"auto\">\n            <Select\n              width=\"auto\"\n              onChange={onServiceChange}\n              isLoading={services.length === 0}\n              value={[...services, ...variableOptionGroup.options].find((s) => s.value === service)}\n              options={[\n                {\n                  label: 'Template Variables',\n                  options: variableOptionGroup.options,\n                },\n                ...services,\n              ]}\n              placeholder=\"Select Services\"\n              inputId={`${refId}-service`}\n            />\n          </EditorField>\n          <EditorField label=\"Metric name\" width=\"auto\" htmlFor={`${refId}-select-metric`}>\n            <span title={service === '' ? 'Select a service first' : 'Type to search metrics'}>\n              <AsyncSelect\n                width=\"auto\"\n                onChange={onMetricTypeChange}\n                value={[...metrics, ...variableOptionGroup.options].find((s) => s.value === metricType)}\n                loadOptions={debounceFilter}\n                defaultOptions={[\n                  {\n                    label: 'Template Variables',\n                    options: variableOptionGroup.options,\n                  },\n                  ...metrics.slice(0, 100),\n                ]}\n                placeholder=\"Select Metric\"\n                inputId={`${refId}-select-metric`}\n                disabled={service === ''}\n              />\n            </span>\n          </EditorField>\n        </EditorFieldGroup>\n      </EditorRow>\n\n      <>\n        <LabelFilter\n          labels={labels}\n          filters={query.filters!}\n          onChange={(filters: string[]) => onChange({ ...query, filters })}\n          variableOptionGroup={variableOptionGroup}\n        />\n        <EditorRow>\n          <Preprocessor metricDescriptor={metricDescriptor} query={query} onChange={onChange} />\n          <GroupBy\n            refId={refId}\n            labels={Object.keys(labels)}\n            query={query}\n            onChange={onChange}\n            variableOptionGroup={variableOptionGroup}\n            metricDescriptor={metricDescriptor}\n          />\n          <Alignment\n            refId={refId}\n            datasource={datasource}\n            templateVariableOptions={variableOptionGroup.options}\n            query={query}\n            customMetaData={customMetaData}\n            onChange={onChange}\n            metricDescriptor={metricDescriptor}\n            preprocessor={query.preprocessor}\n          />\n          <AliasBy refId={refId} value={aliasBy} onChange={onChangeAliasBy} />\n        </EditorRow>\n      </>\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => css`\n  label: grafana-select-option-description;\n  font-weight: normal;\n  font-style: italic;\n  color: ${theme.colors.text.secondary};\n`;\n\nexport const VisualMetricQueryEditor = React.memo(Editor);\n","import React, { useCallback, useEffect } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorRows, Stack } from '@grafana/experimental';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { AlignmentTypes, CloudMonitoringQuery, QueryType, TimeSeriesList, TimeSeriesQuery } from '../types/query';\nimport { CustomMetaData } from '../types/types';\n\nimport { AliasBy } from './AliasBy';\nimport { GraphPeriod } from './GraphPeriod';\nimport { MQLQueryEditor } from './MQLQueryEditor';\nimport { Project } from './Project';\nimport { VisualMetricQueryEditor } from './VisualMetricQueryEditor';\n\nexport interface Props {\n  refId: string;\n  customMetaData: CustomMetaData;\n  variableOptionGroup: SelectableValue<string>;\n  onChange: (query: CloudMonitoringQuery) => void;\n  onRunQuery: () => void;\n  query: CloudMonitoringQuery;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const defaultTimeSeriesList: (dataSource: CloudMonitoringDatasource) => TimeSeriesList = (dataSource) => ({\n  projectName: dataSource.getDefaultProject(),\n  crossSeriesReducer: 'REDUCE_NONE',\n  alignmentPeriod: 'cloud-monitoring-auto',\n  perSeriesAligner: AlignmentTypes.ALIGN_MEAN,\n  groupBys: [],\n  filters: [],\n});\n\nexport const defaultTimeSeriesQuery: (dataSource: CloudMonitoringDatasource) => TimeSeriesQuery = (dataSource) => ({\n  projectName: dataSource.getDefaultProject(),\n  query: '',\n});\n\nfunction Editor({\n  refId,\n  query,\n  datasource,\n  onChange: onQueryChange,\n  onRunQuery,\n  customMetaData,\n  variableOptionGroup,\n}: React.PropsWithChildren<Props>) {\n  const onChangeTimeSeriesList = useCallback(\n    (timeSeriesList: TimeSeriesList) => {\n      onQueryChange({ ...query, timeSeriesList });\n      onRunQuery();\n    },\n    [onQueryChange, onRunQuery, query]\n  );\n\n  const onChangeTimeSeriesQuery = useCallback(\n    (timeSeriesQuery: TimeSeriesQuery) => {\n      onQueryChange({ ...query, timeSeriesQuery });\n      onRunQuery();\n    },\n    [onQueryChange, onRunQuery, query]\n  );\n\n  useEffect(() => {\n    if (query.queryType === QueryType.TIME_SERIES_LIST && !query.timeSeriesList) {\n      onQueryChange({\n        refId: query.refId,\n        datasource: query.datasource,\n        queryType: QueryType.TIME_SERIES_LIST,\n        timeSeriesList: defaultTimeSeriesList(datasource),\n        aliasBy: query.aliasBy,\n      });\n    }\n    if (query.queryType === QueryType.TIME_SERIES_QUERY && !query.timeSeriesQuery) {\n      onQueryChange({\n        refId: query.refId,\n        datasource: query.datasource,\n        queryType: QueryType.TIME_SERIES_QUERY,\n        timeSeriesQuery: defaultTimeSeriesQuery(datasource),\n        aliasBy: query.aliasBy,\n      });\n    }\n  }, [onQueryChange, query, datasource]);\n\n  return (\n    <EditorRows>\n      {(query.queryType === QueryType.ANNOTATION || query.queryType === QueryType.TIME_SERIES_LIST) &&\n        query.timeSeriesList && (\n          <VisualMetricQueryEditor\n            refId={refId}\n            variableOptionGroup={variableOptionGroup}\n            customMetaData={customMetaData}\n            onChange={onChangeTimeSeriesList}\n            datasource={datasource}\n            query={query.timeSeriesList}\n            aliasBy={query.aliasBy}\n            onChangeAliasBy={(aliasBy: string) => onQueryChange({ ...query, aliasBy })}\n          />\n        )}\n\n      {query.queryType === QueryType.TIME_SERIES_QUERY && query.timeSeriesQuery && (\n        <>\n          <Stack gap={1} direction=\"row\">\n            <Project\n              refId={refId}\n              datasource={datasource}\n              onChange={(projectName) =>\n                onChangeTimeSeriesQuery({ ...query.timeSeriesQuery!, projectName: projectName })\n              }\n              templateVariableOptions={variableOptionGroup.options}\n              projectName={query.timeSeriesQuery.projectName!}\n            />\n            <AliasBy\n              refId={refId}\n              value={query.aliasBy}\n              onChange={(aliasBy: string) => onQueryChange({ ...query, aliasBy })}\n            />\n          </Stack>\n          <MQLQueryEditor\n            onChange={(q: string) => onChangeTimeSeriesQuery({ ...query.timeSeriesQuery!, query: q })}\n            onRunQuery={onRunQuery}\n            query={query.timeSeriesQuery.query}\n          ></MQLQueryEditor>\n          <GraphPeriod\n            onChange={(graphPeriod: string) => onChangeTimeSeriesQuery({ ...query.timeSeriesQuery!, graphPeriod })}\n            graphPeriod={query.timeSeriesQuery.graphPeriod}\n            refId={refId}\n            variableOptionGroup={variableOptionGroup}\n          />\n        </>\n      )}\n    </EditorRows>\n  );\n}\n\nexport const MetricQueryEditor = React.memo(Editor);\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, Select } from '@grafana/ui';\n\ninterface VariableQueryFieldProps {\n  onChange: (value: string) => void;\n  options: SelectableValue[];\n  value: string;\n  label: string;\n  allowCustomValue?: boolean;\n}\n\nexport const VariableQueryField = ({\n  label,\n  onChange,\n  value,\n  options,\n  allowCustomValue = false,\n}: VariableQueryFieldProps) => {\n  return (\n    <InlineField label={label} labelWidth={20}>\n      <Select\n        width={25}\n        allowCustomValue={allowCustomValue}\n        value={value}\n        onChange={({ value }) => onChange(value!)}\n        options={options}\n      />\n    </InlineField>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { QueryEditorProps, toOption } from '@grafana/data';\nimport { EditorRows } from '@grafana/experimental';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { CloudMonitoringQuery, PromQLQuery, QueryType, SLOQuery } from '../types/query';\nimport { CloudMonitoringOptions } from '../types/types';\n\nimport { PromQLQueryEditor } from './PromQLEditor';\nimport { QueryHeader } from './QueryHeader';\nimport { defaultQuery as defaultSLOQuery } from './SLOQueryEditor';\n\nimport { MetricQueryEditor, SLOQueryEditor } from './';\n\nexport type Props = QueryEditorProps<CloudMonitoringDatasource, CloudMonitoringQuery, CloudMonitoringOptions>;\n\nexport const QueryEditor = (props: Props) => {\n  const { datasource, query: oldQ, onRunQuery, onChange } = props;\n  // Migrate query if needed\n  const [migrated, setMigrated] = useState(false);\n  const query = useMemo(() => {\n    if (!migrated) {\n      setMigrated(true);\n      const migratedQuery = datasource.migrateQuery(oldQ);\n      // Update the query once the migrations have been completed.\n      onChange({ ...migratedQuery });\n      return migratedQuery;\n    }\n    return oldQ;\n  }, [oldQ, datasource, onChange, migrated]);\n\n  const sloQuery = { ...defaultSLOQuery(datasource), ...query.sloQuery };\n  const onSLOQueryChange = (q: SLOQuery) => {\n    onChange({ ...query, sloQuery: q });\n    onRunQuery();\n  };\n\n  const promQLQuery = {\n    ...{ projectName: datasource.getDefaultProject(), expr: '', step: '10s' },\n    ...query.promQLQuery,\n  };\n  const onPromQLQueryChange = (q: PromQLQuery) => {\n    onChange({ ...query, promQLQuery: q });\n  };\n\n  const meta = props.data?.series.length ? props.data?.series[0].meta : {};\n  const customMetaData = meta?.custom ?? {};\n  const variableOptionGroup = {\n    label: 'Template Variables',\n    expanded: false,\n    options: datasource.getVariables().map(toOption),\n  };\n\n  // Use a known query type\n  useEffect(() => {\n    if (!query.queryType || !Object.values(QueryType).includes(query.queryType)) {\n      onChange({ ...query, queryType: QueryType.TIME_SERIES_LIST });\n    }\n  });\n  const queryType = query.queryType;\n\n  return (\n    <EditorRows>\n      <QueryHeader query={query} onChange={onChange} onRunQuery={onRunQuery} />\n\n      {queryType === QueryType.PROMQL && (\n        <PromQLQueryEditor\n          refId={query.refId}\n          variableOptionGroup={variableOptionGroup}\n          onChange={onPromQLQueryChange}\n          onRunQuery={onRunQuery}\n          datasource={datasource}\n          query={promQLQuery}\n        />\n      )}\n\n      {queryType !== QueryType.SLO && (\n        <MetricQueryEditor\n          refId={query.refId}\n          variableOptionGroup={variableOptionGroup}\n          customMetaData={customMetaData}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          datasource={datasource}\n          query={query}\n        />\n      )}\n\n      {queryType === QueryType.SLO && (\n        <SLOQueryEditor\n          refId={query.refId}\n          variableOptionGroup={variableOptionGroup}\n          customMetaData={customMetaData}\n          onChange={onSLOQueryChange}\n          onRunQuery={onRunQuery}\n          datasource={datasource}\n          query={sloQuery}\n          aliasBy={query.aliasBy}\n          onChangeAliasBy={(aliasBy: string) => onChange({ ...query, aliasBy })}\n        />\n      )}\n    </EditorRows>\n  );\n};\n","import React, { PureComponent } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { extractServicesFromMetricDescriptors, getLabelKeys, getMetricTypes } from '../functions';\nimport { CloudMonitoringQuery, MetricFindQueryTypes } from '../types/query';\nimport {\n  CloudMonitoringOptions,\n  CloudMonitoringVariableQuery,\n  MetricDescriptor,\n  VariableQueryData,\n} from '../types/types';\n\nimport { VariableQueryField } from './';\n\nexport type Props = QueryEditorProps<\n  CloudMonitoringDatasource,\n  CloudMonitoringQuery,\n  CloudMonitoringOptions,\n  CloudMonitoringVariableQuery\n>;\n\nexport class CloudMonitoringVariableQueryEditor extends PureComponent<Props, VariableQueryData> {\n  queryTypes: Array<{ value: string; label: string }> = [\n    { value: MetricFindQueryTypes.Projects, label: 'Projects' },\n    { value: MetricFindQueryTypes.Services, label: 'Services' },\n    { value: MetricFindQueryTypes.MetricTypes, label: 'Metric Types' },\n    { value: MetricFindQueryTypes.LabelKeys, label: 'Label Keys' },\n    { value: MetricFindQueryTypes.LabelValues, label: 'Label Values' },\n    { value: MetricFindQueryTypes.ResourceTypes, label: 'Resource Types' },\n    { value: MetricFindQueryTypes.Aggregations, label: 'Aggregations' },\n    { value: MetricFindQueryTypes.Aligners, label: 'Aligners' },\n    { value: MetricFindQueryTypes.AlignmentPeriods, label: 'Alignment Periods' },\n    { value: MetricFindQueryTypes.Selectors, label: 'Selectors' },\n    { value: MetricFindQueryTypes.SLOServices, label: 'SLO Services' },\n    { value: MetricFindQueryTypes.SLO, label: 'Service Level Objectives (SLO)' },\n  ];\n\n  defaults: VariableQueryData = {\n    selectedQueryType: this.queryTypes[0].value,\n    metricDescriptors: [],\n    selectedService: '',\n    selectedMetricType: '',\n    labels: [],\n    labelKey: '',\n    metricTypes: [],\n    services: [],\n    sloServices: [],\n    selectedSLOService: '',\n    projects: [],\n    projectName: '',\n    loading: true,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = Object.assign(this.defaults, this.props.query);\n  }\n\n  async componentDidMount() {\n    await this.props.datasource.ensureGCEDefaultProject();\n    const projectName = this.props.query.projectName || this.props.datasource.getDefaultProject();\n    const projects = (await this.props.datasource.getProjects()) as MetricDescriptor[];\n    const metricDescriptors = await this.props.datasource.getMetricTypes(\n      this.props.query.projectName || this.props.datasource.getDefaultProject()\n    );\n    const services = extractServicesFromMetricDescriptors(metricDescriptors).map((m: any) => ({\n      value: m.service,\n      label: m.serviceShortName,\n    }));\n\n    let selectedService = '';\n    if (services.some((s) => s.value === getTemplateSrv().replace(this.state.selectedService))) {\n      selectedService = this.state.selectedService;\n    } else if (services && services.length > 0) {\n      selectedService = services[0].value;\n    }\n\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(projectName);\n\n    const state: any = {\n      services,\n      selectedService,\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      projects,\n      ...(await this.getLabels(selectedMetricType, projectName)),\n      sloServices,\n      loading: false,\n      projectName,\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onPropsChange = () => {\n    const { metricDescriptors, labels, metricTypes, services, ...queryModel } = this.state;\n    this.props.onChange({ ...queryModel, refId: 'CloudMonitoringVariableQueryEditor-VariableQuery' });\n  };\n\n  async onQueryTypeChange(queryType: string) {\n    const state: any = {\n      selectedQueryType: queryType,\n      ...(await this.getLabels(this.state.selectedMetricType, this.state.projectName, queryType)),\n    };\n\n    this.setState(state);\n  }\n\n  async onProjectChange(projectName: string) {\n    const metricDescriptors = await this.props.datasource.getMetricTypes(projectName);\n    const labels = await this.getLabels(this.state.selectedMetricType, projectName);\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(this.state.selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(projectName);\n\n    this.setState(\n      {\n        ...labels,\n        metricTypes,\n        selectedMetricType,\n        metricDescriptors,\n        projectName,\n        sloServices,\n      },\n      () => this.onPropsChange()\n    );\n  }\n\n  async onServiceChange(service: string) {\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      this.state.metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(service)\n    );\n    const state: any = {\n      selectedService: service,\n      metricTypes,\n      selectedMetricType,\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  async onMetricTypeChange(metricType: string) {\n    const state: any = {\n      selectedMetricType: metricType,\n      ...(await this.getLabels(metricType, this.state.projectName)),\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onLabelKeyChange(labelKey: string) {\n    this.setState({ labelKey }, () => this.onPropsChange());\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<VariableQueryData>) {\n    const selecQueryTypeChanged = prevState.selectedQueryType !== this.state.selectedQueryType;\n    const selectSLOServiceChanged = this.state.selectedSLOService !== prevState.selectedSLOService;\n    if (selecQueryTypeChanged || selectSLOServiceChanged) {\n      this.onPropsChange();\n    }\n  }\n\n  async getLabels(selectedMetricType: string, projectName: string, selectedQueryType = this.state.selectedQueryType) {\n    let result = { labels: this.state.labels, labelKey: this.state.labelKey };\n    if (selectedMetricType && selectedQueryType === MetricFindQueryTypes.LabelValues) {\n      const labels = await getLabelKeys(this.props.datasource, selectedMetricType, projectName);\n      const labelKey = labels.some((l) => l === getTemplateSrv().replace(this.state.labelKey))\n        ? this.state.labelKey\n        : labels[0];\n      result = { labels, labelKey };\n    }\n    return result;\n  }\n\n  renderQueryTypeSwitch(queryType: string) {\n    const variableOptionGroup = {\n      label: 'Template Variables',\n      expanded: false,\n      options: getTemplateSrv()\n        .getVariables()\n        .map((v: any) => ({\n          value: `$${v.name}`,\n          label: `$${v.name}`,\n        })),\n    };\n\n    switch (queryType) {\n      case MetricFindQueryTypes.MetricTypes:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.LabelKeys:\n      case MetricFindQueryTypes.LabelValues:\n      case MetricFindQueryTypes.ResourceTypes:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n            <VariableQueryField\n              value={this.state.selectedMetricType}\n              options={[\n                variableOptionGroup,\n                ...this.state.metricTypes.map(({ value, name }) => ({ value, label: name })),\n              ]}\n              onChange={(value) => this.onMetricTypeChange(value)}\n              label=\"Metric Type\"\n            />\n            {queryType === MetricFindQueryTypes.LabelValues && (\n              <VariableQueryField\n                value={this.state.labelKey}\n                options={[variableOptionGroup, ...this.state.labels.map((l) => ({ value: l, label: l }))]}\n                onChange={(value) => this.onLabelKeyChange(value)}\n                label=\"Label Key\"\n              />\n            )}\n          </>\n        );\n      case MetricFindQueryTypes.Aligners:\n      case MetricFindQueryTypes.Aggregations:\n        return (\n          <>\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n            <VariableQueryField\n              value={this.state.selectedMetricType}\n              options={[\n                variableOptionGroup,\n                ...this.state.metricTypes.map(({ value, name }) => ({ value, label: name })),\n              ]}\n              onChange={(value) => this.onMetricTypeChange(value)}\n              label=\"Metric Type\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.SLOServices:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n          </>\n        );\n\n      case MetricFindQueryTypes.SLO:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedSLOService}\n              options={[variableOptionGroup, ...this.state.sloServices]}\n              onChange={(value) => {\n                this.setState({\n                  ...this.state,\n                  selectedSLOService: value,\n                });\n              }}\n              label=\"SLO Service\"\n            />\n          </>\n        );\n      default:\n        return '';\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <div className=\"gf-form max-width-21\">\n          <span className=\"gf-form-label width-10 query-keyword\">Query Type</span>\n          <div className=\"gf-form-select-wrapper max-width-12\">\n            <select className=\"gf-form-input\">\n              <option>Loading...</option>\n            </select>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <VariableQueryField\n          value={this.state.selectedQueryType}\n          options={this.queryTypes}\n          onChange={(value) => this.onQueryTypeChange(value)}\n          label=\"Query Type\"\n        />\n        {this.renderQueryTypeSwitch(this.state.selectedQueryType)}\n      </>\n    );\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { QueryEditorProps, toOption } from '@grafana/data';\nimport { EditorField, EditorRows } from '@grafana/experimental';\nimport { Input } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { TimeSeriesList, CloudMonitoringQuery, QueryType } from '../types/query';\nimport { CloudMonitoringOptions } from '../types/types';\n\nimport { MetricQueryEditor, defaultTimeSeriesList } from './MetricQueryEditor';\n\nimport { AnnotationsHelp } from './';\n\nexport type Props = QueryEditorProps<CloudMonitoringDatasource, CloudMonitoringQuery, CloudMonitoringOptions>;\n\nexport const defaultQuery: (datasource: CloudMonitoringDatasource) => TimeSeriesList = (datasource) => ({\n  ...defaultTimeSeriesList(datasource),\n  title: '',\n  text: '',\n});\n\nexport const AnnotationQueryEditor = (props: Props) => {\n  const { datasource, query, onRunQuery, data, onChange } = props;\n  const meta = data?.series.length ? data?.series[0].meta : {};\n  const customMetaData = meta?.custom ?? {};\n  const timeSeriesList = { ...defaultQuery(datasource), ...query.timeSeriesList };\n  const [title, setTitle] = useState(timeSeriesList.title || '');\n  const [text, setText] = useState(timeSeriesList.text || '');\n  const variableOptionGroup = {\n    label: 'Template Variables',\n    options: datasource.getVariables().map(toOption),\n  };\n\n  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  };\n  const handleTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setText(e.target.value);\n  };\n\n  useDebounce(\n    () => {\n      onChange({ ...query, timeSeriesList: { ...timeSeriesList, title } });\n    },\n    1000,\n    [title, onChange]\n  );\n  useDebounce(\n    () => {\n      onChange({ ...query, timeSeriesList: { ...timeSeriesList, text } });\n    },\n    1000,\n    [text, onChange]\n  );\n\n  // Use a known query type\n  useEffect(() => {\n    if (!query.queryType || !Object.values(QueryType).includes(query.queryType)) {\n      onChange({ ...query, queryType: QueryType.TIME_SERIES_LIST });\n    }\n  });\n\n  return (\n    <EditorRows>\n      <>\n        <MetricQueryEditor\n          refId={query.refId}\n          variableOptionGroup={variableOptionGroup}\n          customMetaData={customMetaData}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          datasource={datasource}\n          query={query}\n        />\n        <EditorField label=\"Title\" htmlFor=\"annotation-query-title\">\n          <Input id=\"annotation-query-title\" value={title} onChange={handleTitleChange} />\n        </EditorField>\n        <EditorField label=\"Text\" htmlFor=\"annotation-query-text\">\n          <Input id=\"annotation-query-text\" value={text} onChange={handleTextChange} />\n        </EditorField>\n      </>\n      <AnnotationsHelp />\n    </EditorRows>\n  );\n};\n","import { AnnotationSupport, AnnotationQuery } from '@grafana/data';\n\nimport { AnnotationQueryEditor } from './components/AnnotationQueryEditor';\nimport CloudMonitoringDatasource from './datasource';\nimport { AlignmentTypes, CloudMonitoringQuery, QueryType, LegacyCloudMonitoringAnnotationQuery } from './types/query';\n\n// The legacy query format sets the title and text values to empty strings by default.\n// If the title or text is not undefined at the top-level of the annotation target,\n// then it is a legacy query.\nconst isLegacyCloudMonitoringAnnotation = (\n  query: unknown\n): query is AnnotationQuery<LegacyCloudMonitoringAnnotationQuery> =>\n  (query as AnnotationQuery<LegacyCloudMonitoringAnnotationQuery>).target?.title !== undefined ||\n  (query as AnnotationQuery<LegacyCloudMonitoringAnnotationQuery>).target?.text !== undefined;\n\nexport const CloudMonitoringAnnotationSupport: (\n  ds: CloudMonitoringDatasource\n) => AnnotationSupport<CloudMonitoringQuery> = (ds: CloudMonitoringDatasource) => {\n  return {\n    prepareAnnotation: (\n      query: AnnotationQuery<LegacyCloudMonitoringAnnotationQuery> | AnnotationQuery<CloudMonitoringQuery>\n    ): AnnotationQuery<CloudMonitoringQuery> => {\n      if (!isLegacyCloudMonitoringAnnotation(query)) {\n        return query;\n      }\n\n      const { enable, name, iconColor } = query;\n      const { target } = query;\n      const result: AnnotationQuery<CloudMonitoringQuery> = {\n        datasource: query.datasource,\n        enable,\n        name,\n        iconColor,\n        target: {\n          intervalMs: ds.intervalMs,\n          refId: target?.refId || 'annotationQuery',\n          queryType: QueryType.ANNOTATION,\n          timeSeriesList: {\n            projectName: target?.projectName || ds.getDefaultProject(),\n            filters: target?.filters || [],\n            crossSeriesReducer: 'REDUCE_NONE',\n            perSeriesAligner: AlignmentTypes.ALIGN_NONE,\n            title: target?.title || '',\n            text: target?.text || '',\n          },\n        },\n      };\n      return result;\n    },\n    prepareQuery: (anno: AnnotationQuery<CloudMonitoringQuery>) => {\n      if (!anno.target) {\n        return undefined;\n      }\n\n      return {\n        ...anno.target,\n        queryType: QueryType.ANNOTATION,\n        type: 'annotationQuery',\n      };\n    },\n    QueryEditor: AnnotationQueryEditor,\n  };\n};\n","import { isString } from 'lodash';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { ALIGNMENT_PERIODS, SELECTORS } from './constants';\nimport CloudMonitoringDatasource from './datasource';\nimport {\n  extractServicesFromMetricDescriptors,\n  getAggregationOptionsByMetric,\n  getAlignmentOptionsByMetric,\n  getLabelKeys,\n  getMetricTypesByService,\n} from './functions';\nimport { ValueTypes, MetricFindQueryTypes } from './types/query';\nimport { CloudMonitoringVariableQuery, MetricDescriptor } from './types/types';\n\nexport default class CloudMonitoringMetricFindQuery {\n  constructor(private datasource: CloudMonitoringDatasource) {}\n\n  async execute(query: CloudMonitoringVariableQuery) {\n    try {\n      if (!query.projectName) {\n        query.projectName = this.datasource.getDefaultProject();\n      }\n\n      switch (query.selectedQueryType) {\n        case MetricFindQueryTypes.Projects:\n          return this.handleProjectsQuery();\n        case MetricFindQueryTypes.Services:\n          return this.handleServiceQuery(query);\n        case MetricFindQueryTypes.MetricTypes:\n          return this.handleMetricTypesQuery(query);\n        case MetricFindQueryTypes.LabelKeys:\n          return this.handleLabelKeysQuery(query);\n        case MetricFindQueryTypes.LabelValues:\n          return this.handleLabelValuesQuery(query);\n        case MetricFindQueryTypes.ResourceTypes:\n          return this.handleResourceTypeQuery(query);\n        case MetricFindQueryTypes.Aligners:\n          return this.handleAlignersQuery(query);\n        case MetricFindQueryTypes.AlignmentPeriods:\n          return this.handleAlignmentPeriodQuery();\n        case MetricFindQueryTypes.Aggregations:\n          return this.handleAggregationQuery(query);\n        case MetricFindQueryTypes.SLOServices:\n          return this.handleSLOServicesQuery(query);\n        case MetricFindQueryTypes.SLO:\n          return this.handleSLOQuery(query);\n        case MetricFindQueryTypes.Selectors:\n          return this.handleSelectorQuery();\n        default:\n          return [];\n      }\n    } catch (error) {\n      console.error(`Could not run CloudMonitoringMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n\n  async handleProjectsQuery() {\n    const projects = await this.datasource.getProjects();\n    return (projects as SelectableValue<string>).map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleServiceQuery({ projectName }: CloudMonitoringVariableQuery) {\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const services: MetricDescriptor[] = extractServicesFromMetricDescriptors(metricDescriptors);\n    return services.map((s) => ({\n      text: s.serviceShortName,\n      value: s.service,\n      expandable: true,\n    }));\n  }\n\n  async handleMetricTypesQuery({ selectedService, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedService) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    return getMetricTypesByService(metricDescriptors, this.datasource.templateSrv.replace(selectedService)).map(\n      (s) => ({\n        text: s.displayName,\n        value: s.type,\n        expandable: true,\n      })\n    );\n  }\n\n  async handleLabelKeysQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const labelKeys = await getLabelKeys(this.datasource, selectedMetricType, projectName);\n    return labelKeys.map(this.toFindQueryResult);\n  }\n\n  async handleLabelValuesQuery({ selectedMetricType, labelKey, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleLabelValuesQuery';\n    // REDUCE_MEAN is needed so the groupBy is not ignored\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName, {\n      groupBys: [labelKey],\n      crossSeriesReducer: 'REDUCE_MEAN',\n    });\n    const interpolatedKey = this.datasource.templateSrv.replace(labelKey);\n    const values = labels.hasOwnProperty(interpolatedKey) ? labels[interpolatedKey] : [];\n    return values.map(this.toFindQueryResult);\n  }\n\n  async handleResourceTypeQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleResourceTypeQueryQueryType';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName);\n    return labels['resource.type']?.map(this.toFindQueryResult) ?? [];\n  }\n\n  async handleAlignersQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAlignmentOptionsByMetric(descriptor.valueType, descriptor.metricKind).map(this.toFindQueryResult);\n  }\n\n  async handleAggregationQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAggregationOptionsByMetric(descriptor.valueType as ValueTypes, descriptor.metricKind).map(\n      this.toFindQueryResult\n    );\n  }\n\n  async handleSLOServicesQuery({ projectName }: CloudMonitoringVariableQuery) {\n    const services = await this.datasource.getSLOServices(projectName);\n    return services.map(this.toFindQueryResult);\n  }\n\n  async handleSLOQuery({ selectedSLOService, projectName }: CloudMonitoringVariableQuery) {\n    const slos = await this.datasource.getServiceLevelObjectives(projectName, selectedSLOService);\n    return slos.map(this.toFindQueryResult);\n  }\n\n  async handleSelectorQuery() {\n    return SELECTORS.map(this.toFindQueryResult);\n  }\n\n  handleAlignmentPeriodQuery() {\n    return ALIGNMENT_PERIODS.map(this.toFindQueryResult);\n  }\n\n  toFindQueryResult(x: any) {\n    return isString(x) ? { text: x, expandable: true } : { ...x, expandable: true };\n  }\n}\n","import { from, Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport { CustomVariableSupport, DataQueryRequest, DataQueryResponse } from '@grafana/data';\n\nimport CloudMonitoringMetricFindQuery from './CloudMonitoringMetricFindQuery';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\nimport CloudMonitoringDatasource from './datasource';\nimport { CloudMonitoringVariableQuery } from './types/types';\n\nexport class CloudMonitoringVariableSupport extends CustomVariableSupport<\n  CloudMonitoringDatasource,\n  CloudMonitoringVariableQuery\n> {\n  private readonly metricFindQuery: CloudMonitoringMetricFindQuery;\n\n  constructor(private readonly datasource: CloudMonitoringDatasource) {\n    super();\n    this.metricFindQuery = new CloudMonitoringMetricFindQuery(datasource);\n  }\n\n  editor = CloudMonitoringVariableQueryEditor;\n\n  query(request: DataQueryRequest<CloudMonitoringVariableQuery>): Observable<DataQueryResponse> {\n    const executeObservable = from(this.metricFindQuery.execute(request.targets[0]));\n    return from(this.datasource.ensureGCEDefaultProject()).pipe(\n      mergeMap(() => executeObservable),\n      map((data) => ({ data }))\n    );\n  }\n}\n","import { chunk, flatten, isString, isArray, has, get, omit } from 'lodash';\nimport { from, lastValueFrom, Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  ScopedVars,\n  SelectableValue,\n  TimeRange,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getBackendSrv, toDataQueryResponse, BackendSrv } from '@grafana/runtime';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n\nimport { CloudMonitoringAnnotationSupport } from './annotationSupport';\nimport { SLO_BURN_RATE_SELECTOR_NAME } from './constants';\nimport { getMetricType, setMetricType } from './functions';\nimport { CloudMonitoringQuery, QueryType, MetricQuery, Filter } from './types/query';\nimport { CloudMonitoringOptions, MetricDescriptor, PostResponse, Aggregation } from './types/types';\nimport { CloudMonitoringVariableSupport } from './variables';\n\nexport default class CloudMonitoringDatasource extends DataSourceWithBackend<\n  CloudMonitoringQuery,\n  CloudMonitoringOptions\n> {\n  authenticationType: string;\n  intervalMs: number;\n  backendSrv: BackendSrv;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<CloudMonitoringOptions>,\n    public templateSrv: TemplateSrv = getTemplateSrv(),\n    readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.authenticationType = instanceSettings.jsonData.authenticationType || 'jwt';\n    this.variables = new CloudMonitoringVariableSupport(this);\n    this.intervalMs = 0;\n    this.annotations = CloudMonitoringAnnotationSupport(this);\n    this.backendSrv = getBackendSrv();\n  }\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  query(request: DataQueryRequest<CloudMonitoringQuery>): Observable<DataQueryResponse> {\n    request.targets = request.targets.map((t) => ({\n      ...this.migrateQuery(t),\n      intervalMs: request.intervalMs,\n    }));\n    return super.query(request);\n  }\n\n  applyTemplateVariables(target: CloudMonitoringQuery, scopedVars: ScopedVars): Record<string, any> {\n    const { timeSeriesList, timeSeriesQuery, sloQuery, promQLQuery } = target;\n\n    return {\n      ...target,\n      datasource: this.getRef(),\n      intervalMs: this.intervalMs,\n      timeSeriesList: timeSeriesList && {\n        ...this.interpolateProps(timeSeriesList, scopedVars),\n        projectName: this.templateSrv.replace(\n          timeSeriesList.projectName ? timeSeriesList.projectName : this.getDefaultProject(),\n          scopedVars\n        ),\n        filters: this.interpolateFilters(timeSeriesList.filters || [], scopedVars),\n        groupBys: this.interpolateGroupBys(timeSeriesList.groupBys || [], scopedVars),\n        view: timeSeriesList.view || 'FULL',\n      },\n      timeSeriesQuery: timeSeriesQuery && {\n        ...this.interpolateProps(timeSeriesQuery, scopedVars),\n        projectName: this.templateSrv.replace(\n          timeSeriesQuery.projectName ? timeSeriesQuery.projectName : this.getDefaultProject(),\n          scopedVars\n        ),\n      },\n      sloQuery: sloQuery && this.interpolateProps(sloQuery, scopedVars),\n      promQLQuery: promQLQuery && this.interpolateProps(promQLQuery, scopedVars),\n    };\n  }\n\n  async getLabels(\n    metricType: string,\n    refId: string,\n    projectName: string,\n    aggregation?: Aggregation,\n    timeRange?: TimeRange\n  ) {\n    const options = {\n      targets: [\n        {\n          refId,\n          datasource: this.getRef(),\n          queryType: QueryType.TIME_SERIES_LIST,\n          timeSeriesList: setMetricType(\n            {\n              projectName: this.templateSrv.replace(projectName),\n              groupBys: this.interpolateGroupBys(aggregation?.groupBys || [], {}),\n              crossSeriesReducer: aggregation?.crossSeriesReducer ?? 'REDUCE_NONE',\n              view: 'HEADERS',\n            },\n            metricType\n          ),\n        },\n      ],\n      range: timeRange ?? this.timeSrv.timeRange(),\n    };\n\n    const queries = options.targets;\n\n    if (!queries.length) {\n      return lastValueFrom(of({ results: [] }));\n    }\n\n    return lastValueFrom(\n      from(this.ensureGCEDefaultProject()).pipe(\n        mergeMap(() => {\n          return this.backendSrv.fetch<PostResponse>({\n            url: '/api/ds/query',\n            method: 'POST',\n            headers: this.getRequestHeaders(),\n            data: {\n              from: options.range.from.valueOf().toString(),\n              to: options.range.to.valueOf().toString(),\n              queries,\n            },\n          });\n        }),\n        map(({ data }) => {\n          const dataQueryResponse = toDataQueryResponse({\n            data: data,\n          });\n          const labels = dataQueryResponse?.data\n            .map((f) => f.meta?.custom?.labels)\n            .filter((p) => !!p)\n            .reduce((acc, labels) => {\n              for (let key in labels) {\n                if (!acc[key]) {\n                  acc[key] = new Set<string>();\n                }\n                if (labels[key]) {\n                  acc[key].add(labels[key]);\n                }\n              }\n              return acc;\n            }, {});\n          return Object.fromEntries(\n            Object.entries(labels).map((l: any) => {\n              l[1] = Array.from(l[1]);\n              return l;\n            })\n          );\n        })\n      )\n    );\n  }\n\n  async getGCEDefaultProject() {\n    return this.getResource(`gceDefaultProject`);\n  }\n\n  getDefaultProject(): string {\n    const { defaultProject, authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce') {\n      return gceDefaultProject || '';\n    }\n\n    return defaultProject || '';\n  }\n\n  async ensureGCEDefaultProject() {\n    const { authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce' && !gceDefaultProject) {\n      this.instanceSettings.jsonData.gceDefaultProject = await this.getGCEDefaultProject();\n    }\n  }\n\n  async getMetricTypes(projectName: string): Promise<MetricDescriptor[]> {\n    if (!projectName) {\n      return [];\n    }\n\n    return this.getResource(`metricDescriptors/v3/projects/${this.templateSrv.replace(projectName)}/metricDescriptors`);\n  }\n\n  async filterMetricsByType(projectName: string, filter: string): Promise<MetricDescriptor[]> {\n    if (!projectName) {\n      return [];\n    }\n\n    return this.getResource(\n      `metricDescriptors/v3/projects/${this.templateSrv.replace(projectName)}/metricDescriptors`,\n      { filter: `metric.type : \"${filter}\"` }\n    );\n  }\n\n  async getSLOServices(projectName: string): Promise<Array<SelectableValue<string>>> {\n    return this.getResource(`services/v3/projects/${this.templateSrv.replace(projectName)}/services?pageSize=1000`);\n  }\n\n  async getServiceLevelObjectives(projectName: string, serviceId: string): Promise<Array<SelectableValue<string>>> {\n    if (!serviceId) {\n      return Promise.resolve([]);\n    }\n    let { projectName: p, serviceId: s } = this.interpolateProps({ projectName, serviceId });\n    return this.getResource(`slo-services/v3/projects/${p}/services/${s}/serviceLevelObjectives`);\n  }\n\n  getProjects(): Promise<Array<SelectableValue<string>>> {\n    return this.getResource(`projects`);\n  }\n\n  migrateMetricTypeFilter(metricType: string, filters?: string[]) {\n    const metricTypeFilterArray = ['metric.type', '=', metricType];\n    if (filters?.length) {\n      return filters.concat('AND', metricTypeFilterArray);\n    }\n    return metricTypeFilterArray;\n  }\n\n  // This is a manual port of the migration code in cloudmonitoring.go\n  // DO NOT UPDATE THIS CODE WITHOUT UPDATING THE BACKEND CODE\n  migrateQuery(query: CloudMonitoringQuery): CloudMonitoringQuery {\n    const { hide, refId, datasource, key, queryType, maxLines, metric, intervalMs, type, ...rest } = query as any;\n    if (\n      !query.hasOwnProperty('metricQuery') &&\n      !query.hasOwnProperty('sloQuery') &&\n      !query.hasOwnProperty('timeSeriesQuery') &&\n      !query.hasOwnProperty('timeSeriesList')\n    ) {\n      return {\n        datasource,\n        key,\n        refId,\n        intervalMs,\n        hide,\n        queryType: type === 'annotationQuery' ? QueryType.ANNOTATION : QueryType.TIME_SERIES_LIST,\n        timeSeriesList: {\n          ...rest,\n          view: rest.view || 'FULL',\n        },\n      };\n    }\n\n    if (has(query, 'metricQuery') && ['metrics', QueryType.ANNOTATION].includes(query.queryType ?? '')) {\n      const metricQuery: MetricQuery = get(query, 'metricQuery')!;\n      if (metricQuery.editorMode === 'mql') {\n        query.timeSeriesQuery = {\n          projectName: metricQuery.projectName,\n          query: metricQuery.query,\n          graphPeriod: metricQuery.graphPeriod,\n        };\n        query.queryType = QueryType.TIME_SERIES_QUERY;\n      } else {\n        query.timeSeriesList = {\n          projectName: metricQuery.projectName,\n          crossSeriesReducer: metricQuery.crossSeriesReducer,\n          alignmentPeriod: metricQuery.alignmentPeriod,\n          perSeriesAligner: metricQuery.perSeriesAligner,\n          groupBys: metricQuery.groupBys,\n          filters: metricQuery.filters,\n          view: metricQuery.view,\n          preprocessor: metricQuery.preprocessor,\n        };\n        query.queryType = QueryType.TIME_SERIES_LIST;\n        if (metricQuery.metricType) {\n          query.timeSeriesList.filters = this.migrateMetricTypeFilter(\n            metricQuery.metricType,\n            query.timeSeriesList.filters\n          );\n        }\n      }\n      query.aliasBy = metricQuery.aliasBy;\n      query = omit(query, 'metricQuery');\n    }\n\n    if (query.queryType === QueryType.SLO && has(query, 'sloQuery.aliasBy')) {\n      query.aliasBy = get(query, 'sloQuery.aliasBy');\n      query = omit(query, 'sloQuery.aliasBy');\n    }\n\n    return query;\n  }\n\n  interpolateProps<T extends Record<string, any>>(object: T, scopedVars: ScopedVars = {}): T {\n    return Object.entries(object).reduce((acc, [key, value]) => {\n      return {\n        ...acc,\n        [key]: value && isString(value) ? this.templateSrv.replace(value, scopedVars) : value,\n      };\n    }, {} as T);\n  }\n\n  filterQuery(query: CloudMonitoringQuery): boolean {\n    if (query.hide) {\n      return false;\n    }\n\n    if (query.queryType === QueryType.SLO) {\n      if (!query.sloQuery) {\n        return false;\n      }\n      const { selectorName, serviceId, sloId, projectName, lookbackPeriod } = query.sloQuery;\n      return (\n        !!selectorName &&\n        !!serviceId &&\n        !!sloId &&\n        !!projectName &&\n        (selectorName !== SLO_BURN_RATE_SELECTOR_NAME || !!lookbackPeriod)\n      );\n    }\n\n    if (query.queryType === QueryType.TIME_SERIES_QUERY) {\n      return !!query.timeSeriesQuery && !!query.timeSeriesQuery.projectName && !!query.timeSeriesQuery.query;\n    }\n\n    if (query.queryType && [QueryType.TIME_SERIES_LIST, QueryType.ANNOTATION].includes(query.queryType)) {\n      return !!query.timeSeriesList && !!query.timeSeriesList.projectName && !!getMetricType(query.timeSeriesList);\n    }\n\n    if (query.queryType === QueryType.PROMQL) {\n      return (\n        !!query.promQLQuery && !!query.promQLQuery.projectName && !!query.promQLQuery.expr && !!query.promQLQuery.step\n      );\n    }\n\n    return false;\n  }\n\n  interpolateVariablesInQueries(queries: CloudMonitoringQuery[], scopedVars: ScopedVars): CloudMonitoringQuery[] {\n    return queries.map(\n      (query) => this.applyTemplateVariables(this.migrateQuery(query), scopedVars) as CloudMonitoringQuery\n    );\n  }\n\n  interpolateFilters(filters: string[], scopedVars: ScopedVars) {\n    const completeFilter: Filter[] = chunk(filters, 4)\n      .map(([key, operator, value, condition]) => ({\n        key,\n        operator,\n        value,\n        ...(condition && { condition }),\n      }))\n      .filter((item) => item.value);\n\n    const filterArray = flatten(\n      completeFilter.map(({ key, operator, value, condition }: Filter) => [\n        this.templateSrv.replace(key, scopedVars || {}),\n        operator,\n        this.templateSrv.replace(value, scopedVars || {}, (value: string | string[]) => {\n          return isArray(value) && value.length ? `(${value.join('|')})` : value;\n        }),\n        ...(condition ? [condition] : []),\n      ])\n    );\n\n    return filterArray || [];\n  }\n\n  interpolateGroupBys(groupBys: string[], scopedVars: {}): string[] {\n    let interpolatedGroupBys: string[] = [];\n    (groupBys || []).forEach((gb) => {\n      const interpolated = this.templateSrv.replace(gb, scopedVars || {}, 'csv').split(',');\n      if (Array.isArray(interpolated)) {\n        interpolatedGroupBys = interpolatedGroupBys.concat(interpolated);\n      } else {\n        interpolatedGroupBys.push(interpolated);\n      }\n    });\n    return interpolatedGroupBys;\n  }\n}\n","import { reportInteraction } from '@grafana/runtime';\n\n/**\n * Loaded the first time a dashboard containing Cloudmonitoring queries is loaded (not on every render)\n * Note: The queries used here are the ones pre-migration and pre-filterQuery\n */\nexport const trackCloudMonitoringDashboardLoaded = (props: CloudMonitoringDashboardLoadedProps) => {\n  reportInteraction('grafana_ds_cloudmonitoring_dashboard_loaded', props);\n};\n\nexport type CloudMonitoringDashboardLoadedProps = {\n  grafana_version?: string;\n  dashboard_id: string;\n  org_id?: number;\n  /** number of non hidden queries of type TimeSeriesQuery (MQL) if any  */\n  mql_queries: number;\n  /** number of non hidden queries of type TimeSeriesFilter (Builder) if any  */\n  time_series_filter_queries: number;\n  /** number of non hidden queries of type SLO if any  */\n  slo_queries: number;\n  /** number of non hidden queries of type annotation if any  */\n  annotation_queries: number;\n  /** number of non hidden queries of type PromQL if any  */\n  promQL_queries: number;\n};\n","import { get } from 'lodash';\n\nimport { DataSourcePlugin, DashboardLoadedEvent } from '@grafana/data';\nimport { getAppEvents } from '@grafana/runtime';\n\nimport CloudMonitoringCheatSheet from './components/CloudMonitoringCheatSheet';\nimport { ConfigEditor } from './components/ConfigEditor/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\nimport CloudMonitoringDatasource from './datasource';\nimport pluginJson from './plugin.json';\nimport { trackCloudMonitoringDashboardLoaded } from './tracking';\nimport { CloudMonitoringQuery, QueryType } from './types/query';\n\nexport const plugin = new DataSourcePlugin<CloudMonitoringDatasource, CloudMonitoringQuery>(CloudMonitoringDatasource)\n  .setQueryEditorHelp(CloudMonitoringCheatSheet)\n  .setQueryEditor(QueryEditor)\n  .setConfigEditor(ConfigEditor)\n  .setVariableQueryEditor(CloudMonitoringVariableQueryEditor);\n\n// Track dashboard loads to RudderStack\ngetAppEvents().subscribe<DashboardLoadedEvent<CloudMonitoringQuery>>(\n  DashboardLoadedEvent,\n  ({ payload: { dashboardId, orgId, grafanaVersion, queries } }) => {\n    const cloudmonitorQueries = queries[pluginJson.id];\n    let stats = {\n      [QueryType.TIME_SERIES_QUERY]: 0,\n      [QueryType.TIME_SERIES_LIST]: 0,\n      [QueryType.SLO]: 0,\n      [QueryType.ANNOTATION]: 0,\n      [QueryType.PROMQL]: 0,\n    };\n    cloudmonitorQueries.forEach((query) => {\n      if (\n        query.queryType === QueryType.TIME_SERIES_QUERY ||\n        query.queryType === QueryType.TIME_SERIES_LIST ||\n        query.queryType === QueryType.SLO ||\n        query.queryType === QueryType.ANNOTATION ||\n        query.queryType === QueryType.PROMQL\n      ) {\n        stats[query.queryType]++;\n      } else if (query.queryType === 'metrics') {\n        if (query.hasOwnProperty('type') && get(query, 'type') === 'annotationQuery') {\n          stats.annotation++;\n        }\n        if (get(query, 'metricQuery.editorMode') === 'mql') {\n          stats.timeSeriesQuery++;\n        } else {\n          stats.timeSeriesList++;\n        }\n      }\n    });\n\n    if (cloudmonitorQueries && cloudmonitorQueries.length > 0) {\n      trackCloudMonitoringDashboardLoaded({\n        grafana_version: grafanaVersion,\n        dashboard_id: dashboardId,\n        org_id: orgId,\n        mql_queries: stats[QueryType.TIME_SERIES_QUERY],\n        time_series_filter_queries: stats[QueryType.TIME_SERIES_LIST],\n        slo_queries: stats[QueryType.SLO],\n        annotation_queries: stats[QueryType.ANNOTATION],\n        promQL_queries: stats[QueryType.PROMQL],\n      });\n    }\n  }\n);\n"],"names":["EditorHeader","children","styles","getStyles","theme","FlexItem","grow","shrink","__defProp","__defProps","__getOwnPropDescs","__getOwnPropSymbols","__hasOwnProp","__propIsEnum","__defNormalProp","obj","key","value","__spreadValues","a","b","prop","__spreadProps","__objRest","source","exclude","target","InlineSelect","_a","_b","labelProp","props","getSelectStyles","id","components","SelectContainer","ValueContainer","className","e","t","n","l","o","i","r","s","c","u","d","p","f","m","g","h","y","E","v","T","j","k","J","C","O","P","exports","module","CloudMonitoringCheatSheet","ConfigEditor","options","onOptionsChange","DataSourceDescription","Divider","config","ConfigSection","SecureSocksProxySettings","QueryType","defaultTimeSeriesList","PreprocessorType","defaultMetricQuery","MetricKind","ValueTypes","AlignmentTypes","defaultLegacyCloudMonitoringAnnotationQuery","MetricFindQueryTypes","Project","refId","projectName","datasource","onChange","templateVariableOptions","projects","setProjects","projectsWithTemplateVariables","EditorField","Select","defaultQuery","dataSource","PromQLQueryEditor","query","variableOptionGroup","onRunQuery","onReturnKeyDown","EditorRow","TextArea","Input","INPUT_WIDTH","LABEL_WIDTH","INNER_LABEL_WIDTH","SELECT_WIDTH","ALIGNMENTS","AGGREGATIONS","ALIGNMENT_PERIODS","GRAPH_PERIODS","LOOKBACK_PERIODS","SYSTEM_LABELS","SLO_BURN_RATE_SELECTOR_NAME","SELECTORS","QUERY_TYPES","QueryHeader","queryType","extractServicesFromMetricDescriptors","metricDescriptors","getMetricTypesByService","service","getMetricTypes","metricType","interpolatedMetricType","selectedService","metricTypes","metricTypeExistInArray","metricTypeByService","getAlignmentOptionsByMetric","metricValueType","metricKind","preprocessor","getAggregationOptionsByMetric","valueType","getLabelKeys","selectedMetricType","labels","getAlignmentPickerData","perSeriesAligner","templateSrv","alignOptions","option","labelsToGroupedOptions","groupBys","groups","acc","curr","arr","group","label","stringArrayToFilters","filterArray","operator","condition","alignmentPeriodLabel","customMetaData","alignmentPeriod","alignment","ap","seconds","getMetricType","metricTypeKey","setMetricType","AliasBy","alias","setAlias","propagateOnChange","LookbackPeriodSelect","current","lp","op","visibleOptions","PeriodSelect","inputId","disabled","aligmentPeriods","SLO","slos","setSLOs","serviceId","sloIds","sloId","sloName","slo","Selector","selectorName","Service","services","setServices","serviceName","SLOQueryEditor","aliasBy","onChangeAliasBy","alignmentLabel","lookbackPeriod","EditorFieldGroup","period","Aggregation","aggOptions","useAggregationOptionsByMetric","selected","useSelectedFromOptions","metricDescriptor","GroupBy","crossSeriesReducer","AlignmentFunction","psa","Alignment","q","DEFAULT_OPERATOR","DEFAULT_CONDITION","filtersToStringArray","filters","operators","protectedFilterKeys","LabelFilter","_onChange","rawFilters","protectedFilters","getOptions","opp","valueOptions","items","renderItem","item","onChangeItem","onDeleteItem","AccessoryButton","EditorList","AnnotationsHelp","GraphPeriod","graphPeriod","Switch","MQLQueryEditor","onKeyDown","event","NONE_OPTION","Preprocessor","useOptions","RadioButtonGroup","Editor","setLabels","setMetricDescriptors","setMetricDescriptor","metrics","setMetrics","setService","timeRange","setTimeRange","time","selectStyles","customStyle","getSelectedMetricDescriptor","md","getServicesList","selectedMetricDescriptor","onServiceChange","onMetricTypeChange","filterMetrics","filter","filtered","debounceFilter","VisualMetricQueryEditor","defaultTimeSeriesQuery","onQueryChange","onChangeTimeSeriesList","timeSeriesList","onChangeTimeSeriesQuery","timeSeriesQuery","EditorRows","Stack","MetricQueryEditor","VariableQueryField","allowCustomValue","InlineField","QueryEditor","oldQ","migrated","setMigrated","migratedQuery","sloQuery","onSLOQueryChange","promQLQuery","onPromQLQueryChange","CloudMonitoringVariableQueryEditor","queryModel","sloServices","state","labelKey","prevProps","prevState","selecQueryTypeChanged","selectSLOServiceChanged","selectedQueryType","result","name","AnnotationQueryEditor","data","title","setTitle","text","setText","handleTitleChange","handleTextChange","useDebounce","isLegacyCloudMonitoringAnnotation","CloudMonitoringAnnotationSupport","ds","enable","iconColor","anno","CloudMonitoringMetricFindQuery","error","interpolatedKey","descriptor","selectedSLOService","x","CloudMonitoringVariableSupport","request","executeObservable","from","mergeMap","map","CloudMonitoringDatasource","DataSourceWithBackend","instanceSettings","timeSrv","scopedVars","aggregation","queries","lastValueFrom","of","defaultProject","authenticationType","gceDefaultProject","metricTypeFilterArray","hide","maxLines","metric","intervalMs","type","rest","metricQuery","object","completeFilter","interpolatedGroupBys","gb","interpolated","trackCloudMonitoringDashboardLoaded","dashboardId","orgId","grafanaVersion","cloudmonitorQueries","stats"],"sourceRoot":""}