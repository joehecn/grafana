{"version":3,"file":"heatmapPanel.js","mappings":"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","sources":["webpack://GrafanaToWebComponent/./public/app/core/components/ColorScale/ColorScale.tsx","webpack://GrafanaToWebComponent/./public/app/features/transformers/calculateHeatmap/editor/AxisEditor.tsx","webpack://GrafanaToWebComponent/./public/app/features/transformers/calculateHeatmap/editor/helper.ts","webpack://GrafanaToWebComponent/./public/app/features/transformers/calculateHeatmap/utils.ts","webpack://GrafanaToWebComponent/./public/app/features/transformers/calculateHeatmap/heatmap.ts","webpack://GrafanaToWebComponent/./public/app/plugins/panel/heatmap/HeatmapHoverView.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/panel/heatmap/utils.ts","webpack://GrafanaToWebComponent/./public/app/plugins/panel/heatmap/fields.ts","webpack://GrafanaToWebComponent/./public/app/plugins/panel/heatmap/panelcfg.gen.ts","webpack://GrafanaToWebComponent/./public/app/plugins/panel/heatmap/types.ts","webpack://GrafanaToWebComponent/./public/app/plugins/panel/heatmap/palettes.ts","webpack://GrafanaToWebComponent/./public/app/plugins/panel/heatmap/HeatmapPanel.tsx","webpack://GrafanaToWebComponent/./public/app/plugins/panel/heatmap/migrations.ts","webpack://GrafanaToWebComponent/./public/app/plugins/panel/heatmap/suggestions.ts","webpack://GrafanaToWebComponent/./public/app/plugins/panel/heatmap/module.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState, useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\ntype Props = {\n  colorPalette: string[];\n  min: number;\n  max: number;\n\n  // Show a value as string -- when not defined, the raw values will not be shown\n  display?: (v: number) => string;\n  hoverValue?: number;\n  useStopsPercentage?: boolean;\n};\n\ntype HoverState = {\n  isShown: boolean;\n  value: number;\n};\n\nconst GRADIENT_STOPS = 10;\n\nexport const ColorScale = ({ colorPalette, min, max, display, hoverValue, useStopsPercentage }: Props) => {\n  const [colors, setColors] = useState<string[]>([]);\n  const [scaleHover, setScaleHover] = useState<HoverState>({ isShown: false, value: 0 });\n  const [percent, setPercent] = useState<number | null>(null); // 0-100 for CSS percentage\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, colors);\n\n  useEffect(() => {\n    setColors(getGradientStops({ colorArray: colorPalette, stops: GRADIENT_STOPS, useStopsPercentage }));\n  }, [colorPalette, useStopsPercentage]);\n\n  const onScaleMouseMove = (event: React.MouseEvent<HTMLDivElement>) => {\n    const divOffset = event.nativeEvent.offsetX;\n    const offsetWidth = event.currentTarget.offsetWidth;\n    const normPercentage = Math.floor((divOffset * 100) / offsetWidth + 1);\n    const scaleValue = Math.floor(((max - min) * normPercentage) / 100 + min);\n\n    setScaleHover({ isShown: true, value: scaleValue });\n    setPercent(normPercentage);\n  };\n\n  const onScaleMouseLeave = () => {\n    setScaleHover({ isShown: false, value: 0 });\n  };\n\n  useEffect(() => {\n    setPercent(hoverValue == null ? null : clampPercent100((hoverValue - min) / (max - min)));\n  }, [hoverValue, min, max]);\n\n  return (\n    <div className={styles.scaleWrapper} onMouseMove={onScaleMouseMove} onMouseLeave={onScaleMouseLeave}>\n      <div className={styles.scaleGradient}>\n        {display && (scaleHover.isShown || hoverValue !== undefined) && (\n          <div className={styles.followerContainer}>\n            <div className={styles.follower} style={{ left: `${percent}%` }} />\n          </div>\n        )}\n      </div>\n      {display && (\n        <div className={styles.followerContainer}>\n          <div className={styles.legendValues}>\n            <span>{display(min)}</span>\n            <span>{display(max)}</span>\n          </div>\n          {percent != null && (scaleHover.isShown || hoverValue !== undefined) && (\n            <span className={styles.hoverValue} style={{ left: `${percent}%` }}>\n              {display(hoverValue ?? scaleHover.value)}\n            </span>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getGradientStops = ({\n  colorArray,\n  stops,\n  useStopsPercentage = true,\n}: {\n  colorArray: string[];\n  stops: number;\n  useStopsPercentage?: boolean;\n}): string[] => {\n  const colorCount = colorArray.length;\n  if (useStopsPercentage && colorCount <= 20) {\n    const incr = (1 / colorCount) * 100;\n    let per = 0;\n    const stops: string[] = [];\n    for (const color of colorArray) {\n      if (per > 0) {\n        stops.push(`${color} ${per}%`);\n      } else {\n        stops.push(color);\n      }\n      per += incr;\n      stops.push(`${color} ${per}%`);\n    }\n    return stops;\n  }\n\n  const gradientEnd = colorArray[colorCount - 1];\n  const skip = Math.ceil(colorCount / stops);\n  const gradientStops = new Set<string>();\n\n  for (let i = 0; i < colorCount; i += skip) {\n    gradientStops.add(colorArray[i]);\n  }\n\n  gradientStops.add(gradientEnd);\n\n  return [...gradientStops];\n};\n\nfunction clampPercent100(v: number) {\n  if (v > 1) {\n    return 100;\n  }\n  if (v < 0) {\n    return 0;\n  }\n  return v * 100;\n}\n\nconst getStyles = (theme: GrafanaTheme2, colors: string[]) => ({\n  scaleWrapper: css`\n    width: 100%;\n    font-size: 11px;\n    opacity: 1;\n  `,\n  scaleGradient: css`\n    background: linear-gradient(90deg, ${colors.join()});\n    height: 10px;\n    pointer-events: none;\n  `,\n  legendValues: css`\n    display: flex;\n    justify-content: space-between;\n    pointer-events: none;\n  `,\n  hoverValue: css`\n    position: absolute;\n    margin-top: -14px;\n    padding: 3px 15px;\n    background: ${theme.colors.background.primary};\n    transform: translateX(-50%);\n  `,\n  followerContainer: css`\n    position: relative;\n    pointer-events: none;\n    white-space: nowrap;\n  `,\n  follower: css`\n    position: absolute;\n    height: 14px;\n    width: 14px;\n    border-radius: 50%;\n    transform: translateX(-50%) translateY(-50%);\n    border: 2px solid ${theme.colors.text.primary};\n    margin-top: 5px;\n  `,\n});\n","import React from 'react';\n\nimport { SelectableValue, StandardEditorProps } from '@grafana/data';\nimport { HeatmapCalculationBucketConfig, HeatmapCalculationMode } from '@grafana/schema';\nimport { HorizontalGroup, Input, RadioButtonGroup, ScaleDistribution } from '@grafana/ui';\n\nconst modeOptions: Array<SelectableValue<HeatmapCalculationMode>> = [\n  {\n    label: 'Size',\n    value: HeatmapCalculationMode.Size,\n    description: 'Split the buckets based on size',\n  },\n  {\n    label: 'Count',\n    value: HeatmapCalculationMode.Count,\n    description: 'Split the buckets based on count',\n  },\n];\n\nconst logModeOptions: Array<SelectableValue<HeatmapCalculationMode>> = [\n  {\n    label: 'Split',\n    value: HeatmapCalculationMode.Size,\n    description: 'Split the buckets based on size',\n  },\n];\n\nexport const AxisEditor = ({ value, onChange, item }: StandardEditorProps<HeatmapCalculationBucketConfig>) => {\n  return (\n    <HorizontalGroup>\n      <RadioButtonGroup\n        value={value?.mode || HeatmapCalculationMode.Size}\n        options={value?.scale?.type === ScaleDistribution.Log ? logModeOptions : modeOptions}\n        onChange={(mode) => {\n          onChange({\n            ...value,\n            mode,\n          });\n        }}\n      />\n      <Input\n        value={value?.value ?? ''}\n        placeholder=\"Auto\"\n        onChange={(v) => {\n          onChange({\n            ...value,\n            value: v.currentTarget.value,\n          });\n        }}\n      />\n    </HorizontalGroup>\n  );\n};\n","import { PanelOptionsEditorBuilder } from '@grafana/data';\nimport { ScaleDistribution, HeatmapCalculationMode, HeatmapCalculationOptions } from '@grafana/schema';\nimport { ScaleDistributionEditor } from '@grafana/ui/src/options/builder';\n\nimport { AxisEditor } from './AxisEditor';\n\nexport function addHeatmapCalculationOptions(\n  prefix: string,\n  builder: PanelOptionsEditorBuilder<any>,\n  source?: HeatmapCalculationOptions,\n  category?: string[]\n) {\n  builder.addCustomEditor({\n    id: 'xBuckets',\n    path: `${prefix}xBuckets`,\n    name: 'X Bucket',\n    editor: AxisEditor,\n    category,\n    defaultValue: {\n      mode: HeatmapCalculationMode.Size,\n    },\n  });\n\n  builder.addCustomEditor({\n    id: 'yBuckets',\n    path: `${prefix}yBuckets`,\n    name: 'Y Bucket',\n    editor: AxisEditor,\n    category,\n    defaultValue: {\n      mode: HeatmapCalculationMode.Size,\n    },\n  });\n\n  builder.addCustomEditor({\n    id: 'yBuckets-scale',\n    path: `${prefix}yBuckets.scale`,\n    name: 'Y Bucket scale',\n    category,\n    editor: ScaleDistributionEditor,\n    defaultValue: { type: ScaleDistribution.Linear },\n  });\n}\n","import { guessDecimals, roundDecimals } from '@grafana/data';\n\nconst { abs, pow } = Math;\n\nexport const fixedDec = new Map();\n\nexport function genIncrs(base: number, minExp: number, maxExp: number, mults: number[]) {\n  let incrs = [];\n\n  let multDec = mults.map(guessDecimals);\n\n  for (let exp = minExp; exp < maxExp; exp++) {\n    let expa = abs(exp);\n    let mag = roundDecimals(pow(base, exp), expa);\n\n    for (let i = 0; i < mults.length; i++) {\n      let _incr = mults[i] * mag;\n      let dec = (_incr >= 0 && exp >= 0 ? 0 : expa) + (exp >= multDec[i] ? 0 : multDec[i]);\n      let incr = roundDecimals(_incr, dec);\n      incrs.push(incr);\n      fixedDec.set(incr, dec);\n    }\n  }\n\n  return incrs;\n}\n\nconst onlyWhole = (v: number) => v % 1 === 0;\n\nconst allMults = [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5];\n\n// ...0.01, 0.02, 0.025, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5...\nexport const decIncrs = genIncrs(10, -16, 0, allMults);\n\n// 1, 2, 2.5, 3, 4, 5, 6, 7, 8, 9, 10, 20, 25, 30, 40, 50...\nexport const oneIncrs = genIncrs(10, 0, 16, allMults);\n\n// 1, 2,      3, 4, 5, 10, 20, 25, 50...\nexport const wholeIncrs = oneIncrs.filter(onlyWhole);\n\nexport const numIncrs = decIncrs.concat(oneIncrs);\n\nexport const niceLinearIncrs = decIncrs.concat(wholeIncrs);\n\nconst sec = 1 * 1e3;\nconst min = 60 * sec;\nconst hour = 60 * min;\nconst day = 24 * hour;\nconst year = 365 * day;\n\n// in milliseconds\nexport const niceTimeIncrs = [\n  1,\n  2,\n  4,\n  5,\n  10,\n  20,\n  25,\n  40,\n  50,\n  100,\n  200,\n  250,\n  400,\n  500,\n\n  sec,\n  2 * sec,\n  4 * sec,\n  5 * sec,\n  10 * sec,\n  15 * sec,\n  20 * sec,\n  30 * sec,\n\n  min,\n  2 * min,\n  4 * min,\n  5 * min,\n  10 * min,\n  15 * min,\n  20 * min,\n  30 * min,\n\n  hour,\n  2 * hour,\n  4 * hour,\n  6 * hour,\n  8 * hour,\n  12 * hour,\n  18 * hour,\n\n  day,\n  2 * day,\n  3 * day,\n  4 * day,\n  5 * day,\n  6 * day,\n  7 * day,\n  10 * day,\n  15 * day,\n  30 * day,\n  45 * day,\n  60 * day,\n  90 * day,\n  180 * day,\n\n  year,\n  2 * year,\n  3 * year,\n  4 * year,\n  5 * year,\n  6 * year,\n  7 * year,\n  8 * year,\n  9 * year,\n  10 * year,\n];\n","import { map } from 'rxjs';\n\nimport {\n  DataFrame,\n  DataTransformerID,\n  FieldType,\n  incrRoundUp,\n  incrRoundDn,\n  SynchronousDataTransformerInfo,\n  DataFrameType,\n  getFieldDisplayName,\n  Field,\n  getValueFormat,\n  formattedValueToString,\n  durationToMilliseconds,\n  parseDuration,\n} from '@grafana/data';\nimport { isLikelyAscendingVector } from '@grafana/data/src/transformations/transformers/joinDataFrames';\nimport {\n  ScaleDistribution,\n  HeatmapCellLayout,\n  HeatmapCalculationMode,\n  HeatmapCalculationOptions,\n} from '@grafana/schema';\n\nimport { niceLinearIncrs, niceTimeIncrs } from './utils';\n\nexport interface HeatmapTransformerOptions extends HeatmapCalculationOptions {\n  /** the raw values will still exist in results after transformation */\n  keepOriginalData?: boolean;\n}\n\nexport const heatmapTransformer: SynchronousDataTransformerInfo<HeatmapTransformerOptions> = {\n  id: DataTransformerID.heatmap,\n  name: 'Create heatmap',\n  description: 'Generate heatmap data from source data.',\n  defaultOptions: {},\n\n  operator: (options, ctx) => (source) =>\n    source.pipe(map((data) => heatmapTransformer.transformer(options, ctx)(data))),\n\n  transformer: (options: HeatmapTransformerOptions) => {\n    return (data: DataFrame[]) => {\n      const v = calculateHeatmapFromData(data, options);\n      if (options.keepOriginalData) {\n        return [v, ...data];\n      }\n      return [v];\n    };\n  },\n};\n\nfunction parseNumeric(v?: string | null) {\n  return v === '+Inf' ? Infinity : v === '-Inf' ? -Infinity : +(v ?? 0);\n}\n\nexport function sortAscStrInf(aName?: string | null, bName?: string | null) {\n  return parseNumeric(aName) - parseNumeric(bName);\n}\n\nexport interface HeatmapRowsCustomMeta {\n  /** This provides the lookup values */\n  yOrdinalDisplay: string[];\n  yOrdinalLabel?: string[];\n  yMatchWithLabel?: string;\n  yMinDisplay?: string;\n}\n\n/** simple utility to get heatmap metadata from a frame */\nexport function readHeatmapRowsCustomMeta(frame?: DataFrame): HeatmapRowsCustomMeta {\n  return (frame?.meta?.custom ?? {}) as HeatmapRowsCustomMeta;\n}\n\nexport function isHeatmapCellsDense(frame: DataFrame) {\n  let foundY = false;\n\n  for (let field of frame.fields) {\n    // dense heatmap frames can only have one of these fields\n    switch (field.name) {\n      case 'y':\n      case 'yMin':\n      case 'yMax':\n        if (foundY) {\n          return false;\n        }\n\n        foundY = true;\n    }\n  }\n\n  return foundY;\n}\n\nexport interface RowsHeatmapOptions {\n  frame: DataFrame;\n  value?: string; // the field value name\n  unit?: string;\n  decimals?: number;\n  layout?: HeatmapCellLayout;\n}\n\n/** Given existing buckets, create a values style frame */\n// Assumes frames have already been sorted ASC and de-accumulated.\nexport function rowsToCellsHeatmap(opts: RowsHeatmapOptions): DataFrame {\n  // TODO: handle null-filling w/ fields[0].config.interval?\n  const xField = opts.frame.fields[0];\n  const xValues = xField.values;\n  const yFields = opts.frame.fields.filter((f, idx) => f.type === FieldType.number && idx > 0);\n\n  // similar to initBins() below\n  const len = xValues.length * yFields.length;\n  const xs = new Array(len);\n  const ys = new Array(len);\n  const counts2 = new Array(len);\n\n  const counts = yFields.map((field) => field.values.slice());\n\n  // transpose\n  counts.forEach((bucketCounts, bi) => {\n    for (let i = 0; i < bucketCounts.length; i++) {\n      counts2[counts.length * i + bi] = bucketCounts[i];\n    }\n  });\n\n  const bucketBounds = Array.from({ length: yFields.length }, (v, i) => i);\n\n  // fill flat/repeating array\n  for (let i = 0, yi = 0, xi = 0; i < len; yi = ++i % bucketBounds.length) {\n    ys[i] = bucketBounds[yi];\n\n    if (yi === 0 && i >= bucketBounds.length) {\n      xi++;\n    }\n\n    xs[i] = xValues[xi];\n  }\n\n  // this name determines whether cells are drawn above, below, or centered on the values\n  let ordinalFieldName = yFields[0].labels?.le != null ? 'yMax' : 'y';\n  switch (opts.layout) {\n    case HeatmapCellLayout.le:\n      ordinalFieldName = 'yMax';\n      break;\n    case HeatmapCellLayout.ge:\n      ordinalFieldName = 'yMin';\n      break;\n    case HeatmapCellLayout.unknown:\n      ordinalFieldName = 'y';\n      break;\n  }\n\n  const custom: HeatmapRowsCustomMeta = {\n    yOrdinalDisplay: yFields.map((f) => getFieldDisplayName(f, opts.frame)),\n    yMatchWithLabel: Object.keys(yFields[0].labels ?? {})[0],\n  };\n  if (custom.yMatchWithLabel) {\n    custom.yOrdinalLabel = yFields.map((f) => f.labels?.[custom.yMatchWithLabel!] ?? '');\n    if (custom.yMatchWithLabel === 'le') {\n      custom.yMinDisplay = '0.0';\n    }\n  }\n\n  // Format the labels as a value\n  // TODO: this leaves the internally prepended '0.0' without this formatting treatment\n  if (opts.unit?.length || opts.decimals != null) {\n    const fmt = getValueFormat(opts.unit ?? 'short');\n    if (custom.yMinDisplay) {\n      custom.yMinDisplay = formattedValueToString(fmt(0, opts.decimals));\n    }\n    custom.yOrdinalDisplay = custom.yOrdinalDisplay.map((name) => {\n      let num = +name;\n\n      if (!Number.isNaN(num)) {\n        return formattedValueToString(fmt(num, opts.decimals));\n      }\n\n      return name;\n    });\n  }\n\n  const valueCfg = {\n    ...yFields[0].config,\n  };\n\n  if (valueCfg.displayNameFromDS) {\n    delete valueCfg.displayNameFromDS;\n  }\n\n  return {\n    length: xs.length,\n    refId: opts.frame.refId,\n    meta: {\n      type: DataFrameType.HeatmapCells,\n      custom,\n    },\n    fields: [\n      {\n        name: xField.type === FieldType.time ? 'xMax' : 'x',\n        type: xField.type,\n        values: xs,\n        config: xField.config,\n      },\n      {\n        name: ordinalFieldName,\n        type: FieldType.number,\n        values: ys,\n        config: {\n          unit: 'short', // ordinal lookup\n        },\n      },\n      {\n        name: opts.value?.length ? opts.value : 'Value',\n        type: FieldType.number,\n        values: counts2,\n        config: valueCfg,\n        display: yFields[0].display,\n      },\n    ],\n  };\n}\n\n// Sorts frames ASC by numeric bucket name and de-accumulates values in each frame's Value field [1]\n// similar to Prometheus result_transformer.ts -> transformToHistogramOverTime()\nexport function prepBucketFrames(frames: DataFrame[]): DataFrame[] {\n  frames = frames.slice();\n\n  // sort ASC by frame.name (Prometheus bucket bound)\n  // or use frame.fields[1].config.displayNameFromDS ?\n  frames.sort((a, b) => sortAscStrInf(a.name, b.name));\n\n  // cumulative counts\n  const counts = frames.map((frame) => frame.fields[1].values.slice());\n\n  // de-accumulate\n  counts.reverse();\n  counts.forEach((bucketCounts, bi) => {\n    if (bi < counts.length - 1) {\n      for (let i = 0; i < bucketCounts.length; i++) {\n        bucketCounts[i] -= counts[bi + 1][i];\n      }\n    }\n  });\n  counts.reverse();\n\n  return frames.map((frame, i) => ({\n    ...frame,\n    fields: [\n      frame.fields[0],\n      {\n        ...frame.fields[1],\n        values: counts[i],\n      },\n    ],\n  }));\n}\n\nexport function calculateHeatmapFromData(frames: DataFrame[], options: HeatmapCalculationOptions): DataFrame {\n  //console.time('calculateHeatmapFromData');\n\n  // optimization\n  //let xMin = Infinity;\n  //let xMax = -Infinity;\n\n  let xField: Field | undefined = undefined;\n  let yField: Field | undefined = undefined;\n\n  let dataLen = 0;\n  // pre-allocate arrays\n  for (let frame of frames) {\n    // TODO: assumes numeric timestamps, ordered asc, without nulls\n    const x = frame.fields.find((f) => f.type === FieldType.time);\n    if (x) {\n      dataLen += frame.length;\n    }\n  }\n\n  let xs: number[] = Array(dataLen);\n  let ys: number[] = Array(dataLen);\n  let j = 0;\n\n  for (let frame of frames) {\n    // TODO: assumes numeric timestamps, ordered asc, without nulls\n    const x = frame.fields.find((f) => f.type === FieldType.time);\n    if (!x) {\n      continue;\n    }\n\n    if (!xField) {\n      xField = x; // the first X\n    }\n\n    const xValues = x.values;\n    for (let field of frame.fields) {\n      if (field !== x && field.type === FieldType.number) {\n        const yValues = field.values;\n\n        for (let i = 0; i < xValues.length; i++, j++) {\n          xs[j] = xValues[i];\n          ys[j] = yValues[i];\n        }\n\n        if (!yField) {\n          yField = field;\n        }\n      }\n    }\n  }\n\n  if (!xField || !yField) {\n    throw 'no heatmap fields found';\n  }\n\n  if (!xs.length || !ys.length) {\n    throw 'no values found';\n  }\n\n  const xBucketsCfg = options.xBuckets ?? {};\n  const yBucketsCfg = options.yBuckets ?? {};\n\n  if (xBucketsCfg.scale?.type === ScaleDistribution.Log) {\n    throw 'X axis only supports linear buckets';\n  }\n\n  const scaleDistribution = options.yBuckets?.scale ?? {\n    type: ScaleDistribution.Linear,\n  };\n\n  const heat2d = heatmap(xs, ys, {\n    xSorted: isLikelyAscendingVector(xs),\n    xTime: xField.type === FieldType.time,\n    xMode: xBucketsCfg.mode,\n    xSize:\n      xBucketsCfg.mode === HeatmapCalculationMode.Size\n        ? durationToMilliseconds(parseDuration(xBucketsCfg.value ?? ''))\n        : xBucketsCfg.value\n        ? +xBucketsCfg.value\n        : undefined,\n    yMode: yBucketsCfg.mode,\n    ySize: yBucketsCfg.value ? +yBucketsCfg.value : undefined,\n    yLog: scaleDistribution?.type === ScaleDistribution.Log ? (scaleDistribution?.log as any) : undefined,\n  });\n\n  const frame = {\n    length: heat2d.x.length,\n    name: getFieldDisplayName(yField),\n    meta: {\n      type: DataFrameType.HeatmapCells,\n    },\n    fields: [\n      {\n        name: 'xMin',\n        type: xField.type,\n        values: heat2d.x,\n        config: xField.config,\n      },\n      {\n        name: 'yMin',\n        type: FieldType.number,\n        values: heat2d.y,\n        config: {\n          ...yField.config, // keep units from the original source\n          custom: {\n            scaleDistribution,\n          },\n        },\n      },\n      {\n        name: 'Count',\n        type: FieldType.number,\n        values: heat2d.count,\n        config: {\n          unit: 'short', // always integer\n        },\n      },\n    ],\n  };\n\n  //console.timeEnd('calculateHeatmapFromData');\n  return frame;\n}\n\ninterface HeatmapOpts {\n  // default is 10% of data range, snapped to a \"nice\" increment\n  xMode?: HeatmapCalculationMode;\n  yMode?: HeatmapCalculationMode;\n  xSize?: number;\n  ySize?: number;\n\n  // use Math.ceil instead of Math.floor for bucketing\n  xCeil?: boolean;\n  yCeil?: boolean;\n\n  // log2 or log10 buckets\n  xLog?: 2 | 10;\n  yLog?: 2 | 10;\n\n  xTime?: boolean;\n  yTime?: boolean;\n\n  // optimization hints for known data ranges (sorted, pre-scanned, etc)\n  xMin?: number;\n  xMax?: number;\n  yMin?: number;\n  yMax?: number;\n\n  xSorted?: boolean;\n  ySorted?: boolean;\n}\n\n// TODO: handle NaN, Inf, -Inf, null, undefined values in xs & ys\nfunction heatmap(xs: number[], ys: number[], opts?: HeatmapOpts) {\n  let len = xs.length;\n\n  let xSorted = opts?.xSorted ?? false;\n  let ySorted = opts?.ySorted ?? false;\n\n  // find x and y limits to pre-compute buckets struct\n  let minX = xSorted ? xs[0] : Infinity;\n  let minY = ySorted ? ys[0] : Infinity;\n  let maxX = xSorted ? xs[len - 1] : -Infinity;\n  let maxY = ySorted ? ys[len - 1] : -Infinity;\n\n  let yExp = opts?.yLog;\n\n  for (let i = 0; i < len; i++) {\n    if (!xSorted) {\n      minX = Math.min(minX, xs[i]);\n      maxX = Math.max(maxX, xs[i]);\n    }\n\n    if (!ySorted) {\n      if (!yExp || ys[i] > 0) {\n        minY = Math.min(minY, ys[i]);\n        maxY = Math.max(maxY, ys[i]);\n      }\n    }\n  }\n\n  //let scaleX = opts?.xLog === 10 ? Math.log10 : opts?.xLog === 2 ? Math.log2 : (v: number) => v;\n  //let scaleY = opts?.yLog === 10 ? Math.log10 : opts?.yLog === 2 ? Math.log2 : (v: number) => v;\n\n  let xBinIncr = opts?.xSize ?? 0;\n  let yBinIncr = opts?.ySize ?? 0;\n  let xMode = opts?.xMode;\n  let yMode = opts?.yMode;\n\n  // fall back to 10 buckets if invalid settings\n  if (!Number.isFinite(xBinIncr) || xBinIncr <= 0) {\n    xMode = HeatmapCalculationMode.Count;\n    xBinIncr = 20;\n  }\n  if (!Number.isFinite(yBinIncr) || yBinIncr <= 0) {\n    yMode = HeatmapCalculationMode.Count;\n    yBinIncr = 10;\n  }\n\n  if (xMode === HeatmapCalculationMode.Count) {\n    // TODO: optionally use view range min/max instead of data range for bucket sizing\n    let approx = (maxX - minX) / Math.max(xBinIncr - 1, 1);\n    // nice-ify\n    let xIncrs = opts?.xTime ? niceTimeIncrs : niceLinearIncrs;\n    let xIncrIdx = xIncrs.findIndex((bucketSize) => bucketSize > approx) - 1;\n    xBinIncr = xIncrs[Math.max(xIncrIdx, 0)];\n  }\n\n  if (yMode === HeatmapCalculationMode.Count) {\n    // TODO: optionally use view range min/max instead of data range for bucket sizing\n    let approx = (maxY - minY) / Math.max(yBinIncr - 1, 1);\n    // nice-ify\n    let yIncrs = opts?.yTime ? niceTimeIncrs : niceLinearIncrs;\n    let yIncrIdx = yIncrs.findIndex((bucketSize) => bucketSize > approx) - 1;\n    yBinIncr = yIncrs[Math.max(yIncrIdx, 0)];\n  }\n\n  // console.log({\n  //   yBinIncr,\n  //   xBinIncr,\n  // });\n\n  let binX = opts?.xCeil ? (v: number) => incrRoundUp(v, xBinIncr) : (v: number) => incrRoundDn(v, xBinIncr);\n  let binY = opts?.yCeil ? (v: number) => incrRoundUp(v, yBinIncr) : (v: number) => incrRoundDn(v, yBinIncr);\n\n  if (yExp) {\n    yBinIncr = 1 / (opts?.ySize ?? 1); // sub-divides log exponents\n    let yLog = yExp === 2 ? Math.log2 : Math.log10;\n    binY = opts?.yCeil ? (v: number) => incrRoundUp(yLog(v), yBinIncr) : (v: number) => incrRoundDn(yLog(v), yBinIncr);\n  }\n\n  let minXBin = binX(minX);\n  let maxXBin = binX(maxX);\n  let minYBin = binY(minY);\n  let maxYBin = binY(maxY);\n\n  let xBinQty = Math.round((maxXBin - minXBin) / xBinIncr) + 1;\n  let yBinQty = Math.round((maxYBin - minYBin) / yBinIncr) + 1;\n\n  let [xs2, ys2, counts] = initBins(xBinQty, yBinQty, minXBin, xBinIncr, minYBin, yBinIncr, yExp);\n\n  for (let i = 0; i < len; i++) {\n    if (yExp && ys[i] <= 0) {\n      continue;\n    }\n\n    const xi = (binX(xs[i]) - minXBin) / xBinIncr;\n    const yi = (binY(ys[i]) - minYBin) / yBinIncr;\n    const ci = xi * yBinQty + yi;\n\n    counts[ci]++;\n  }\n\n  return {\n    x: xs2,\n    y: ys2,\n    count: counts,\n  };\n}\n\nfunction initBins(xQty: number, yQty: number, xMin: number, xIncr: number, yMin: number, yIncr: number, yExp?: number) {\n  const len = xQty * yQty;\n  const xs = new Array<number>(len);\n  const ys = new Array<number>(len);\n  const counts = new Array<number>(len);\n\n  for (let i = 0, yi = 0, x = xMin; i < len; yi = ++i % yQty) {\n    counts[i] = 0;\n\n    if (yExp) {\n      ys[i] = yExp ** (yMin + yi * yIncr);\n    } else {\n      ys[i] = yMin + yi * yIncr;\n    }\n\n    if (yi === 0 && i >= yQty) {\n      x += xIncr;\n    }\n\n    xs[i] = x;\n  }\n\n  return [xs, ys, counts];\n}\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport {\n  DataFrameType,\n  Field,\n  FieldType,\n  formattedValueToString,\n  getFieldDisplayName,\n  LinkModel,\n  TimeRange,\n  getLinksSupplier,\n  InterpolateFunction,\n  ScopedVars,\n} from '@grafana/data';\nimport { HeatmapCellLayout } from '@grafana/schema';\nimport { LinkButton, VerticalGroup } from '@grafana/ui';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { DataHoverView } from 'app/features/visualization/data-hover/DataHoverView';\n\nimport { HeatmapData } from './fields';\nimport { HeatmapHoverEvent } from './utils';\n\ntype Props = {\n  data: HeatmapData;\n  hover: HeatmapHoverEvent;\n  showHistogram?: boolean;\n  timeRange: TimeRange;\n  replaceVars: InterpolateFunction;\n  scopedVars: ScopedVars[];\n};\n\nexport const HeatmapHoverView = (props: Props) => {\n  if (props.hover.seriesIdx === 2) {\n    return <DataHoverView data={props.data.exemplars} rowIndex={props.hover.dataIdx} header={'Exemplar'} />;\n  }\n  return <HeatmapHoverCell {...props} />;\n};\n\nconst HeatmapHoverCell = ({ data, hover, showHistogram, scopedVars, replaceVars }: Props) => {\n  const index = hover.dataIdx;\n  const xField = data.heatmap?.fields[0];\n  const yField = data.heatmap?.fields[1];\n  const countField = data.heatmap?.fields[2];\n\n  const xDisp = (v: number) => {\n    if (xField?.display) {\n      return formattedValueToString(xField.display(v));\n    }\n    if (xField?.type === FieldType.time) {\n      const tooltipTimeFormat = 'YYYY-MM-DD HH:mm:ss';\n      const dashboard = getDashboardSrv().getCurrent();\n      return dashboard?.formatDate(v, tooltipTimeFormat);\n    }\n    return `${v}`;\n  };\n\n  const xVals = xField?.values;\n  const yVals = yField?.values;\n  const countVals = countField?.values;\n\n  // labeled buckets\n  const meta = readHeatmapRowsCustomMeta(data.heatmap);\n  const yDisp = yField?.display ? (v: string) => formattedValueToString(yField.display!(v)) : (v: string) => `${v}`;\n\n  const yValueIdx = index % data.yBucketCount! ?? 0;\n\n  let yBucketMin: string;\n  let yBucketMax: string;\n\n  let nonNumericOrdinalDisplay: string | undefined = undefined;\n\n  if (meta.yOrdinalDisplay) {\n    const yMinIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx - 1 : yValueIdx;\n    const yMaxIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx : yValueIdx + 1;\n    yBucketMin = yMinIdx < 0 ? meta.yMinDisplay! : `${meta.yOrdinalDisplay[yMinIdx]}`;\n    yBucketMax = `${meta.yOrdinalDisplay[yMaxIdx]}`;\n\n    // e.g. \"pod-xyz123\"\n    if (!meta.yOrdinalLabel || Number.isNaN(+meta.yOrdinalLabel[0])) {\n      nonNumericOrdinalDisplay = data.yLayout === HeatmapCellLayout.le ? yBucketMax : yBucketMin;\n    }\n  } else {\n    const value = yVals?.[yValueIdx];\n\n    if (data.yLayout === HeatmapCellLayout.le) {\n      yBucketMax = `${value}`;\n\n      if (data.yLog) {\n        let logFn = data.yLog === 2 ? Math.log2 : Math.log10;\n        let exp = logFn(value) - 1 / data.yLogSplit!;\n        yBucketMin = `${data.yLog ** exp}`;\n      } else {\n        yBucketMin = `${value - data.yBucketSize!}`;\n      }\n    } else {\n      yBucketMin = `${value}`;\n\n      if (data.yLog) {\n        let logFn = data.yLog === 2 ? Math.log2 : Math.log10;\n        let exp = logFn(value) + 1 / data.yLogSplit!;\n        yBucketMax = `${data.yLog ** exp}`;\n      } else {\n        yBucketMax = `${value + data.yBucketSize!}`;\n      }\n    }\n  }\n\n  let xBucketMin: number;\n  let xBucketMax: number;\n\n  if (data.xLayout === HeatmapCellLayout.le) {\n    xBucketMax = xVals?.[index];\n    xBucketMin = xBucketMax - data.xBucketSize!;\n  } else {\n    xBucketMin = xVals?.[index];\n    xBucketMax = xBucketMin + data.xBucketSize!;\n  }\n\n  const count = countVals?.[index];\n\n  const visibleFields = data.heatmap?.fields.filter((f) => !Boolean(f.config.custom?.hideFrom?.tooltip));\n  const links: Array<LinkModel<Field>> = [];\n  const linkLookup = new Set<string>();\n\n  for (const field of visibleFields ?? []) {\n    const hasLinks = field.config.links && field.config.links.length > 0;\n\n    if (hasLinks && data.heatmap) {\n      const appropriateScopedVars = scopedVars.find(\n        (scopedVar) =>\n          scopedVar && scopedVar.__dataContext && scopedVar.__dataContext.value.field.name === nonNumericOrdinalDisplay\n      );\n\n      field.getLinks = getLinksSupplier(data.heatmap, field, appropriateScopedVars || {}, replaceVars);\n    }\n\n    if (field.getLinks) {\n      const value = field.values[index];\n      const display = field.display ? field.display(value) : { text: `${value}`, numeric: +value };\n\n      field.getLinks({ calculatedValue: display, valueRowIndex: index }).forEach((link) => {\n        const key = `${link.title}/${link.href}`;\n        if (!linkLookup.has(key)) {\n          links.push(link);\n          linkLookup.add(key);\n        }\n      });\n    }\n  }\n\n  let can = useRef<HTMLCanvasElement>(null);\n\n  let histCssWidth = 150;\n  let histCssHeight = 50;\n  let histCanWidth = Math.round(histCssWidth * devicePixelRatio);\n  let histCanHeight = Math.round(histCssHeight * devicePixelRatio);\n\n  useEffect(\n    () => {\n      if (showHistogram) {\n        let histCtx = can.current?.getContext('2d');\n\n        if (histCtx && xVals && yVals && countVals) {\n          let fromIdx = index;\n\n          while (xVals[fromIdx--] === xVals[index]) {}\n\n          fromIdx++;\n\n          let toIdx = fromIdx + data.yBucketCount!;\n\n          let maxCount = 0;\n\n          let i = fromIdx;\n          while (i < toIdx) {\n            let c = countVals[i];\n            maxCount = Math.max(maxCount, c);\n            i++;\n          }\n\n          let pHov = new Path2D();\n          let pRest = new Path2D();\n\n          i = fromIdx;\n          let j = 0;\n          while (i < toIdx) {\n            let c = countVals[i];\n\n            if (c > 0) {\n              let pctY = c / maxCount;\n              let pctX = j / (data.yBucketCount! + 1);\n\n              let p = i === index ? pHov : pRest;\n\n              p.rect(\n                Math.round(histCanWidth * pctX),\n                Math.round(histCanHeight * (1 - pctY)),\n                Math.round(histCanWidth / data.yBucketCount!),\n                Math.round(histCanHeight * pctY)\n              );\n            }\n\n            i++;\n            j++;\n          }\n\n          histCtx.clearRect(0, 0, histCanWidth, histCanHeight);\n\n          histCtx.fillStyle = '#ffffff80';\n          histCtx.fill(pRest);\n\n          histCtx.fillStyle = '#ff000080';\n          histCtx.fill(pHov);\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [index]\n  );\n\n  const [isSparse] = useState(\n    () => data.heatmap?.meta?.type === DataFrameType.HeatmapCells && !isHeatmapCellsDense(data.heatmap)\n  );\n\n  if (isSparse) {\n    return (\n      <div>\n        <DataHoverView data={data.heatmap} rowIndex={index} />\n      </div>\n    );\n  }\n\n  const renderYBucket = () => {\n    if (nonNumericOrdinalDisplay) {\n      return <div>Name: {nonNumericOrdinalDisplay}</div>;\n    }\n\n    switch (data.yLayout) {\n      case HeatmapCellLayout.unknown:\n        return <div>{yDisp(yBucketMin)}</div>;\n    }\n    return (\n      <div>\n        Bucket: {yDisp(yBucketMin)} - {yDisp(yBucketMax)}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div>\n        <div>{xDisp(xBucketMin)}</div>\n        {data.xLayout !== HeatmapCellLayout.unknown && <div>{xDisp(xBucketMax)}</div>}\n      </div>\n      {showHistogram && (\n        <canvas\n          width={histCanWidth}\n          height={histCanHeight}\n          ref={can}\n          style={{ width: histCanWidth + 'px', height: histCanHeight + 'px' }}\n        />\n      )}\n      <div>\n        {renderYBucket()}\n        <div>\n          {getFieldDisplayName(countField!, data.heatmap)}: {data.display!(count)}\n        </div>\n      </div>\n      {links.length > 0 && (\n        <VerticalGroup>\n          {links.map((link, i) => (\n            <LinkButton\n              key={i}\n              icon={'external-link-alt'}\n              target={link.target}\n              href={link.href}\n              onClick={link.onClick}\n              fill=\"text\"\n              style={{ width: '100%' }}\n            >\n              {link.title}\n            </LinkButton>\n          ))}\n        </VerticalGroup>\n      )}\n    </>\n  );\n};\n","import { MutableRefObject, RefObject } from 'react';\nimport uPlot, { Cursor } from 'uplot';\n\nimport {\n  DashboardCursorSync,\n  DataFrameType,\n  DataHoverClearEvent,\n  DataHoverEvent,\n  DataHoverPayload,\n  EventBus,\n  formattedValueToString,\n  getValueFormat,\n  GrafanaTheme2,\n  incrRoundDn,\n  incrRoundUp,\n  TimeRange,\n  FieldType,\n} from '@grafana/data';\nimport { AxisPlacement, ScaleDirection, ScaleDistribution, ScaleOrientation, HeatmapCellLayout } from '@grafana/schema';\nimport { UPlotConfigBuilder } from '@grafana/ui';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\n\nimport { pointWithin, Quadtree, Rect } from '../barchart/quadtree';\n\nimport { HeatmapData } from './fields';\nimport { FieldConfig, YAxisConfig } from './types';\n\ninterface PathbuilderOpts {\n  each: (u: uPlot, seriesIdx: number, dataIdx: number, lft: number, top: number, wid: number, hgt: number) => void;\n  gap?: number | null;\n  hideLE?: number;\n  hideGE?: number;\n  xAlign?: -1 | 0 | 1;\n  yAlign?: -1 | 0 | 1;\n  ySizeDivisor?: number;\n  disp: {\n    fill: {\n      values: (u: uPlot, seriesIndex: number) => number[];\n      index: Array<CanvasRenderingContext2D['fillStyle']>;\n    };\n  };\n}\n\ninterface PointsBuilderOpts {\n  each: (u: uPlot, seriesIdx: number, dataIdx: number, lft: number, top: number, wid: number, hgt: number) => void;\n}\n\nexport interface HeatmapHoverEvent {\n  seriesIdx: number;\n  dataIdx: number;\n  pageX: number;\n  pageY: number;\n}\n\nexport interface HeatmapZoomEvent {\n  xMin: number;\n  xMax: number;\n}\n\ninterface PrepConfigOpts {\n  dataRef: RefObject<HeatmapData>;\n  theme: GrafanaTheme2;\n  eventBus: EventBus;\n  onhover?: null | ((evt?: HeatmapHoverEvent | null) => void);\n  onclick?: null | ((evt?: Object) => void);\n  onzoom?: null | ((evt: HeatmapZoomEvent) => void);\n  isToolTipOpen: MutableRefObject<boolean>;\n  timeZone: string;\n  getTimeRange: () => TimeRange;\n  exemplarColor: string;\n  cellGap?: number | null; // in css pixels\n  hideLE?: number;\n  hideGE?: number;\n  yAxisConfig: YAxisConfig;\n  ySizeDivisor?: number;\n  sync?: () => DashboardCursorSync;\n  // Identifies the shared key for uPlot cursor sync\n  eventsScope?: string;\n}\n\nexport function prepConfig(opts: PrepConfigOpts) {\n  const {\n    dataRef,\n    theme,\n    eventBus,\n    onhover,\n    onclick,\n    onzoom,\n    isToolTipOpen,\n    timeZone,\n    getTimeRange,\n    cellGap,\n    hideLE,\n    hideGE,\n    yAxisConfig,\n    ySizeDivisor,\n    sync,\n    eventsScope = '__global_',\n  } = opts;\n\n  const xScaleKey = 'x';\n  let xScaleUnit = 'time';\n  let isTime = true;\n\n  if (dataRef.current?.heatmap?.fields[0].type !== FieldType.time) {\n    xScaleUnit = dataRef.current?.heatmap?.fields[0].config?.unit ?? 'x';\n    isTime = false;\n  }\n\n  const pxRatio = devicePixelRatio;\n\n  let heatmapType = dataRef.current?.heatmap?.meta?.type;\n  const exemplarFillColor = theme.visualization.getColorByName(opts.exemplarColor);\n\n  let qt: Quadtree;\n  let hRect: Rect | null;\n\n  let builder = new UPlotConfigBuilder(timeZone);\n\n  let rect: DOMRect;\n\n  builder.addHook('init', (u) => {\n    u.root.querySelectorAll<HTMLElement>('.u-cursor-pt').forEach((el) => {\n      Object.assign(el.style, {\n        borderRadius: '0',\n        border: '1px solid white',\n        background: 'transparent',\n      });\n    });\n\n    onclick &&\n      u.over.addEventListener(\n        'mouseup',\n        (e) => {\n          // @ts-ignore\n          let isDragging: boolean = u.cursor.drag._x || u.cursor.drag._y;\n\n          if (!isDragging) {\n            onclick(e);\n          }\n        },\n        true\n      );\n  });\n\n  onzoom &&\n    builder.addHook('setSelect', (u) => {\n      onzoom({\n        xMin: u.posToVal(u.select.left, xScaleKey),\n        xMax: u.posToVal(u.select.left + u.select.width, xScaleKey),\n      });\n      u.setSelect({ left: 0, top: 0, width: 0, height: 0 }, false);\n    });\n\n  if (isTime) {\n    // this is a tmp hack because in mode: 2, uplot does not currently call scales.x.range() for setData() calls\n    // scales.x.range() typically reads back from drilled-down panelProps.timeRange via getTimeRange()\n    builder.addHook('setData', (u) => {\n      //let [min, max] = (u.scales!.x!.range! as uPlot.Range.Function)(u, 0, 100, xScaleKey);\n\n      let { min: xMin, max: xMax } = u.scales!.x;\n\n      let min = getTimeRange().from.valueOf();\n      let max = getTimeRange().to.valueOf();\n\n      if (xMin !== min || xMax !== max) {\n        queueMicrotask(() => {\n          u.setScale(xScaleKey, { min, max });\n        });\n      }\n    });\n  }\n\n  // rect of .u-over (grid area)\n  builder.addHook('syncRect', (u, r) => {\n    rect = r;\n  });\n\n  const payload: DataHoverPayload = {\n    point: {\n      [xScaleUnit]: null,\n    },\n    data: dataRef.current?.heatmap,\n  };\n  const hoverEvent = new DataHoverEvent(payload);\n\n  let pendingOnleave: ReturnType<typeof setTimeout> | 0;\n\n  onhover &&\n    builder.addHook('setLegend', (u) => {\n      if (u.cursor.idxs != null) {\n        for (let i = 0; i < u.cursor.idxs.length; i++) {\n          const sel = u.cursor.idxs[i];\n          if (sel != null) {\n            const { left, top } = u.cursor;\n            payload.rowIndex = sel;\n            payload.point[xScaleUnit] = u.posToVal(left!, xScaleKey);\n            eventBus.publish(hoverEvent);\n\n            if (!isToolTipOpen.current) {\n              if (pendingOnleave) {\n                clearTimeout(pendingOnleave);\n                pendingOnleave = 0;\n              }\n              onhover({\n                seriesIdx: i,\n                dataIdx: sel,\n                pageX: rect.left + left!,\n                pageY: rect.top + top!,\n              });\n            }\n            return;\n          }\n        }\n      }\n\n      if (!isToolTipOpen.current) {\n        // if tiles have gaps, reduce flashing / re-render (debounce onleave by 100ms)\n        if (!pendingOnleave) {\n          pendingOnleave = setTimeout(() => {\n            onhover(null);\n            payload.rowIndex = undefined;\n            payload.point[xScaleUnit] = null;\n            eventBus.publish(hoverEvent);\n          }, 100);\n        }\n      }\n    });\n\n  builder.addHook('drawClear', (u) => {\n    qt = qt || new Quadtree(0, 0, u.bbox.width, u.bbox.height);\n\n    qt.clear();\n\n    // force-clear the path cache to cause drawBars() to rebuild new quadtree\n    u.series.forEach((s, i) => {\n      if (i > 0) {\n        // @ts-ignore\n        s._paths = null;\n      }\n    });\n  });\n\n  builder.setMode(2);\n\n  builder.addScale({\n    scaleKey: xScaleKey,\n    isTime,\n    orientation: ScaleOrientation.Horizontal,\n    direction: ScaleDirection.Right,\n    // TODO: expand by x bucket size and layout\n    range: (u, dataMin, dataMax) => {\n      if (isTime) {\n        return [getTimeRange().from.valueOf(), getTimeRange().to.valueOf()];\n      } else {\n        if (dataRef.current?.xLayout === HeatmapCellLayout.le) {\n          return [dataMin - dataRef.current?.xBucketSize!, dataMax];\n        } else if (dataRef.current?.xLayout === HeatmapCellLayout.ge) {\n          return [dataMin, dataMax + dataRef.current?.xBucketSize!];\n        } else {\n          let offset = dataRef.current?.xBucketSize! / 2;\n\n          return [dataMin - offset, dataMax + offset];\n        }\n      }\n    },\n  });\n\n  let incrs;\n\n  if (!isTime) {\n    incrs = [];\n\n    for (let i = 0; i < 10; i++) {\n      incrs.push(i * dataRef.current?.xBucketSize!);\n    }\n  }\n\n  builder.addAxis({\n    scaleKey: xScaleKey,\n    placement: AxisPlacement.Bottom,\n    incrs,\n    isTime,\n    theme: theme,\n    timeZone,\n  });\n\n  const yField = dataRef.current?.heatmap?.fields[1]!;\n  if (!yField) {\n    return builder; // early abort (avoids error)\n  }\n\n  const yFieldConfig: FieldConfig | undefined = yField.config?.custom;\n  const yScale = yFieldConfig?.scaleDistribution ?? { type: ScaleDistribution.Linear };\n  const yAxisReverse = Boolean(yAxisConfig.reverse);\n  const isSparseHeatmap = heatmapType === DataFrameType.HeatmapCells && !isHeatmapCellsDense(dataRef.current?.heatmap!);\n  const shouldUseLogScale = yScale.type !== ScaleDistribution.Linear || isSparseHeatmap;\n  const isOrdinalY = readHeatmapRowsCustomMeta(dataRef.current?.heatmap).yOrdinalDisplay != null;\n\n  // random to prevent syncing y in other heatmaps\n  // TODO: try to match TimeSeries y keygen algo to sync with TimeSeries panels (when not isOrdinalY)\n  const yScaleKey = 'y_' + (Math.random() + 1).toString(36).substring(7);\n\n  builder.addScale({\n    scaleKey: yScaleKey,\n    isTime: false,\n    // distribution: ScaleDistribution.Ordinal, // does not work with facets/scatter yet\n    orientation: ScaleOrientation.Vertical,\n    direction: yAxisReverse ? ScaleDirection.Down : ScaleDirection.Up,\n    // should be tweakable manually\n    distribution: shouldUseLogScale ? ScaleDistribution.Log : ScaleDistribution.Linear,\n    log: yScale.log ?? 2,\n    range:\n      // sparse already accounts for le/ge by explicit yMin & yMax cell bounds, so no need to expand y range\n      isSparseHeatmap\n        ? (u, dataMin, dataMax) => {\n            let scaleMin: number | null, scaleMax: number | null;\n\n            [scaleMin, scaleMax] = shouldUseLogScale\n              ? uPlot.rangeLog(dataMin, dataMax, (yScale.log ?? 2) as unknown as uPlot.Scale.LogBase, true)\n              : [dataMin, dataMax];\n\n            if (shouldUseLogScale && !isOrdinalY) {\n              let yExp = u.scales[yScaleKey].log!;\n              let log = yExp === 2 ? Math.log2 : Math.log10;\n\n              let { min: explicitMin, max: explicitMax } = yAxisConfig;\n\n              // guard against <= 0\n              if (explicitMin != null && explicitMin > 0) {\n                // snap to magnitude\n                let minLog = log(explicitMin);\n                scaleMin = yExp ** incrRoundDn(minLog, 1);\n              }\n\n              if (explicitMax != null && explicitMax > 0) {\n                let maxLog = log(explicitMax);\n                scaleMax = yExp ** incrRoundUp(maxLog, 1);\n              }\n            }\n\n            return [scaleMin, scaleMax];\n          }\n        : // dense and ordinal only have one of yMin|yMax|y, so expand range by one cell in the direction of le/ge/unknown\n          (u, dataMin, dataMax) => {\n            let scaleMin = dataMin,\n              scaleMax = dataMax;\n\n            let { min: explicitMin, max: explicitMax } = yAxisConfig;\n\n            // logarithmic expansion\n            if (shouldUseLogScale) {\n              let yExp = u.scales[yScaleKey].log!;\n\n              let minExpanded = false;\n              let maxExpanded = false;\n\n              let log = yExp === 2 ? Math.log2 : Math.log10;\n\n              if (ySizeDivisor !== 1) {\n                let minLog = log(dataMin);\n                let maxLog = log(dataMax);\n\n                if (!Number.isInteger(minLog)) {\n                  scaleMin = yExp ** incrRoundDn(minLog, 1);\n                  minExpanded = true;\n                }\n\n                if (!Number.isInteger(maxLog)) {\n                  scaleMax = yExp ** incrRoundUp(maxLog, 1);\n                  maxExpanded = true;\n                }\n              }\n\n              if (dataRef.current?.yLayout === HeatmapCellLayout.le) {\n                if (!minExpanded) {\n                  scaleMin /= yExp;\n                }\n              } else if (dataRef.current?.yLayout === HeatmapCellLayout.ge) {\n                if (!maxExpanded) {\n                  scaleMax *= yExp;\n                }\n              } else {\n                scaleMin /= yExp / 2;\n                scaleMax *= yExp / 2;\n              }\n\n              if (!isOrdinalY) {\n                // guard against <= 0\n                if (explicitMin != null && explicitMin > 0) {\n                  // snap down to magnitude\n                  let minLog = log(explicitMin);\n                  scaleMin = yExp ** incrRoundDn(minLog, 1);\n                }\n\n                if (explicitMax != null && explicitMax > 0) {\n                  let maxLog = log(explicitMax);\n                  scaleMax = yExp ** incrRoundUp(maxLog, 1);\n                }\n              }\n            }\n            // linear expansion\n            else {\n              let bucketSize = dataRef.current?.yBucketSize;\n\n              if (bucketSize === 0) {\n                bucketSize = 1;\n              }\n\n              if (bucketSize) {\n                if (dataRef.current?.yLayout === HeatmapCellLayout.le) {\n                  scaleMin -= bucketSize!;\n                } else if (dataRef.current?.yLayout === HeatmapCellLayout.ge) {\n                  scaleMax += bucketSize!;\n                } else {\n                  scaleMin -= bucketSize! / 2;\n                  scaleMax += bucketSize! / 2;\n                }\n              } else {\n                // how to expand scale range if inferred non-regular or log buckets?\n              }\n\n              if (!isOrdinalY) {\n                scaleMin = explicitMin ?? scaleMin;\n                scaleMax = explicitMax ?? scaleMax;\n              }\n            }\n\n            return [scaleMin, scaleMax];\n          },\n  });\n\n  const dispY = yField.display ?? getValueFormat('short');\n\n  builder.addAxis({\n    scaleKey: yScaleKey,\n    show: yAxisConfig.axisPlacement !== AxisPlacement.Hidden,\n    placement: yAxisConfig.axisPlacement || AxisPlacement.Left,\n    size: yAxisConfig.axisWidth || null,\n    label: yAxisConfig.axisLabel,\n    theme: theme,\n    formatValue: (v, decimals) => formattedValueToString(dispY(v, decimals)),\n    splits: isOrdinalY\n      ? (self: uPlot) => {\n          const meta = readHeatmapRowsCustomMeta(dataRef.current?.heatmap);\n          if (!meta.yOrdinalDisplay) {\n            return [0, 1]; //?\n          }\n          let splits = meta.yOrdinalDisplay.map((v, idx) => idx);\n\n          switch (dataRef.current?.yLayout) {\n            case HeatmapCellLayout.le:\n              splits.unshift(-1);\n              break;\n            case HeatmapCellLayout.ge:\n              splits.push(splits.length);\n              break;\n          }\n\n          // Skip labels when the height is too small\n          if (self.height < 60) {\n            splits = [splits[0], splits[splits.length - 1]];\n          } else {\n            while (splits.length > 3 && (self.height - 15) / splits.length < 10) {\n              splits = splits.filter((v, idx) => idx % 2 === 0); // remove half the items\n            }\n          }\n          return splits;\n        }\n      : undefined,\n    values: isOrdinalY\n      ? (self: uPlot, splits) => {\n          const meta = readHeatmapRowsCustomMeta(dataRef.current?.heatmap);\n          if (meta.yOrdinalDisplay) {\n            return splits.map((v) =>\n              v < 0\n                ? meta.yMinDisplay ?? '' // Check prometheus style labels\n                : meta.yOrdinalDisplay[v] ?? ''\n            );\n          }\n          return splits;\n        }\n      : undefined,\n  });\n\n  const pathBuilder = isSparseHeatmap ? heatmapPathsSparse : heatmapPathsDense;\n\n  // heatmap layer\n  builder.addSeries({\n    facets: [\n      {\n        scale: xScaleKey,\n        auto: true,\n        sorted: 1,\n      },\n      {\n        scale: yScaleKey,\n        auto: true,\n      },\n    ],\n    pathBuilder: pathBuilder({\n      each: (u, seriesIdx, dataIdx, x, y, xSize, ySize) => {\n        qt.add({\n          x: x - u.bbox.left,\n          y: y - u.bbox.top,\n          w: xSize,\n          h: ySize,\n          sidx: seriesIdx,\n          didx: dataIdx,\n        });\n      },\n      gap: cellGap,\n      hideLE,\n      hideGE,\n      xAlign:\n        dataRef.current?.xLayout === HeatmapCellLayout.le\n          ? -1\n          : dataRef.current?.xLayout === HeatmapCellLayout.ge\n          ? 1\n          : 0,\n      yAlign: ((dataRef.current?.yLayout === HeatmapCellLayout.le\n        ? -1\n        : dataRef.current?.yLayout === HeatmapCellLayout.ge\n        ? 1\n        : 0) * (yAxisReverse ? -1 : 1)) as -1 | 0 | 1,\n      ySizeDivisor,\n      disp: {\n        fill: {\n          values: (u, seriesIdx) => dataRef.current?.heatmapColors?.values!,\n          index: dataRef.current?.heatmapColors?.palette!,\n        },\n      },\n    }),\n    theme,\n    scaleKey: '', // facets' scales used (above)\n  });\n\n  // exemplars layer\n  builder.addSeries({\n    facets: [\n      {\n        scale: xScaleKey,\n        auto: true,\n        sorted: 1,\n      },\n      {\n        scale: yScaleKey,\n        auto: true,\n      },\n    ],\n    pathBuilder: heatmapPathsPoints(\n      {\n        each: (u, seriesIdx, dataIdx, x, y, xSize, ySize) => {\n          qt.add({\n            x: x - u.bbox.left,\n            y: y - u.bbox.top,\n            w: xSize,\n            h: ySize,\n            sidx: seriesIdx,\n            didx: dataIdx,\n          });\n        },\n      },\n      exemplarFillColor\n    ),\n    theme,\n    scaleKey: '', // facets' scales used (above)\n  });\n\n  const cursor: Cursor = {\n    drag: {\n      x: true,\n      y: false,\n      setScale: false,\n    },\n    dataIdx: (u, seriesIdx) => {\n      if (seriesIdx === 1) {\n        hRect = null;\n\n        let cx = u.cursor.left! * pxRatio;\n        let cy = u.cursor.top! * pxRatio;\n\n        qt.get(cx, cy, 1, 1, (o) => {\n          if (pointWithin(cx, cy, o.x, o.y, o.x + o.w, o.y + o.h)) {\n            hRect = o;\n          }\n        });\n      }\n\n      return hRect && seriesIdx === hRect.sidx ? hRect.didx : null;\n    },\n    points: {\n      fill: 'rgba(255,255,255, 0.3)',\n      bbox: (u, seriesIdx) => {\n        let isHovered = hRect && seriesIdx === hRect.sidx;\n\n        return {\n          left: isHovered ? hRect!.x / pxRatio : -10,\n          top: isHovered ? hRect!.y / pxRatio : -10,\n          width: isHovered ? hRect!.w / pxRatio : 0,\n          height: isHovered ? hRect!.h / pxRatio : 0,\n        };\n      },\n    },\n  };\n\n  if (sync && sync() !== DashboardCursorSync.Off) {\n    cursor.sync = {\n      key: eventsScope,\n      scales: [xScaleKey, yScaleKey],\n      filters: {\n        pub: (type: string, src: uPlot, x: number, y: number, w: number, h: number, dataIdx: number) => {\n          if (x < 0) {\n            payload.point[xScaleUnit] = null;\n            eventBus.publish(new DataHoverClearEvent());\n          } else {\n            payload.point[xScaleUnit] = src.posToVal(x, xScaleKey);\n            eventBus.publish(hoverEvent);\n          }\n\n          return true;\n        },\n      },\n    };\n\n    builder.setSync();\n  }\n\n  builder.setCursor(cursor);\n\n  return builder;\n}\n\nconst CRISP_EDGES_GAP_MIN = 4;\n\nexport function heatmapPathsDense(opts: PathbuilderOpts) {\n  const { disp, each, gap = 1, hideLE = -Infinity, hideGE = Infinity, xAlign = 1, yAlign = 1, ySizeDivisor = 1 } = opts;\n\n  const pxRatio = devicePixelRatio;\n\n  const round = gap! >= CRISP_EDGES_GAP_MIN ? Math.round : (v: number) => v;\n\n  const cellGap = Math.round(gap! * pxRatio);\n\n  return (u: uPlot, seriesIdx: number) => {\n    uPlot.orient(\n      u,\n      seriesIdx,\n      (\n        series,\n        dataX,\n        dataY,\n        scaleX,\n        scaleY,\n        valToPosX,\n        valToPosY,\n        xOff,\n        yOff,\n        xDim,\n        yDim,\n        moveTo,\n        lineTo,\n        rect,\n        arc\n      ) => {\n        let d = u.data[seriesIdx];\n        const xs = d[0] as unknown as number[];\n        const ys = d[1] as unknown as number[];\n        const counts = d[2] as unknown as number[];\n        const dlen = xs.length;\n\n        // fill colors are mapped from interpolating densities / counts along some gradient\n        // (should be quantized to 64 colors/levels max. e.g. 16)\n        let fills = disp.fill.values(u, seriesIdx);\n        let fillPalette = disp.fill.index ?? [...new Set(fills)];\n\n        let fillPaths = fillPalette.map((color) => new Path2D());\n\n        // detect x and y bin qtys by detecting layout repetition in x & y data\n        let yBinQty = dlen - ys.lastIndexOf(ys[0]);\n        let xBinQty = dlen / yBinQty;\n        let yBinIncr = ys[1] - ys[0] || scaleY.max! - scaleY.min!;\n        let xBinIncr = xs[yBinQty] - xs[0];\n\n        // uniform tile sizes based on zoom level\n        let xSize: number;\n        let ySize: number;\n\n        if (scaleX.distr === 3) {\n          xSize = Math.abs(valToPosX(xs[0] * scaleX.log!, scaleX, xDim, xOff) - valToPosX(xs[0], scaleX, xDim, xOff));\n        } else {\n          xSize = Math.abs(valToPosX(xBinIncr, scaleX, xDim, xOff) - valToPosX(0, scaleX, xDim, xOff));\n        }\n\n        if (scaleY.distr === 3) {\n          ySize =\n            Math.abs(valToPosY(ys[0] * scaleY.log!, scaleY, yDim, yOff) - valToPosY(ys[0], scaleY, yDim, yOff)) /\n            ySizeDivisor;\n        } else {\n          ySize = Math.abs(valToPosY(yBinIncr, scaleY, yDim, yOff) - valToPosY(0, scaleY, yDim, yOff)) / ySizeDivisor;\n        }\n\n        // clamp min tile size to 1px\n        xSize = Math.max(1, round(xSize - cellGap));\n        ySize = Math.max(1, round(ySize - cellGap));\n\n        // bucket agg direction\n        // let xCeil = false;\n        // let yCeil = false;\n\n        let xOffset = xAlign === -1 ? -xSize : xAlign === 0 ? -xSize / 2 : 0;\n        let yOffset = yAlign === 1 ? -ySize : yAlign === 0 ? -ySize / 2 : 0;\n\n        // pre-compute x and y offsets\n        let cys = ys.slice(0, yBinQty).map((y) => round(valToPosY(y, scaleY, yDim, yOff) + yOffset));\n        let cxs = Array.from({ length: xBinQty }, (v, i) =>\n          round(valToPosX(xs[i * yBinQty], scaleX, xDim, xOff) + xOffset)\n        );\n\n        for (let i = 0; i < dlen; i++) {\n          if (counts[i] > hideLE && counts[i] < hideGE) {\n            let cx = cxs[~~(i / yBinQty)];\n            let cy = cys[i % yBinQty];\n\n            let fillPath = fillPaths[fills[i]];\n\n            rect(fillPath, cx, cy, xSize, ySize);\n\n            each(u, 1, i, cx, cy, xSize, ySize);\n          }\n        }\n\n        u.ctx.save();\n        //\tu.ctx.globalAlpha = 0.8;\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n\n        return null;\n      }\n    );\n\n    return null;\n  };\n}\n\nexport function heatmapPathsPoints(opts: PointsBuilderOpts, exemplarColor: string) {\n  return (u: uPlot, seriesIdx: number) => {\n    uPlot.orient(\n      u,\n      seriesIdx,\n      (\n        series,\n        dataX,\n        dataY,\n        scaleX,\n        scaleY,\n        valToPosX,\n        valToPosY,\n        xOff,\n        yOff,\n        xDim,\n        yDim,\n        moveTo,\n        lineTo,\n        rect,\n        arc\n      ) => {\n        //console.time('heatmapPathsSparse');\n\n        let points = new Path2D();\n        let fillPaths = [points];\n        let fillPalette = [exemplarColor ?? 'rgba(255,0,255,0.7)'];\n\n        for (let i = 0; i < dataX.length; i++) {\n          let yVal = dataY[i]!;\n          yVal -= 0.5; // center vertically in bucket (when tiles are le)\n          // y-randomize vertically to distribute exemplars in same bucket at same time\n          let randSign = Math.round(Math.random()) * 2 - 1;\n          yVal += randSign * 0.5 * Math.random();\n\n          let x = valToPosX(dataX[i], scaleX, xDim, xOff);\n          let y = valToPosY(yVal, scaleY, yDim, yOff);\n          let w = 8;\n          let h = 8;\n\n          rect(points, x - w / 2, y - h / 2, w, h);\n\n          opts.each(u, seriesIdx, i, x - w / 2, y - h / 2, w, h);\n        }\n\n        u.ctx.save();\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n      }\n    );\n\n    return null;\n  };\n}\n// accepts xMax, yMin, yMax, count\n// xbinsize? x tile sizes are uniform?\nexport function heatmapPathsSparse(opts: PathbuilderOpts) {\n  const { disp, each, gap = 1, hideLE = -Infinity, hideGE = Infinity } = opts;\n\n  const pxRatio = devicePixelRatio;\n\n  const round = gap! >= CRISP_EDGES_GAP_MIN ? Math.round : (v: number) => v;\n\n  const cellGap = Math.round(gap! * pxRatio);\n\n  return (u: uPlot, seriesIdx: number) => {\n    uPlot.orient(\n      u,\n      seriesIdx,\n      (\n        series,\n        dataX,\n        dataY,\n        scaleX,\n        scaleY,\n        valToPosX,\n        valToPosY,\n        xOff,\n        yOff,\n        xDim,\n        yDim,\n        moveTo,\n        lineTo,\n        rect,\n        arc\n      ) => {\n        //console.time('heatmapPathsSparse');\n\n        let d = u.data[seriesIdx];\n        const xMaxs = d[0] as unknown as number[]; // xMax, do we get interval?\n        const yMins = d[1] as unknown as number[];\n        const yMaxs = d[2] as unknown as number[];\n        const counts = d[3] as unknown as number[];\n        const dlen = xMaxs.length;\n\n        // fill colors are mapped from interpolating densities / counts along some gradient\n        // (should be quantized to 64 colors/levels max. e.g. 16)\n        let fills = disp.fill.values(u, seriesIdx);\n        let fillPalette = disp.fill.index ?? [...new Set(fills)];\n\n        let fillPaths = fillPalette.map((color) => new Path2D());\n\n        // cache all tile bounds\n        let xOffs = new Map();\n        let yOffs = new Map();\n\n        for (let i = 0; i < xMaxs.length; i++) {\n          let xMax = xMaxs[i];\n          let yMin = yMins[i];\n          let yMax = yMaxs[i];\n\n          if (!xOffs.has(xMax)) {\n            xOffs.set(xMax, round(valToPosX(xMax, scaleX, xDim, xOff)));\n          }\n\n          if (!yOffs.has(yMin)) {\n            yOffs.set(yMin, round(valToPosY(yMin, scaleY, yDim, yOff)));\n          }\n\n          if (!yOffs.has(yMax)) {\n            yOffs.set(yMax, round(valToPosY(yMax, scaleY, yDim, yOff)));\n          }\n        }\n\n        // uniform x size (interval, step)\n        let xSizeUniform = xOffs.get(xMaxs.find((v) => v !== xMaxs[0])) - xOffs.get(xMaxs[0]);\n\n        for (let i = 0; i < dlen; i++) {\n          if (counts[i] <= hideLE || counts[i] >= hideGE) {\n            continue;\n          }\n\n          let xMax = xMaxs[i];\n          let yMin = yMins[i];\n          let yMax = yMaxs[i];\n\n          let xMaxPx = xOffs.get(xMax); // xSize is from interval, or inferred delta?\n          let yMinPx = yOffs.get(yMin);\n          let yMaxPx = yOffs.get(yMax);\n\n          let xSize = xSizeUniform;\n          let ySize = yMinPx - yMaxPx;\n\n          // clamp min tile size to 1px\n          xSize = Math.max(1, xSize - cellGap);\n          ySize = Math.max(1, ySize - cellGap);\n\n          let x = xMaxPx;\n          let y = yMinPx;\n\n          let fillPath = fillPaths[fills[i]];\n\n          rect(fillPath, x, y, xSize, ySize);\n\n          each(u, 1, i, x, y, xSize, ySize);\n        }\n\n        u.ctx.save();\n        //\tu.ctx.globalAlpha = 0.8;\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n\n        //console.timeEnd('heatmapPathsSparse');\n      }\n    );\n\n    return null;\n  };\n}\n\nexport const boundedMinMax = (\n  values: number[],\n  minValue?: number,\n  maxValue?: number,\n  hideLE = -Infinity,\n  hideGE = Infinity\n) => {\n  if (minValue == null) {\n    minValue = Infinity;\n\n    for (let i = 0; i < values.length; i++) {\n      if (values[i] > hideLE && values[i] < hideGE) {\n        minValue = Math.min(minValue, values[i]);\n      }\n    }\n  }\n\n  if (maxValue == null) {\n    maxValue = -Infinity;\n\n    for (let i = 0; i < values.length; i++) {\n      if (values[i] > hideLE && values[i] < hideGE) {\n        maxValue = Math.max(maxValue, values[i]);\n      }\n    }\n  }\n\n  return [minValue, maxValue];\n};\n\nexport const valuesToFills = (values: number[], palette: string[], minValue: number, maxValue: number): number[] => {\n  let range = maxValue - minValue || 1;\n\n  let paletteSize = palette.length;\n\n  let indexedFills = Array(values.length);\n\n  for (let i = 0; i < values.length; i++) {\n    indexedFills[i] =\n      values[i] < minValue\n        ? 0\n        : values[i] > maxValue\n        ? paletteSize - 1\n        : Math.min(paletteSize - 1, Math.floor((paletteSize * (values[i] - minValue)) / range));\n  }\n\n  return indexedFills;\n};\n","import {\n  cacheFieldDisplayNames,\n  DataFrame,\n  DataFrameType,\n  Field,\n  FieldType,\n  formattedValueToString,\n  getDisplayProcessor,\n  GrafanaTheme2,\n  LinkModel,\n  outerJoinDataFrames,\n  ValueFormatter,\n  ValueLinkConfig,\n} from '@grafana/data';\nimport { HeatmapCellLayout } from '@grafana/schema';\nimport {\n  calculateHeatmapFromData,\n  isHeatmapCellsDense,\n  readHeatmapRowsCustomMeta,\n  rowsToCellsHeatmap,\n} from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { parseSampleValue, sortSeriesByLabel } from 'app/plugins/datasource/prometheus/result_transformer';\n\nimport { CellValues, Options } from './types';\nimport { boundedMinMax, valuesToFills } from './utils';\n\nexport interface HeatmapData {\n  heatmap?: DataFrame; // data we will render\n  heatmapColors?: {\n    // quantized palette\n    palette: string[];\n    // indices into palette\n    values: number[];\n\n    // color scale range\n    minValue: number;\n    maxValue: number;\n  };\n\n  exemplars?: DataFrame; // optionally linked exemplars\n  exemplarColor?: string;\n\n  xBucketSize?: number;\n  yBucketSize?: number;\n\n  xBucketCount?: number;\n  yBucketCount?: number;\n\n  xLayout?: HeatmapCellLayout;\n  yLayout?: HeatmapCellLayout;\n\n  xLog?: number;\n  yLog?: number;\n\n  xLogSplit?: number;\n  yLogSplit?: number;\n\n  // Print a heatmap cell value\n  display?: (v: number) => string;\n\n  // Errors\n  warning?: string;\n}\n\nexport function prepareHeatmapData(\n  frames: DataFrame[],\n  annotations: DataFrame[] | undefined,\n  options: Options,\n  palette: string[],\n  theme: GrafanaTheme2,\n  getFieldLinks?: (exemplars: DataFrame, field: Field) => (config: ValueLinkConfig) => Array<LinkModel<Field>>\n): HeatmapData {\n  if (!frames?.length) {\n    return {};\n  }\n\n  cacheFieldDisplayNames(frames);\n\n  const exemplars = annotations?.find((f) => f.name === 'exemplar');\n\n  if (getFieldLinks) {\n    exemplars?.fields.forEach((field, index) => {\n      exemplars.fields[index].getLinks = getFieldLinks(exemplars, field);\n    });\n  }\n\n  if (options.calculate) {\n    return getDenseHeatmapData(\n      calculateHeatmapFromData(frames, options.calculation ?? {}),\n      exemplars,\n      options,\n      palette,\n      theme\n    );\n  }\n\n  // Check for known heatmap types\n  let rowsHeatmap: DataFrame | undefined = undefined;\n  for (const frame of frames) {\n    switch (frame.meta?.type) {\n      case DataFrameType.HeatmapCells:\n        return isHeatmapCellsDense(frame)\n          ? getDenseHeatmapData(frame, exemplars, options, palette, theme)\n          : getSparseHeatmapData(frame, exemplars, options, palette, theme);\n\n      case DataFrameType.HeatmapRows:\n        rowsHeatmap = frame; // the default format\n    }\n  }\n\n  // Everything past here assumes a field for each row in the heatmap (buckets)\n  if (!rowsHeatmap) {\n    if (frames.length > 1) {\n      let allNamesNumeric = frames.every(\n        (frame) => !Number.isNaN(parseSampleValue(frame.fields[1].state?.displayName!))\n      );\n\n      if (allNamesNumeric) {\n        frames.sort(sortSeriesByLabel);\n      }\n\n      rowsHeatmap = [\n        outerJoinDataFrames({\n          frames,\n        })!,\n      ][0];\n    } else {\n      let frame = frames[0];\n      let numberFields = frame.fields.filter((field) => field.type === FieldType.number);\n      let allNamesNumeric = numberFields.every((field) => !Number.isNaN(parseSampleValue(field.state?.displayName!)));\n\n      if (allNamesNumeric) {\n        numberFields.sort((a, b) => parseSampleValue(a.state?.displayName!) - parseSampleValue(b.state?.displayName!));\n\n        rowsHeatmap = {\n          ...frame,\n          fields: [frame.fields.find((f) => f.type === FieldType.time)!, ...numberFields],\n        };\n      } else {\n        rowsHeatmap = frame;\n      }\n    }\n  }\n\n  return getDenseHeatmapData(\n    rowsToCellsHeatmap({\n      unit: options.yAxis?.unit, // used to format the ordinal lookup values\n      decimals: options.yAxis?.decimals,\n      ...options.rowsFrame,\n      frame: rowsHeatmap,\n    }),\n    exemplars,\n    options,\n    palette,\n    theme\n  );\n}\n\nconst getSparseHeatmapData = (\n  frame: DataFrame,\n  exemplars: DataFrame | undefined,\n  options: Options,\n  palette: string[],\n  theme: GrafanaTheme2\n): HeatmapData => {\n  if (frame.meta?.type !== DataFrameType.HeatmapCells || isHeatmapCellsDense(frame)) {\n    return {\n      warning: 'Expected sparse heatmap format',\n      heatmap: frame,\n    };\n  }\n\n  // y axis tick label display\n  updateFieldDisplay(frame.fields[1], options.yAxis, theme);\n\n  const valueField = frame.fields[3];\n\n  // cell value display\n  const disp = updateFieldDisplay(valueField, options.cellValues, theme);\n\n  let [minValue, maxValue] = boundedMinMax(\n    valueField.values,\n    options.color.min,\n    options.color.max,\n    options.filterValues?.le,\n    options.filterValues?.ge\n  );\n\n  return {\n    heatmap: frame,\n    heatmapColors: {\n      palette,\n      values: valuesToFills(valueField.values, palette, minValue, maxValue),\n      minValue,\n      maxValue,\n    },\n    exemplars,\n    display: (v) => formattedValueToString(disp(v)),\n  };\n};\n\nconst getDenseHeatmapData = (\n  frame: DataFrame,\n  exemplars: DataFrame | undefined,\n  options: Options,\n  palette: string[],\n  theme: GrafanaTheme2\n): HeatmapData => {\n  if (frame.meta?.type !== DataFrameType.HeatmapCells) {\n    return {\n      warning: 'Expected heatmap scanlines format',\n      heatmap: frame,\n    };\n  }\n\n  if (frame.fields.length < 2 || frame.length < 2) {\n    return { heatmap: frame };\n  }\n\n  const meta = readHeatmapRowsCustomMeta(frame);\n  let xName: string | undefined = undefined;\n  let yName: string | undefined = undefined;\n  let valueField: Field | undefined = undefined;\n\n  // validate field display properties\n  for (const field of frame.fields) {\n    switch (field.name) {\n      case 'y':\n        yName = field.name;\n\n      case 'yMin':\n      case 'yMax': {\n        if (!yName) {\n          yName = field.name;\n        }\n        if (meta.yOrdinalDisplay == null) {\n          updateFieldDisplay(field, options.yAxis, theme);\n        }\n        break;\n      }\n\n      case 'x':\n      case 'xMin':\n      case 'xMax':\n        xName = field.name;\n        break;\n\n      default: {\n        if (field.type === FieldType.number && !valueField) {\n          valueField = field;\n        }\n      }\n    }\n  }\n\n  if (!yName) {\n    return { warning: 'Missing Y field', heatmap: frame };\n  }\n  if (!yName) {\n    return { warning: 'Missing X field', heatmap: frame };\n  }\n  if (!valueField) {\n    return { warning: 'Missing value field', heatmap: frame };\n  }\n\n  const disp = updateFieldDisplay(valueField, options.cellValues, theme);\n\n  // infer bucket sizes from data (for now)\n  // the 'heatmap-scanlines' dense frame format looks like:\n  // x:      1,1,1,1,2,2,2,2\n  // y:      3,4,5,6,3,4,5,6\n  // count:  0,0,0,7,0,3,0,1\n\n  const xs = frame.fields[0].values;\n  const ys = frame.fields[1].values;\n  const dlen = xs.length;\n\n  // below is literally copy/paste from the pathBuilder code in utils.ts\n  // detect x and y bin qtys by detecting layout repetition in x & y data\n  let yBinQty = dlen - ys.lastIndexOf(ys[0]);\n  let xBinQty = dlen / yBinQty;\n  let yBinIncr = ys[1] - ys[0];\n  let xBinIncr = xs[yBinQty] - xs[0];\n\n  let [minValue, maxValue] = boundedMinMax(\n    valueField.values,\n    options.color.min,\n    options.color.max,\n    options.filterValues?.le,\n    options.filterValues?.ge\n  );\n\n  let calcX = options.calculation?.xBuckets;\n  let calcY = options.calculation?.yBuckets;\n\n  const data: HeatmapData = {\n    heatmap: frame,\n    heatmapColors: {\n      palette,\n      values: valuesToFills(valueField.values, palette, minValue, maxValue),\n      minValue,\n      maxValue,\n    },\n\n    exemplars: exemplars?.length ? exemplars : undefined,\n    xBucketSize: xBinIncr,\n    yBucketSize: yBinIncr,\n    xBucketCount: xBinQty,\n    yBucketCount: yBinQty,\n\n    yLog: calcY?.scale?.log ?? 0,\n    xLog: calcX?.scale?.log ?? 0,\n\n    xLogSplit: calcX?.scale?.log ? +(calcX?.value ?? '1') : 1,\n    yLogSplit: calcY?.scale?.log ? +(calcY?.value ?? '1') : 1,\n\n    // TODO: improve heuristic\n    xLayout:\n      xName === 'xMax' ? HeatmapCellLayout.le : xName === 'xMin' ? HeatmapCellLayout.ge : HeatmapCellLayout.unknown,\n    yLayout:\n      yName === 'yMax' ? HeatmapCellLayout.le : yName === 'yMin' ? HeatmapCellLayout.ge : HeatmapCellLayout.unknown,\n\n    display: (v) => formattedValueToString(disp(v)),\n  };\n\n  return data;\n};\n\nfunction updateFieldDisplay(field: Field, opts: CellValues | undefined, theme: GrafanaTheme2): ValueFormatter {\n  if (opts?.unit?.length || opts?.decimals != null) {\n    const { unit, decimals } = opts;\n    field.display = undefined;\n    field.config = { ...field.config };\n    if (unit?.length) {\n      field.config.unit = unit;\n    }\n    if (decimals != null) {\n      field.config.decimals = decimals;\n    }\n  }\n  if (!field.display) {\n    field.display = getDisplayProcessor({ field, theme });\n  }\n  return field.display;\n}\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTSTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as ui from '@grafana/schema';\n\n/**\n * Controls the color mode of the heatmap\n */\nexport enum HeatmapColorMode {\n  Opacity = 'opacity',\n  Scheme = 'scheme',\n}\n\n/**\n * Controls the color scale of the heatmap\n */\nexport enum HeatmapColorScale {\n  Exponential = 'exponential',\n  Linear = 'linear',\n}\n\n/**\n * Controls various color options\n */\nexport interface HeatmapColorOptions {\n  /**\n   * Controls the exponent when scale is set to exponential\n   */\n  exponent: number;\n  /**\n   * Controls the color fill when in opacity mode\n   */\n  fill: string;\n  /**\n   * Sets the maximum value for the color scale\n   */\n  max?: number;\n  /**\n   * Sets the minimum value for the color scale\n   */\n  min?: number;\n  /**\n   * Sets the color mode\n   */\n  mode?: HeatmapColorMode;\n  /**\n   * Reverses the color scheme\n   */\n  reverse: boolean;\n  /**\n   * Controls the color scale\n   */\n  scale?: HeatmapColorScale;\n  /**\n   * Controls the color scheme used\n   */\n  scheme: string;\n  /**\n   * Controls the number of color steps\n   */\n  steps: number;\n}\n\n/**\n * Configuration options for the yAxis\n */\nexport interface YAxisConfig extends ui.AxisConfig {\n  /**\n   * Controls the number of decimals for yAxis values\n   */\n  decimals?: number;\n  /**\n   * Sets the maximum value for the yAxis\n   */\n  max?: number;\n  /**\n   * Sets the minimum value for the yAxis\n   */\n  min?: number;\n  /**\n   * Reverses the yAxis\n   */\n  reverse?: boolean;\n  /**\n   * Sets the yAxis unit\n   */\n  unit?: string;\n}\n\n/**\n * Controls cell value options\n */\nexport interface CellValues {\n  /**\n   * Controls the number of decimals for cell values\n   */\n  decimals?: number;\n  /**\n   * Controls the cell value unit\n   */\n  unit?: string;\n}\n\n/**\n * Controls the value filter range\n */\nexport interface FilterValueRange {\n  /**\n   * Sets the filter range to values greater than or equal to the given value\n   */\n  ge?: number;\n  /**\n   * Sets the filter range to values less than or equal to the given value\n   */\n  le?: number;\n}\n\n/**\n * Controls tooltip options\n */\nexport interface HeatmapTooltip {\n  /**\n   * Controls if the tooltip is shown\n   */\n  show: boolean;\n  /**\n   * Controls if the tooltip shows a histogram of the y-axis values\n   */\n  yHistogram?: boolean;\n}\n\n/**\n * Controls legend options\n */\nexport interface HeatmapLegend {\n  /**\n   * Controls if the legend is shown\n   */\n  show: boolean;\n}\n\n/**\n * Controls exemplar options\n */\nexport interface ExemplarConfig {\n  /**\n   * Sets the color of the exemplar markers\n   */\n  color: string;\n}\n\n/**\n * Controls frame rows options\n */\nexport interface RowsHeatmapOptions {\n  /**\n   * Controls tick alignment when not calculating from data\n   */\n  layout?: ui.HeatmapCellLayout;\n  /**\n   * Sets the name of the cell when not calculating from data\n   */\n  value?: string;\n}\n\nexport interface Options {\n  /**\n   * Controls if the heatmap should be calculated from data\n   */\n  calculate?: boolean;\n  /**\n   * Calculation options for the heatmap\n   */\n  calculation?: ui.HeatmapCalculationOptions;\n  /**\n   * Controls gap between cells\n   */\n  cellGap?: number;\n  /**\n   * Controls cell radius\n   */\n  cellRadius?: number;\n  /**\n   * Controls cell value unit\n   */\n  cellValues?: CellValues;\n  /**\n   * Controls the color options\n   */\n  color: HeatmapColorOptions;\n  /**\n   * Controls exemplar options\n   */\n  exemplars: ExemplarConfig;\n  /**\n   * Filters values between a given range\n   */\n  filterValues?: FilterValueRange;\n  /**\n   * | *{\n   * \taxisPlacement: ui.AxisPlacement & \"left\" // TODO: fix after remove when https://github.com/grafana/cuetsy/issues/74 is fixed\n   * }\n   * Controls legend options\n   */\n  legend: HeatmapLegend;\n  /**\n   * Controls tick alignment and value name when not calculating from data\n   */\n  rowsFrame?: RowsHeatmapOptions;\n  /**\n   * | *{\n   * \tlayout: ui.HeatmapCellLayout & \"auto\" // TODO: fix after remove when https://github.com/grafana/cuetsy/issues/74 is fixed\n   * }\n   * Controls the display of the value in the cell\n   */\n  showValue: ui.VisibilityMode;\n  /**\n   * Controls tooltip options\n   */\n  tooltip: HeatmapTooltip;\n  /**\n   * Controls yAxis placement\n   */\n  yAxis: YAxisConfig;\n}\n\nexport const defaultOptions: Partial<Options> = {\n  calculate: false,\n  cellGap: 1,\n  cellValues: {},\n  color: {\n    /**\n     * mode:     HeatmapColorMode // TODO: fix after remove when https://github.com/grafana/cuetsy/issues/74 is fixed\n     */\n    scheme: 'Oranges',\n    fill: 'dark-orange',\n    /**\n     * scale:    HeatmapColorScale // TODO: fix after remove when https://github.com/grafana/cuetsy/issues/74 is fixed\n     */\n    reverse: false,\n    exponent: 0.5,\n    steps: 64,\n  },\n  exemplars: {\n    color: 'rgba(255,0,255,0.7)',\n  },\n  filterValues: {\n    le: 1e-09,\n  },\n  legend: {\n    show: true,\n  },\n  showValue: ui.VisibilityMode.Auto,\n  tooltip: {\n    show: true,\n    yHistogram: false,\n  },\n};\n\nexport interface FieldConfig extends ui.HideableFieldConfig {\n  scaleDistribution?: ui.ScaleDistributionConfig;\n}\n","export * from './panelcfg.gen';\n\nimport { AxisPlacement, HeatmapCellLayout } from '@grafana/schema';\n\nimport { defaultOptions as defaultOptionsGen, HeatmapColorMode, HeatmapColorScale, Options } from './panelcfg.gen';\n\nexport const defaultOptions = {\n  ...defaultOptionsGen,\n  color: { ...defaultOptionsGen.color, mode: HeatmapColorMode.Scheme, scale: HeatmapColorScale.Exponential },\n  yAxis: { ...defaultOptionsGen.yAxis, axisPlacement: AxisPlacement.Left },\n  rowsFrame: { ...defaultOptionsGen.rowsFrame, layout: HeatmapCellLayout.auto },\n} as Options;\n","import * as d3 from 'd3';\nimport * as d3ScaleChromatic from 'd3-scale-chromatic';\nimport tinycolor from 'tinycolor2';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { HeatmapColorOptions, defaultOptions, HeatmapColorMode, HeatmapColorScale } from './types';\n\n// https://observablehq.com/@d3/color-schemes?collection=@d3/d3-scale-chromatic\n\n// the previous heatmap panel used d3 deps and some code to interpolate to static 9-color palettes. here we just hard-code them for clarity.\n// if the need arises for configurable-sized palettes, we can bring back the deps & variable interpolation (see simplified code at end)\n\n// Schemes from d3-scale-chromatic\n// https://github.com/d3/d3-scale-chromatic\nexport const colorSchemes = [\n  // Diverging\n  { name: 'BrBG', invert: 'always' },\n  { name: 'PiYG', invert: 'always' },\n  { name: 'PRGn', invert: 'always' },\n  { name: 'PuOr', invert: 'always' },\n  { name: 'RdBu', invert: 'always' },\n  { name: 'RdGy', invert: 'always' },\n  { name: 'RdYlBu', invert: 'always' },\n  { name: 'RdYlGn', invert: 'always' },\n  { name: 'Spectral', invert: 'always' },\n\n  // Sequential (Single Hue)\n  { name: 'Blues', invert: 'dark' },\n  { name: 'Greens', invert: 'dark' },\n  { name: 'Greys', invert: 'dark' },\n  { name: 'Oranges', invert: 'dark' },\n  { name: 'Purples', invert: 'dark' },\n  { name: 'Reds', invert: 'dark' },\n\n  // Sequential (Multi-Hue)\n  { name: 'Turbo', invert: 'light' },\n  { name: 'Cividis', invert: 'light' },\n  { name: 'Viridis', invert: 'light' },\n  { name: 'Magma', invert: 'light' },\n  { name: 'Inferno', invert: 'light' },\n  { name: 'Plasma', invert: 'light' },\n  { name: 'Warm', invert: 'light' },\n  { name: 'Cool', invert: 'light' },\n  { name: 'Cubehelix', invert: 'light', name2: 'CubehelixDefault' },\n  { name: 'BuGn', invert: 'dark' },\n  { name: 'BuPu', invert: 'dark' },\n  { name: 'GnBu', invert: 'dark' },\n  { name: 'OrRd', invert: 'dark' },\n  { name: 'PuBuGn', invert: 'dark' },\n  { name: 'PuBu', invert: 'dark' },\n  { name: 'PuRd', invert: 'dark' },\n  { name: 'RdPu', invert: 'dark' },\n  { name: 'YlGnBu', invert: 'dark' },\n  { name: 'YlGn', invert: 'dark' },\n  { name: 'YlOrBr', invert: 'dark' },\n  { name: 'YlOrRd', invert: 'dark' },\n\n  // Cyclical\n  { name: 'Rainbow', invert: 'always' },\n  { name: 'Sinebow', invert: 'always' },\n];\n\ntype Interpolator = (t: number) => string;\n\nconst DEFAULT_SCHEME = colorSchemes.find((scheme) => scheme.name === 'Spectral');\n\nexport function quantizeScheme(opts: HeatmapColorOptions, theme: GrafanaTheme2): string[] {\n  const options = { ...defaultOptions.color, ...opts };\n  const palette = [];\n  const steps = (options.steps ?? 128) - 1;\n\n  if (opts.mode === HeatmapColorMode.Opacity) {\n    const fill = tinycolor(theme.visualization.getColorByName(opts.fill)).toPercentageRgb();\n\n    const scale =\n      options.scale === HeatmapColorScale.Exponential\n        ? d3.scalePow().exponent(options.exponent).domain([0, 1]).range([0, 1])\n        : d3.scaleLinear().domain([0, 1]).range([0, 1]);\n\n    for (let i = 0; i <= steps; i++) {\n      fill.a = scale(i / steps);\n      palette.push(tinycolor(fill).toString('hex8'));\n    }\n  } else {\n    const scheme = colorSchemes.find((scheme) => scheme.name === options.scheme) ?? DEFAULT_SCHEME!;\n    let fnName = 'interpolate' + (scheme.name2 ?? scheme.name);\n    const interpolate: Interpolator = (d3ScaleChromatic as any)[fnName];\n\n    for (let i = 0; i <= steps; i++) {\n      let rgbStr = interpolate(i / steps);\n      let rgb =\n        rgbStr.indexOf('rgb') === 0\n          ? '#' + [...rgbStr.matchAll(/\\d+/g)].map((v) => (+v[0]).toString(16).padStart(2, '0')).join('')\n          : rgbStr;\n      palette.push(rgb);\n    }\n\n    if (\n      scheme.invert === 'always' ||\n      (scheme.invert === 'dark' && theme.isDark) ||\n      (scheme.invert === 'light' && theme.isLight)\n    ) {\n      palette.reverse();\n    }\n\n    if (opts.reverse) {\n      palette.reverse();\n    }\n  }\n\n  return palette;\n}\n","import { css } from '@emotion/css';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\n\nimport { DataFrame, DataFrameType, Field, getLinksSupplier, GrafanaTheme2, PanelProps, TimeRange } from '@grafana/data';\nimport { PanelDataErrorView } from '@grafana/runtime';\nimport { ScaleDistributionConfig } from '@grafana/schema';\nimport {\n  Portal,\n  ScaleDistribution,\n  UPlotChart,\n  usePanelContext,\n  useStyles2,\n  useTheme2,\n  VizLayout,\n  VizTooltipContainer,\n} from '@grafana/ui';\nimport { ColorScale } from 'app/core/components/ColorScale/ColorScale';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\n\nimport { ExemplarModalHeader } from './ExemplarModalHeader';\nimport { HeatmapHoverView } from './HeatmapHoverView';\nimport { prepareHeatmapData } from './fields';\nimport { quantizeScheme } from './palettes';\nimport { Options } from './types';\nimport { HeatmapHoverEvent, prepConfig } from './utils';\n\ninterface HeatmapPanelProps extends PanelProps<Options> {}\n\nexport const HeatmapPanel = ({\n  data,\n  id,\n  timeRange,\n  timeZone,\n  width,\n  height,\n  options,\n  fieldConfig,\n  eventBus,\n  onChangeTimeRange,\n  replaceVariables,\n}: HeatmapPanelProps) => {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const { sync } = usePanelContext();\n\n  //  necessary for enabling datalinks in hover view\n  let scopedVarsFromRawData = [];\n  for (const series of data.series) {\n    for (const field of series.fields) {\n      if (field.state?.scopedVars) {\n        scopedVarsFromRawData.push(field.state.scopedVars);\n      }\n    }\n  }\n\n  // ugh\n  let timeRangeRef = useRef<TimeRange>(timeRange);\n  timeRangeRef.current = timeRange;\n\n  const getFieldLinksSupplier = useCallback(\n    (exemplars: DataFrame, field: Field) => {\n      return getLinksSupplier(exemplars, field, field.state?.scopedVars ?? {}, replaceVariables);\n    },\n    [replaceVariables]\n  );\n\n  const palette = useMemo(() => quantizeScheme(options.color, theme), [options.color, theme]);\n\n  const info = useMemo(() => {\n    try {\n      return prepareHeatmapData(data.series, data.annotations, options, palette, theme, getFieldLinksSupplier);\n    } catch (ex) {\n      return { warning: `${ex}` };\n    }\n  }, [data.series, data.annotations, options, palette, theme, getFieldLinksSupplier]);\n\n  const facets = useMemo(() => {\n    let exemplarsXFacet: number[] = []; // \"Time\" field\n    let exemplarsyFacet: number[] = [];\n\n    const meta = readHeatmapRowsCustomMeta(info.heatmap);\n    if (info.exemplars?.length && meta.yMatchWithLabel) {\n      exemplarsXFacet = info.exemplars?.fields[0].values;\n\n      // ordinal/labeled heatmap-buckets?\n      const hasLabeledY = meta.yOrdinalDisplay != null;\n\n      if (hasLabeledY) {\n        let matchExemplarsBy = info.exemplars?.fields.find((field) => field.name === meta.yMatchWithLabel)!.values;\n        exemplarsyFacet = matchExemplarsBy.map((label) => meta.yOrdinalLabel?.indexOf(label)) as number[];\n      } else {\n        exemplarsyFacet = info.exemplars?.fields[1].values as number[]; // \"Value\" field\n      }\n    }\n\n    return [null, info.heatmap?.fields.map((f) => f.values), [exemplarsXFacet, exemplarsyFacet]];\n  }, [info.heatmap, info.exemplars]);\n\n  const [hover, setHover] = useState<HeatmapHoverEvent | undefined>(undefined);\n  const [shouldDisplayCloseButton, setShouldDisplayCloseButton] = useState<boolean>(false);\n  const isToolTipOpen = useRef<boolean>(false);\n\n  const onCloseToolTip = () => {\n    isToolTipOpen.current = false;\n    setShouldDisplayCloseButton(false);\n    onhover(null);\n  };\n\n  const onclick = () => {\n    isToolTipOpen.current = !isToolTipOpen.current;\n\n    // Linking into useState required to re-render tooltip\n    setShouldDisplayCloseButton(isToolTipOpen.current);\n  };\n\n  const onhover = useCallback(\n    (evt?: HeatmapHoverEvent | null) => {\n      setHover(evt ?? undefined);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [options, data.structureRev]\n  );\n\n  // ugh\n  const dataRef = useRef(info);\n  dataRef.current = info;\n\n  const builder = useMemo(() => {\n    const scaleConfig = dataRef.current?.heatmap?.fields[1].config?.custom\n      ?.scaleDistribution as ScaleDistributionConfig;\n\n    return prepConfig({\n      dataRef,\n      theme,\n      eventBus,\n      onhover: onhover,\n      onclick: options.tooltip.show ? onclick : null,\n      onzoom: (evt) => {\n        const delta = evt.xMax - evt.xMin;\n        if (delta > 1) {\n          onChangeTimeRange({ from: evt.xMin, to: evt.xMax });\n        }\n      },\n      isToolTipOpen,\n      timeZone,\n      getTimeRange: () => timeRangeRef.current,\n      sync,\n      cellGap: options.cellGap,\n      hideLE: options.filterValues?.le,\n      hideGE: options.filterValues?.ge,\n      exemplarColor: options.exemplars?.color ?? 'rgba(255,0,255,0.7)',\n      yAxisConfig: options.yAxis,\n      ySizeDivisor: scaleConfig?.type === ScaleDistribution.Log ? +(options.calculation?.yBuckets?.value || 1) : 1,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, timeZone, data.structureRev]);\n\n  const renderLegend = () => {\n    if (!info.heatmap || !options.legend.show) {\n      return null;\n    }\n\n    let heatmapType = dataRef.current?.heatmap?.meta?.type;\n    let isSparseHeatmap = heatmapType === DataFrameType.HeatmapCells && !isHeatmapCellsDense(dataRef.current?.heatmap!);\n    let countFieldIdx = !isSparseHeatmap ? 2 : 3;\n    const countField = info.heatmap.fields[countFieldIdx];\n\n    let hoverValue: number | undefined = undefined;\n    // seriesIdx: 1 is heatmap layer; 2 is exemplar layer\n    if (hover && info.heatmap.fields && hover.seriesIdx === 1) {\n      hoverValue = countField.values[hover.dataIdx];\n    }\n\n    return (\n      <VizLayout.Legend placement=\"bottom\" maxHeight=\"20%\">\n        <div className={styles.colorScaleWrapper}>\n          <ColorScale\n            hoverValue={hoverValue}\n            colorPalette={palette}\n            min={dataRef.current.heatmapColors?.minValue!}\n            max={dataRef.current.heatmapColors?.maxValue!}\n            display={info.display}\n          />\n        </div>\n      </VizLayout.Legend>\n    );\n  };\n\n  if (info.warning || !info.heatmap) {\n    return (\n      <PanelDataErrorView\n        panelId={id}\n        fieldConfig={fieldConfig}\n        data={data}\n        needsNumberField={true}\n        message={info.warning}\n      />\n    );\n  }\n\n  return (\n    <>\n      <VizLayout width={width} height={height} legend={renderLegend()}>\n        {(vizWidth: number, vizHeight: number) => (\n          <UPlotChart config={builder} data={facets as any} width={vizWidth} height={vizHeight}>\n            {/*children ? children(config, alignedFrame) : null*/}\n          </UPlotChart>\n        )}\n      </VizLayout>\n      <Portal>\n        {hover && options.tooltip.show && (\n          <VizTooltipContainer\n            position={{ x: hover.pageX, y: hover.pageY }}\n            offset={{ x: 10, y: 10 }}\n            allowPointerEvents={isToolTipOpen.current}\n          >\n            {shouldDisplayCloseButton && <ExemplarModalHeader onClick={onCloseToolTip} />}\n            <HeatmapHoverView\n              timeRange={timeRange}\n              data={info}\n              hover={hover}\n              showHistogram={options.tooltip.yHistogram}\n              replaceVars={replaceVariables}\n              scopedVars={scopedVarsFromRawData}\n            />\n          </VizTooltipContainer>\n        )}\n      </Portal>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  colorScaleWrapper: css`\n    margin-left: 25px;\n    padding: 10px 0;\n    max-width: 300px;\n  `,\n});\n","import { FieldConfigSource, PanelModel, PanelTypeChangedHandler } from '@grafana/data';\nimport {\n  AxisPlacement,\n  ScaleDistribution,\n  VisibilityMode,\n  HeatmapCellLayout,\n  HeatmapCalculationMode,\n  HeatmapCalculationOptions,\n} from '@grafana/schema';\n\nimport { colorSchemes } from './palettes';\nimport { Options, defaultOptions, HeatmapColorMode } from './types';\n\n/** Called when the version number changes */\nexport const heatmapMigrationHandler = (panel: PanelModel): Partial<Options> => {\n  // Migrating from angular\n  if (Object.keys(panel.options).length === 0) {\n    return heatmapChangedHandler(panel, 'heatmap', { angular: panel }, panel.fieldConfig);\n  }\n  return panel.options;\n};\n\n/**\n * This is called when the panel changes from another panel\n */\nexport const heatmapChangedHandler: PanelTypeChangedHandler = (panel, prevPluginId, prevOptions, prevFieldConfig) => {\n  if (prevPluginId === 'heatmap' && prevOptions.angular) {\n    const { fieldConfig, options } = angularToReactHeatmap({\n      ...prevOptions.angular,\n      fieldConfig: prevFieldConfig,\n    });\n    panel.fieldConfig = fieldConfig; // Mutates the incoming panel\n    return options;\n  }\n  // alpha for 8.5+, then beta at 9.0.1\n  if (prevPluginId === 'heatmap-new') {\n    const { bucketFrame, ...options } = panel.options;\n    if (bucketFrame) {\n      return { ...options, rowsFrame: bucketFrame };\n    }\n    return panel.options;\n  }\n  return {};\n};\n\nexport function angularToReactHeatmap(angular: any): { fieldConfig: FieldConfigSource; options: Options } {\n  const fieldConfig: FieldConfigSource = {\n    defaults: {},\n    overrides: [],\n  };\n\n  const calculate = angular.dataFormat === 'tsbuckets' ? false : true;\n  const calculation: HeatmapCalculationOptions = {\n    ...defaultOptions.calculation,\n  };\n\n  const oldYAxis = { logBase: 1, ...angular.yAxis };\n\n  if (calculate) {\n    if (angular.xBucketSize) {\n      calculation.xBuckets = { mode: HeatmapCalculationMode.Size, value: `${angular.xBucketSize}` };\n    } else if (angular.xBucketNumber) {\n      calculation.xBuckets = { mode: HeatmapCalculationMode.Count, value: `${angular.xBucketNumber}` };\n    }\n\n    if (angular.yBucketSize) {\n      calculation.yBuckets = { mode: HeatmapCalculationMode.Size, value: `${angular.yBucketSize}` };\n    } else if (angular.xBucketNumber) {\n      calculation.yBuckets = { mode: HeatmapCalculationMode.Count, value: `${angular.yBucketNumber}` };\n    }\n\n    if (oldYAxis.logBase > 1) {\n      calculation.yBuckets = {\n        mode: HeatmapCalculationMode.Count,\n        value: +oldYAxis.splitFactor > 0 ? `${oldYAxis.splitFactor}` : undefined,\n        scale: {\n          type: ScaleDistribution.Log,\n          log: oldYAxis.logBase,\n        },\n      };\n    }\n  }\n\n  const cellGap = asNumber(angular.cards?.cardPadding, 2);\n  const options: Options = {\n    calculate,\n    calculation,\n    color: {\n      ...defaultOptions.color,\n      steps: 128, // best match with existing colors\n    },\n    cellGap: cellGap ? cellGap : 1, // default to size 1\n    cellRadius: asNumber(angular.cards?.cardRound), // just to keep it\n    yAxis: {\n      axisPlacement: oldYAxis.show === false ? AxisPlacement.Hidden : AxisPlacement.Left,\n      reverse: Boolean(angular.reverseYBuckets),\n      axisWidth: asNumber(oldYAxis.width),\n      min: oldYAxis.min,\n      max: oldYAxis.max,\n      unit: oldYAxis.format,\n      decimals: oldYAxis.decimals,\n    },\n    cellValues: {\n      decimals: asNumber(angular.tooltipDecimals),\n    },\n    rowsFrame: {\n      layout: getHeatmapCellLayout(angular.yBucketBound),\n    },\n    legend: {\n      show: Boolean(angular.legend?.show),\n    },\n    showValue: VisibilityMode.Never,\n    tooltip: {\n      show: Boolean(angular.tooltip?.show),\n      yHistogram: Boolean(angular.tooltip?.showHistogram),\n    },\n    exemplars: {\n      ...defaultOptions.exemplars,\n    },\n  };\n\n  if (angular.hideZeroBuckets) {\n    options.filterValues = { ...defaultOptions.filterValues }; // min: 1e-9\n  }\n\n  // Migrate color options\n  const color = angular.color ?? {};\n  switch (color?.mode) {\n    case 'spectrum': {\n      options.color.mode = HeatmapColorMode.Scheme;\n\n      const current = color.colorScheme as string;\n      let scheme = colorSchemes.find((v) => v.name === current);\n      if (!scheme) {\n        scheme = colorSchemes.find((v) => current.indexOf(v.name) >= 0);\n      }\n      options.color.scheme = scheme ? scheme.name : defaultOptions.color.scheme;\n      break;\n    }\n    case 'opacity': {\n      options.color.mode = HeatmapColorMode.Opacity;\n      options.color.scale = color.scale;\n      break;\n    }\n  }\n  options.color.fill = color.cardColor;\n  options.color.min = color.min;\n  options.color.max = color.max;\n\n  if (typeof color.min === 'number' && typeof color.max === 'number' && color.min > color.max) {\n    options.color.min = color.max;\n    options.color.max = color.min;\n    options.color.reverse = true;\n  }\n\n  return { fieldConfig, options };\n}\n\nfunction getHeatmapCellLayout(v?: string): HeatmapCellLayout {\n  switch (v) {\n    case 'upper':\n      return HeatmapCellLayout.ge;\n    case 'lower':\n      return HeatmapCellLayout.le;\n    case 'middle':\n      return HeatmapCellLayout.unknown;\n  }\n  return HeatmapCellLayout.auto;\n}\n\nfunction asNumber(v: any, defaultValue?: number): number | undefined {\n  if (v == null || v === '') {\n    return defaultValue;\n  }\n  const num = +v;\n  return isNaN(num) ? defaultValue : num;\n}\n","import { VisualizationSuggestionsBuilder } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { prepareHeatmapData } from './fields';\nimport { quantizeScheme } from './palettes';\nimport { Options, defaultOptions } from './types';\n\nexport class HeatmapSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const { dataSummary } = builder;\n\n    if (\n      !builder.data?.series ||\n      !dataSummary.hasData ||\n      dataSummary.timeFieldCount < 1 ||\n      dataSummary.numberFieldCount < 2 ||\n      dataSummary.numberFieldCount > 10\n    ) {\n      return;\n    }\n\n    const palette = quantizeScheme(defaultOptions.color, config.theme2);\n    const info = prepareHeatmapData(builder.data.series, undefined, defaultOptions, palette, config.theme2);\n    if (!info || info.warning) {\n      return;\n    }\n\n    builder.getListAppender<Options, {}>({\n      name: '',\n      pluginId: 'heatmap',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          custom: {},\n        },\n        overrides: [],\n      },\n    });\n  }\n}\n","import React from 'react';\n\nimport { FieldConfigProperty, FieldType, identityOverrideProcessor, PanelPlugin } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  AxisPlacement,\n  GraphFieldConfig,\n  ScaleDistribution,\n  ScaleDistributionConfig,\n  HeatmapCellLayout,\n} from '@grafana/schema';\nimport { addHideFrom, ScaleDistributionEditor } from '@grafana/ui/src/options/builder';\nimport { ColorScale } from 'app/core/components/ColorScale/ColorScale';\nimport { addHeatmapCalculationOptions } from 'app/features/transformers/calculateHeatmap/editor/helper';\nimport { readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\n\nimport { HeatmapPanel } from './HeatmapPanel';\nimport { prepareHeatmapData } from './fields';\nimport { heatmapChangedHandler, heatmapMigrationHandler } from './migrations';\nimport { colorSchemes, quantizeScheme } from './palettes';\nimport { HeatmapSuggestionsSupplier } from './suggestions';\nimport { Options, defaultOptions, HeatmapColorMode, HeatmapColorScale } from './types';\n\nexport const plugin = new PanelPlugin<Options, GraphFieldConfig>(HeatmapPanel)\n  .useFieldConfig({\n    disableStandardOptions: Object.values(FieldConfigProperty).filter((v) => v !== FieldConfigProperty.Links),\n    useCustomConfig: (builder) => {\n      builder.addCustomEditor<void, ScaleDistributionConfig>({\n        id: 'scaleDistribution',\n        path: 'scaleDistribution',\n        name: 'Y axis scale',\n        category: ['Heatmap'],\n        editor: ScaleDistributionEditor as any,\n        override: ScaleDistributionEditor as any,\n        defaultValue: { type: ScaleDistribution.Linear },\n        shouldApply: (f) => f.type === FieldType.number,\n        process: identityOverrideProcessor,\n        hideFromDefaults: true,\n      });\n      addHideFrom(builder); // for tooltip etc\n    },\n  })\n  .setPanelChangeHandler(heatmapChangedHandler)\n  .setMigrationHandler(heatmapMigrationHandler)\n  .setPanelOptions((builder, context) => {\n    const opts = context.options ?? defaultOptions;\n\n    let isOrdinalY = false;\n\n    if (context.data.length > 0) {\n      try {\n        // NOTE: this feels like overkill/expensive just to assert if we have an ordinal y\n        // can probably simplify without doing full dataprep\n        const palette = quantizeScheme(opts.color, config.theme2);\n        const v = prepareHeatmapData(context.data, undefined, opts, palette, config.theme2);\n        isOrdinalY = readHeatmapRowsCustomMeta(v.heatmap).yOrdinalDisplay != null;\n      } catch {}\n    }\n\n    let category = ['Heatmap'];\n\n    builder.addRadio({\n      path: 'calculate',\n      name: 'Calculate from data',\n      defaultValue: defaultOptions.calculate,\n      category,\n      settings: {\n        options: [\n          { label: 'Yes', value: true },\n          { label: 'No', value: false },\n        ],\n      },\n    });\n\n    if (opts.calculate) {\n      addHeatmapCalculationOptions('calculation.', builder, opts.calculation, category);\n    }\n\n    category = ['Y Axis'];\n\n    builder\n      .addRadio({\n        path: 'yAxis.axisPlacement',\n        name: 'Placement',\n        defaultValue: defaultOptions.yAxis.axisPlacement ?? AxisPlacement.Left,\n        category,\n        settings: {\n          options: [\n            { label: 'Left', value: AxisPlacement.Left },\n            { label: 'Right', value: AxisPlacement.Right },\n            { label: 'Hidden', value: AxisPlacement.Hidden },\n          ],\n        },\n      })\n      .addUnitPicker({\n        category,\n        path: 'yAxis.unit',\n        name: 'Unit',\n        defaultValue: undefined,\n        settings: {\n          isClearable: true,\n        },\n      })\n      .addNumberInput({\n        category,\n        path: 'yAxis.decimals',\n        name: 'Decimals',\n        settings: {\n          placeholder: 'Auto',\n        },\n      });\n\n    if (!isOrdinalY) {\n      // if undefined, then show the min+max\n      builder\n        .addNumberInput({\n          path: 'yAxis.min',\n          name: 'Min value',\n          settings: {\n            placeholder: 'Auto',\n          },\n          category,\n        })\n        .addTextInput({\n          path: 'yAxis.max',\n          name: 'Max value',\n          settings: {\n            placeholder: 'Auto',\n          },\n          category,\n        });\n    }\n\n    builder\n      .addNumberInput({\n        path: 'yAxis.axisWidth',\n        name: 'Axis width',\n        defaultValue: defaultOptions.yAxis.axisWidth,\n        settings: {\n          placeholder: 'Auto',\n          min: 5, // smaller should just be hidden\n        },\n        category,\n      })\n      .addTextInput({\n        path: 'yAxis.axisLabel',\n        name: 'Axis label',\n        defaultValue: defaultOptions.yAxis.axisLabel,\n        settings: {\n          placeholder: 'Auto',\n        },\n        category,\n      });\n\n    if (!opts.calculate) {\n      builder.addRadio({\n        path: 'rowsFrame.layout',\n        name: 'Tick alignment',\n        defaultValue: defaultOptions.rowsFrame?.layout ?? HeatmapCellLayout.auto,\n        category,\n        settings: {\n          options: [\n            { label: 'Auto', value: HeatmapCellLayout.auto },\n            { label: 'Top (LE)', value: HeatmapCellLayout.le },\n            { label: 'Middle', value: HeatmapCellLayout.unknown },\n            { label: 'Bottom (GE)', value: HeatmapCellLayout.ge },\n          ],\n        },\n      });\n    }\n    builder.addBooleanSwitch({\n      path: 'yAxis.reverse',\n      name: 'Reverse',\n      defaultValue: defaultOptions.yAxis.reverse === true,\n      category,\n    });\n\n    category = ['Colors'];\n\n    builder.addRadio({\n      path: `color.mode`,\n      name: 'Mode',\n      defaultValue: defaultOptions.color.mode,\n      category,\n      settings: {\n        options: [\n          { label: 'Scheme', value: HeatmapColorMode.Scheme },\n          { label: 'Opacity', value: HeatmapColorMode.Opacity },\n        ],\n      },\n    });\n\n    builder.addColorPicker({\n      path: `color.fill`,\n      name: 'Color',\n      defaultValue: defaultOptions.color.fill,\n      category,\n      showIf: (opts) => opts.color.mode === HeatmapColorMode.Opacity,\n    });\n\n    builder.addRadio({\n      path: `color.scale`,\n      name: 'Scale',\n      defaultValue: defaultOptions.color.scale,\n      category,\n      settings: {\n        options: [\n          { label: 'Exponential', value: HeatmapColorScale.Exponential },\n          { label: 'Linear', value: HeatmapColorScale.Linear },\n        ],\n      },\n      showIf: (opts) => opts.color.mode === HeatmapColorMode.Opacity,\n    });\n\n    builder.addSliderInput({\n      path: 'color.exponent',\n      name: 'Exponent',\n      defaultValue: defaultOptions.color.exponent,\n      category,\n      settings: {\n        min: 0.1, // 1 for on/off?\n        max: 2,\n        step: 0.1,\n      },\n      showIf: (opts) =>\n        opts.color.mode === HeatmapColorMode.Opacity && opts.color.scale === HeatmapColorScale.Exponential,\n    });\n\n    builder.addSelect({\n      path: `color.scheme`,\n      name: 'Scheme',\n      description: '',\n      defaultValue: defaultOptions.color.scheme,\n      category,\n      settings: {\n        options: colorSchemes.map((scheme) => ({\n          value: scheme.name,\n          label: scheme.name,\n          //description: 'Set a geometry field based on the results of other fields',\n        })),\n      },\n      showIf: (opts) => opts.color.mode !== HeatmapColorMode.Opacity,\n    });\n\n    builder\n      .addSliderInput({\n        path: 'color.steps',\n        name: 'Steps',\n        defaultValue: defaultOptions.color.steps,\n        category,\n        settings: {\n          min: 2,\n          max: 128,\n          step: 1,\n        },\n      })\n      .addBooleanSwitch({\n        path: 'color.reverse',\n        name: 'Reverse',\n        defaultValue: defaultOptions.color.reverse,\n        category,\n      })\n      .addCustomEditor({\n        id: '__scale__',\n        path: `__scale__`,\n        name: '',\n        category,\n        editor: () => {\n          const palette = quantizeScheme(opts.color, config.theme2);\n          return (\n            <div>\n              <ColorScale colorPalette={palette} min={1} max={100} />\n            </div>\n          );\n        },\n      });\n\n    builder\n      .addNumberInput({\n        path: 'color.min',\n        name: 'Start color scale from value',\n        defaultValue: defaultOptions.color.min,\n        settings: {\n          placeholder: 'Auto (min)',\n        },\n        category,\n      })\n      .addNumberInput({\n        path: 'color.max',\n        name: 'End color scale at value',\n        defaultValue: defaultOptions.color.max,\n        settings: {\n          placeholder: 'Auto (max)',\n        },\n        category,\n      });\n\n    category = ['Cell display'];\n\n    if (!opts.calculate) {\n      builder.addTextInput({\n        path: 'rowsFrame.value',\n        name: 'Value name',\n        defaultValue: defaultOptions.rowsFrame?.value,\n        settings: {\n          placeholder: 'Value',\n        },\n        category,\n      });\n    }\n\n    builder\n      .addUnitPicker({\n        category,\n        path: 'cellValues.unit',\n        name: 'Unit',\n        defaultValue: undefined,\n        settings: {\n          isClearable: true,\n        },\n      })\n      .addNumberInput({\n        category,\n        path: 'cellValues.decimals',\n        name: 'Decimals',\n        settings: {\n          placeholder: 'Auto',\n        },\n      });\n\n    builder\n      // .addRadio({\n      //   path: 'showValue',\n      //   name: 'Show values',\n      //   defaultValue: defaultOptions.showValue,\n      //   category,\n      //   settings: {\n      //     options: [\n      //       { value: VisibilityMode.Auto, label: 'Auto' },\n      //       { value: VisibilityMode.Always, label: 'Always' },\n      //       { value: VisibilityMode.Never, label: 'Never' },\n      //     ],\n      //   },\n      // })\n      .addSliderInput({\n        name: 'Cell gap',\n        path: 'cellGap',\n        defaultValue: defaultOptions.cellGap,\n        category,\n        settings: {\n          min: 0,\n          max: 25,\n        },\n      })\n      .addNumberInput({\n        path: 'filterValues.le',\n        name: 'Hide cells with values <=',\n        defaultValue: defaultOptions.filterValues?.le,\n        settings: {\n          placeholder: 'None',\n        },\n        category,\n      })\n      .addNumberInput({\n        path: 'filterValues.ge',\n        name: 'Hide cells with values >=',\n        defaultValue: defaultOptions.filterValues?.ge,\n        settings: {\n          placeholder: 'None',\n        },\n        category,\n      });\n    // .addSliderInput({\n    //   name: 'Cell radius',\n    //   path: 'cellRadius',\n    //   defaultValue: defaultOptions.cellRadius,\n    //   category,\n    //   settings: {\n    //     min: 0,\n    //     max: 100,\n    //   },\n    // })\n\n    category = ['Tooltip'];\n\n    builder.addBooleanSwitch({\n      path: 'tooltip.show',\n      name: 'Show tooltip',\n      defaultValue: defaultOptions.tooltip.show,\n      category,\n    });\n\n    builder.addBooleanSwitch({\n      path: 'tooltip.yHistogram',\n      name: 'Show histogram (Y axis)',\n      defaultValue: defaultOptions.tooltip.yHistogram,\n      category,\n      showIf: (opts) => opts.tooltip.show,\n    });\n\n    category = ['Legend'];\n    builder.addBooleanSwitch({\n      path: 'legend.show',\n      name: 'Show legend',\n      defaultValue: defaultOptions.legend.show,\n      category,\n    });\n\n    category = ['Exemplars'];\n    builder.addColorPicker({\n      path: 'exemplars.color',\n      name: 'Color',\n      defaultValue: defaultOptions.exemplars.color,\n      category,\n    });\n  })\n  .setSuggestionsSupplier(new HeatmapSuggestionsSupplier());\n"],"names":["GRADIENT_STOPS","ColorScale","colorPalette","min","max","display","hoverValue","useStopsPercentage","colors","setColors","scaleHover","setScaleHover","percent","setPercent","theme","styles","getStyles","getGradientStops","onScaleMouseMove","event","divOffset","offsetWidth","normPercentage","scaleValue","onScaleMouseLeave","clampPercent100","colorArray","stops","colorCount","incr","per","color","gradientEnd","skip","gradientStops","i","v","modeOptions","logModeOptions","AxisEditor","value","onChange","item","RadioButtonGroup","mode","Input","addHeatmapCalculationOptions","prefix","builder","source","category","abs","pow","fixedDec","genIncrs","base","minExp","maxExp","mults","incrs","multDec","exp","expa","mag","_incr","dec","onlyWhole","allMults","decIncrs","oneIncrs","wholeIncrs","numIncrs","niceLinearIncrs","sec","hour","day","year","niceTimeIncrs","heatmapTransformer","options","ctx","map","data","calculateHeatmapFromData","parseNumeric","sortAscStrInf","aName","bName","readHeatmapRowsCustomMeta","frame","isHeatmapCellsDense","foundY","field","rowsToCellsHeatmap","opts","xField","xValues","yFields","f","idx","len","xs","ys","counts2","counts","bucketCounts","bi","bucketBounds","yi","xi","ordinalFieldName","custom","fmt","name","num","valueCfg","prepBucketFrames","frames","a","b","yField","dataLen","j","x","yValues","xBucketsCfg","yBucketsCfg","scaleDistribution","heat2d","heatmap","xSorted","ySorted","minX","minY","maxX","maxY","yExp","xBinIncr","yBinIncr","xMode","yMode","approx","xIncrs","xIncrIdx","bucketSize","yIncrs","yIncrIdx","binX","binY","yLog","minXBin","maxXBin","minYBin","maxYBin","xBinQty","yBinQty","xs2","ys2","initBins","ci","xQty","yQty","xMin","xIncr","yMin","yIncr","HeatmapHoverView","props","DataHoverView","HeatmapHoverCell","hover","showHistogram","scopedVars","replaceVars","index","countField","xDisp","tooltipTimeFormat","xVals","yVals","countVals","meta","yDisp","yValueIdx","yBucketMin","yBucketMax","nonNumericOrdinalDisplay","yMinIdx","yMaxIdx","xBucketMin","xBucketMax","count","visibleFields","links","linkLookup","appropriateScopedVars","scopedVar","link","key","can","histCssWidth","histCssHeight","histCanWidth","histCanHeight","histCtx","fromIdx","toIdx","maxCount","c","pHov","pRest","pctY","pctX","isSparse","renderYBucket","prepConfig","dataRef","eventBus","onhover","onclick","onzoom","isToolTipOpen","timeZone","getTimeRange","cellGap","hideLE","hideGE","yAxisConfig","ySizeDivisor","sync","eventsScope","xScaleKey","xScaleUnit","isTime","pxRatio","heatmapType","exemplarFillColor","qt","hRect","UPlotConfigBuilder","rect","u","el","e","xMax","r","payload","hoverEvent","pendingOnleave","sel","left","top","s","dataMin","dataMax","offset","yScale","yAxisReverse","isSparseHeatmap","shouldUseLogScale","isOrdinalY","yScaleKey","scaleMin","scaleMax","log","explicitMin","explicitMax","minLog","maxLog","minExpanded","maxExpanded","dispY","decimals","self","splits","pathBuilder","heatmapPathsSparse","heatmapPathsDense","seriesIdx","dataIdx","y","xSize","ySize","heatmapPathsPoints","cursor","cx","cy","o","isHovered","type","src","w","h","CRISP_EDGES_GAP_MIN","disp","each","gap","xAlign","yAlign","round","series","dataX","dataY","scaleX","scaleY","valToPosX","valToPosY","xOff","yOff","xDim","yDim","moveTo","lineTo","arc","d","dlen","fills","fillPalette","fillPaths","xOffset","yOffset","cys","cxs","fillPath","p","exemplarColor","points","yVal","randSign","xMaxs","yMins","yMaxs","xOffs","yOffs","yMax","xSizeUniform","xMaxPx","yMinPx","yMaxPx","boundedMinMax","values","minValue","maxValue","valuesToFills","palette","range","paletteSize","indexedFills","prepareHeatmapData","annotations","getFieldLinks","exemplars","getDenseHeatmapData","rowsHeatmap","getSparseHeatmapData","numberFields","updateFieldDisplay","valueField","xName","yName","calcX","calcY","unit","HeatmapColorMode","HeatmapColorScale","defaultOptions","colorSchemes","DEFAULT_SCHEME","scheme","quantizeScheme","steps","fill","tinycolor","scale","fnName","interpolate","rgbStr","rgb","HeatmapPanel","id","timeRange","width","height","fieldConfig","onChangeTimeRange","replaceVariables","scopedVarsFromRawData","timeRangeRef","getFieldLinksSupplier","info","ex","facets","exemplarsXFacet","exemplarsyFacet","label","setHover","shouldDisplayCloseButton","setShouldDisplayCloseButton","onCloseToolTip","evt","scaleConfig","renderLegend","countFieldIdx","VizLayout","PanelDataErrorView","vizWidth","vizHeight","Portal","VizTooltipContainer","ExemplarModalHeader","heatmapMigrationHandler","panel","heatmapChangedHandler","prevPluginId","prevOptions","prevFieldConfig","angularToReactHeatmap","bucketFrame","angular","calculate","calculation","oldYAxis","asNumber","getHeatmapCellLayout","current","defaultValue","HeatmapSuggestionsSupplier","dataSummary","config","PanelPlugin","context"],"sourceRoot":""}